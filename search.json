[{"title":"Activiti基础","url":"/2025/06/19/Activiti%E5%9F%BA%E7%A1%80/","content":"Activiti7一、工作流介绍1.1 概念工作流(Workflow)，就是通过计算机对业务流程自动化执行管理。它主要解决的是“使在多个参与者之间按照某种预定义的规则自动进行传递文档、信息或任务的过程，从而实现某个预期的业务目标，或者促使此目标的实现”。\n1.2 工作流系统一个软件系统中具有工作流的功能，我们把它称为工作流系统，一个系统中工作流的功能是什么？就是对系统的业务流程进行自动化管理，所以工作流是建立在业务流程的基础上，所以一个软件的系统核心根本上还是系统的业务流程，工作流只是协助进行业务流程管理。即使没有工作流业务系统也可以开发运行，只不过有了工作流可以更好的管理业务流程，提高系统的可扩展性。\n1.3 适用行业消费品行业，制造业，电信服务业，银证险等金融服务业，物流服务业，物业服务业，物业管理，大中型进出口贸易公司，政府事业机构，研究院所及教育服务业等，特别是大的跨国企业和集团公司。\n1.4 具体应用1、关键业务流程：订单、报价处理、合同审核、客户电话处理、供应链管理等\n2、行政管理类:出差申请、加班申请、请假申请、用车申请、各种办公用品申请、购买申请、日报周报等凡是原来手工流转处理的行政表单。\n3、人事管理类：员工培训安排、绩效考评、职位变动处理、员工档案信息管理等。\n4、财务相关类：付款请求、应收款处理、日常报销处理、出差报销、预算和计划申请等。\n5、客户服务类：客户信息管理、客户投诉、请求处理、售后服务管理等。\n6、特殊服务类：ISO系列对应流程、质量管理对应流程、产品数据信息管理、贸易公司报关处理、物流公司货物跟踪处理等各种通过表单逐步手工流转完成的任务均可应用工作流软件自动规范地实施。\n1.5 实现方式在没有专门的工作流引擎之前，我们之前为了实现流程控制，通常的做法就是采用状态字段的值来跟踪流程的变化情况。这样不用角色的用户，通过状态字段的取值来决定记录是否显示。\n 针对有权限可以查看的记录，当前用户根据自己的角色来决定审批是否合格的操作。如果合格将状态字段设置一个值，来代表合格；当然如果不合格也需要设置一个值来代表不合格的情况。\n 这是一种最为原始的方式。通过状态字段虽然做到了流程控制，但是当我们的流程发生变更的时候，这种方式所编写的代码也要进行调整。\n 那么有没有专业的方式来实现工作流的管理呢？并且可以做到业务流程变化之后，我们的程序可以不用改变，如果可以实现这样的效果，那么我们的业务系统的适应能力就得到了极大提升。\n二、Activiti7概述2.1 介绍Alfresco软件在2010年5月17日宣布Activiti业务流程管理（BPM）开源项目的正式启动，其首席架构师由业务流程管理BPM的专家 Tom Baeyens担任，Tom Baeyens就是原来jbpm的架构师，而jbpm是一个非常有名的工作流引擎，当然activiti也是一个工作流引擎。\nActiviti是一个工作流引擎， activiti可以将业务系统中复杂的业务流程抽取出来，使用专门的建模语言BPMN2.0进行定义，业务流程按照预先定义的流程进行执行，实现了系统的流程由activiti进行管理，减少业务系统由于流程变更进行系统升级改造的工作量，从而提高系统的健壮性，同时也减少了系统开发维护成本。\n官方网站：https://www.activiti.org/\n\n经历的版本:\n\n目前最新版本：Activiti7.0.0.Beta\n2.1.1 BPMBPM（Business Process Management），即业务流程管理，是一种规范化的构造端到端的业务流程，以持续的提高组织业务效率。常见商业管理教育如EMBA、MBA等均将BPM包含在内。\n2.1.2 BPM软件BPM软件就是根据企业中业务环境的变化，推进人与人之间、人与系统之间以及系统与系统之间的整合及调整的经营方法与解决方案的IT工具。\n通过BPM软件对企业内部及外部的业务流程的整个生命周期进行建模、自动化、管理监控和优化，使企业成本降低，利润得以大幅提升。\nBPM软件在企业中应用领域广泛，凡是有业务流程的地方都可以BPM软件进行管理，比如企业人事办公管理、采购流程管理、公文审批流程管理、财务管理等。\n2.1.3 BPMNBPMN（Business Process Model AndNotation）- 业务流程模型和符号 是由BPMI（BusinessProcess Management Initiative）开发的一套标准的业务流程建模符号，使用BPMN提供的符号可以创建业务流程。 \n2004年5月发布了BPMN1.0规范.BPMI于2005年9月并入OMG（The Object Management Group对象管理组织)组织。OMG于2011年1月发布BPMN2.0的最终版本。\n具体发展历史如下: \n\nBPMN 是目前被各 BPM 厂商广泛接受的 BPM 标准。Activiti 就是使用 BPMN 2.0 进行流程建模、流程执行管理，它包括很多的建模符号，比如：\nEvent \n用一个圆圈表示，它是流程中运行过程中发生的事情。\n\n活动用圆角矩形表示，一个流程由一个活动或多个活动组成\n\nBpmn图形其实是通过xml表示业务流程，上边的.bpmn文件使用文本编辑器打开：\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;definitions xmlns=&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:activiti=&quot;http://activiti.org/bpmn&quot; xmlns:bpmndi=&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot; xmlns:omgdc=&quot;http://www.omg.org/spec/DD/20100524/DC&quot; xmlns:omgdi=&quot;http://www.omg.org/spec/DD/20100524/DI&quot; typeLanguage=&quot;http://www.w3.org/2001/XMLSchema&quot; expressionLanguage=&quot;http://www.w3.org/1999/XPath&quot; targetNamespace=&quot;http://www.activiti.org/test&quot;&gt;  &lt;process id=&quot;myProcess&quot; name=&quot;My process&quot; isExecutable=&quot;true&quot;&gt;    &lt;startEvent id=&quot;startevent1&quot; name=&quot;Start&quot;&gt;&lt;/startEvent&gt;    &lt;userTask id=&quot;usertask1&quot; name=&quot;创建请假单&quot;&gt;&lt;/userTask&gt;    &lt;sequenceFlow id=&quot;flow1&quot; sourceRef=&quot;startevent1&quot; targetRef=&quot;usertask1&quot;&gt;&lt;/sequenceFlow&gt;    &lt;userTask id=&quot;usertask2&quot; name=&quot;部门经理审核&quot;&gt;&lt;/userTask&gt;    &lt;sequenceFlow id=&quot;flow2&quot; sourceRef=&quot;usertask1&quot; targetRef=&quot;usertask2&quot;&gt;&lt;/sequenceFlow&gt;    &lt;userTask id=&quot;usertask3&quot; name=&quot;人事复核&quot;&gt;&lt;/userTask&gt;    &lt;sequenceFlow id=&quot;flow3&quot; sourceRef=&quot;usertask2&quot; targetRef=&quot;usertask3&quot;&gt;&lt;/sequenceFlow&gt;    &lt;endEvent id=&quot;endevent1&quot; name=&quot;End&quot;&gt;&lt;/endEvent&gt;    &lt;sequenceFlow id=&quot;flow4&quot; sourceRef=&quot;usertask3&quot; targetRef=&quot;endevent1&quot;&gt;&lt;/sequenceFlow&gt;  &lt;/process&gt;  &lt;bpmndi:BPMNDiagram id=&quot;BPMNDiagram_myProcess&quot;&gt;    &lt;bpmndi:BPMNPlane bpmnElement=&quot;myProcess&quot; id=&quot;BPMNPlane_myProcess&quot;&gt;      &lt;bpmndi:BPMNShape bpmnElement=&quot;startevent1&quot; id=&quot;BPMNShape_startevent1&quot;&gt;        &lt;omgdc:Bounds height=&quot;35.0&quot; width=&quot;35.0&quot; x=&quot;130.0&quot; y=&quot;160.0&quot;&gt;&lt;/omgdc:Bounds&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape bpmnElement=&quot;usertask1&quot; id=&quot;BPMNShape_usertask1&quot;&gt;        &lt;omgdc:Bounds height=&quot;55.0&quot; width=&quot;105.0&quot; x=&quot;210.0&quot; y=&quot;150.0&quot;&gt;&lt;/omgdc:Bounds&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape bpmnElement=&quot;usertask2&quot; id=&quot;BPMNShape_usertask2&quot;&gt;        &lt;omgdc:Bounds height=&quot;55.0&quot; width=&quot;105.0&quot; x=&quot;360.0&quot; y=&quot;150.0&quot;&gt;&lt;/omgdc:Bounds&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape bpmnElement=&quot;usertask3&quot; id=&quot;BPMNShape_usertask3&quot;&gt;        &lt;omgdc:Bounds height=&quot;55.0&quot; width=&quot;105.0&quot; x=&quot;510.0&quot; y=&quot;150.0&quot;&gt;&lt;/omgdc:Bounds&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape bpmnElement=&quot;endevent1&quot; id=&quot;BPMNShape_endevent1&quot;&gt;        &lt;omgdc:Bounds height=&quot;35.0&quot; width=&quot;35.0&quot; x=&quot;660.0&quot; y=&quot;160.0&quot;&gt;&lt;/omgdc:Bounds&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNEdge bpmnElement=&quot;flow1&quot; id=&quot;BPMNEdge_flow1&quot;&gt;        &lt;omgdi:waypoint x=&quot;165.0&quot; y=&quot;177.0&quot;&gt;&lt;/omgdi:waypoint&gt;        &lt;omgdi:waypoint x=&quot;210.0&quot; y=&quot;177.0&quot;&gt;&lt;/omgdi:waypoint&gt;      &lt;/bpmndi:BPMNEdge&gt;      &lt;bpmndi:BPMNEdge bpmnElement=&quot;flow2&quot; id=&quot;BPMNEdge_flow2&quot;&gt;        &lt;omgdi:waypoint x=&quot;315.0&quot; y=&quot;177.0&quot;&gt;&lt;/omgdi:waypoint&gt;        &lt;omgdi:waypoint x=&quot;360.0&quot; y=&quot;177.0&quot;&gt;&lt;/omgdi:waypoint&gt;      &lt;/bpmndi:BPMNEdge&gt;      &lt;bpmndi:BPMNEdge bpmnElement=&quot;flow3&quot; id=&quot;BPMNEdge_flow3&quot;&gt;        &lt;omgdi:waypoint x=&quot;465.0&quot; y=&quot;177.0&quot;&gt;&lt;/omgdi:waypoint&gt;        &lt;omgdi:waypoint x=&quot;510.0&quot; y=&quot;177.0&quot;&gt;&lt;/omgdi:waypoint&gt;      &lt;/bpmndi:BPMNEdge&gt;      &lt;bpmndi:BPMNEdge bpmnElement=&quot;flow4&quot; id=&quot;BPMNEdge_flow4&quot;&gt;        &lt;omgdi:waypoint x=&quot;615.0&quot; y=&quot;177.0&quot;&gt;&lt;/omgdi:waypoint&gt;        &lt;omgdi:waypoint x=&quot;660.0&quot; y=&quot;177.0&quot;&gt;&lt;/omgdi:waypoint&gt;      &lt;/bpmndi:BPMNEdge&gt;    &lt;/bpmndi:BPMNPlane&gt;  &lt;/bpmndi:BPMNDiagram&gt;&lt;/definitions&gt;\n\n2.2 使用步骤部署activitiActiviti是一个工作流引擎（其实就是一堆jar包API），业务系统访问(操作)activiti的接口，就可以方便的操作流程相关数据，这样就可以把工作流环境与业务系统的环境集成在一起。\n流程定义使用activiti流程建模工具(activity-designer)定义业务流程(.bpmn文件) 。\n.bpmn文件就是业务流程定义文件，通过xml定义业务流程。\n流程定义部署activiti部署业务流程定义（.bpmn文件）。\n使用activiti提供的api把流程定义内容存储起来，在Activiti执行过程中可以查询定义的内容\nActiviti执行把流程定义内容存储在数据库中\n启动一个流程实例流程实例也叫：ProcessInstance\n启动一个流程实例表示开始一次业务流程的运行。\n在员工请假流程定义部署完成后，如果张三要请假就可以启动一个流程实例，如果李四要请假也启动一个流程实例，两个流程的执行互相不影响。\n用户查询待办任务(Task)因为现在系统的业务流程已经交给activiti管理，通过activiti就可以查询当前流程执行到哪了，当前用户需要办理什么任务了，这些activiti帮我们管理了，而不需要开发人员自己编写在sql语句查询。\n用户办理任务用户查询待办任务后，就可以办理某个任务，如果这个任务办理完成还需要其它用户办理，比如采购单创建后由部门经理审核，这个过程也是由activiti帮我们完成了。\n流程结束当任务办理完成没有下一个任务结点了，这个流程实例就完成了。\n三、Activiti环境3.1 开发环境Jdk1.8或以上版本\nMysql 5及以上的版本\nTomcat8.5\nIDEA\n注意：activiti的流程定义工具插件可以安装在IDEA下，也可以安装在Eclipse工具下\n3.2 Activiti环境我们使用：Activiti7.0.0.Beta1  默认支持spring5\n3.2.1 下载activiti7Activiti下载地址：http://activiti.org/download.html ，Maven的依赖如下：\n &lt;dependencyManagement&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.activiti&lt;/groupId&gt;            &lt;artifactId&gt;activiti-dependencies&lt;/artifactId&gt;            &lt;version&gt;7.0.0.Beta1&lt;/version&gt;            &lt;scope&gt;import&lt;/scope&gt;            &lt;type&gt;pom&lt;/type&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/dependencyManagement&gt;\n\n1)      Database：\nactiviti运行需要有数据库的支持，支持的数据库有：h2, mysql, oracle, postgres, mssql, db2。\n3.2.2 流程设计器IDEA下安装在IDEA的File菜单中找到子菜单”Settings”,后面我们再选择左侧的“plugins”菜单，如下图所示：\n\n此时我们就可以搜索到actiBPM插件，它就是Activiti Designer的IDEA版本，我们点击Install安装。\n安装好后，页面如下：\n\n提示需要重启idea，点击重启。\n重启完成后，再次打开Settings 下的 Plugins（插件列表），点击右侧的Installed（已安装的插件），在列表中看到actiBPM，就说明已经安装成功了，如下图所示：\n\n后面的课程里，我们会使用这个流程设计器进行Activiti的流程设计。\n3.3 Activiti的数据库支持Activiti 在运行时需要数据库的支持，使用25张表，把流程定义节点内容读取到数据库表中，以供后续使用。\n3.3.1 Activiti 支持的数据库activiti  支持的数据库和版本如下：\n\n\n\n数据库类型\n版本\nJDBC连接示例\n说明\n\n\n\nh2\n1.3.168\njdbc:h2:tcp:&#x2F;&#x2F;localhost&#x2F;activiti\n默认配置的数据库\n\n\nmysql\n5.1.21\njdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;activiti?autoReconnect&#x3D;true\n使用 mysql-connector-java 驱动测试\n\n\noracle\n11.2.0.1.0\njdbc:oracle:thin:@localhost:1521:xe\n\n\n\npostgres\n8.1\njdbc:postgresql:&#x2F;&#x2F;localhost:5432&#x2F;activiti\n\n\n\ndb2\nDB2 10.1 using db2jcc4\njdbc:db2:&#x2F;&#x2F;localhost:50000&#x2F;activiti\n\n\n\nmssql\n2008 using sqljdbc4\njdbc:sqlserver:&#x2F;&#x2F;localhost:1433&#x2F;activiti\n\n\n\n3.3.2 在MySQL生成表3.3.2.1 创建数据库创建  mysql  数据库  activiti （名字任意）：\nCREATE DATABASE activiti DEFAULT CHARACTER SET utf8;\n3.3.2.2 使用java代码生成表1） 创建 java 工程使用idea 创建 java 的maven工程，取名：activiti01。\n2） 加入 maven 依赖的坐标（jar 包）首先需要在 java 工程中加入 ProcessEngine 所需要的 jar 包，包括：\n\nactiviti-engine-7.0.0.beta1.jar\n\nactiviti 依赖的 jar 包： mybatis、 alf4j、 log4j 等\n\nactiviti 依赖的 spring 包\n\nmysql数据库驱动\n\n第三方数据连接池 dbcp\n\n单元测试 Junit-4.12.jar\n\n\n我们使用 maven 来实现项目的构建，所以应当导入这些 jar 所对应的坐标到 pom.xml 文件中。\n完整的依赖内容如下：\n&lt;properties&gt;    &lt;slf4j.version&gt;1.6.6&lt;/slf4j.version&gt;    &lt;log4j.version&gt;1.2.12&lt;/log4j.version&gt;    &lt;activiti.version&gt;7.0.0.Beta1&lt;/activiti.version&gt;&lt;/properties&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.activiti&lt;/groupId&gt;        &lt;artifactId&gt;activiti-engine&lt;/artifactId&gt;        &lt;version&gt;$&#123;activiti.version&#125;&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.activiti&lt;/groupId&gt;        &lt;artifactId&gt;activiti-spring&lt;/artifactId&gt;        &lt;version&gt;$&#123;activiti.version&#125;&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- bpmn 模型处理 --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.activiti&lt;/groupId&gt;        &lt;artifactId&gt;activiti-bpmn-model&lt;/artifactId&gt;        &lt;version&gt;$&#123;activiti.version&#125;&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- bpmn 转换 --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.activiti&lt;/groupId&gt;        &lt;artifactId&gt;activiti-bpmn-converter&lt;/artifactId&gt;        &lt;version&gt;$&#123;activiti.version&#125;&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- bpmn json数据转换 --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.activiti&lt;/groupId&gt;        &lt;artifactId&gt;activiti-json-converter&lt;/artifactId&gt;        &lt;version&gt;$&#123;activiti.version&#125;&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- bpmn 布局 --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.activiti&lt;/groupId&gt;        &lt;artifactId&gt;activiti-bpmn-layout&lt;/artifactId&gt;        &lt;version&gt;$&#123;activiti.version&#125;&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- activiti 云支持 --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.activiti.cloud&lt;/groupId&gt;        &lt;artifactId&gt;activiti-cloud-services-api&lt;/artifactId&gt;        &lt;version&gt;$&#123;activiti.version&#125;&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- mysql驱动 --&gt;    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;5.1.40&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- mybatis --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;        &lt;version&gt;3.4.5&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- 链接池 --&gt;    &lt;dependency&gt;        &lt;groupId&gt;commons-dbcp&lt;/groupId&gt;        &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;        &lt;version&gt;1.4&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;4.12&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- log start --&gt;    &lt;dependency&gt;        &lt;groupId&gt;log4j&lt;/groupId&gt;        &lt;artifactId&gt;log4j&lt;/artifactId&gt;        &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;        &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;        &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;        &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;        &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;\n\n3） 添加log4j日志配置我们使用log4j日志包，可以对日志进行配置\n在resources 下创建log4j.properties\n# Set root category priority to INFO and its only appender to CONSOLE.#log4j.rootCategory=INFO, CONSOLE debug info warn error fatallog4j.rootCategory=debug, CONSOLE, LOGFILE# Set the enterprise logger category to FATAL and its only appender to CONSOLE.log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE# CONSOLE is set to be a ConsoleAppender using a PatternLayout.log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppenderlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayoutlog4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r[%15.15t] %-5p %30.30c %x - %m\\n# LOGFILE is set to be a File appender using a PatternLayout.log4j.appender.LOGFILE=org.apache.log4j.FileAppenderlog4j.appender.LOGFILE.File=f:\\act\\activiti.loglog4j.appender.LOGFILE.Append=truelog4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayoutlog4j.appender.LOGFILE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r[%15.15t] %-5p %30.30c %x - %m\\n\n\n4） 添加activiti配置文件我们使用activiti提供的默认方式来创建mysql的表。\n默认方式的要求是在 resources 下创建 activiti.cfg.xml 文件，注意：默认方式目录和文件名不能修改，因为activiti的源码中已经设置，到固定的目录读取固定文件名的文件。\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans                    http://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexhttp://www.springframework.org/schema/context/spring-context.xsdhttp://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;&lt;/beans&gt;\n\n5） 在 activiti.cfg.xml 中进行配置默认方式要在在activiti.cfg.xml中bean的名字叫processEngineConfiguration，名字不可修改\n在这里有2中配置方式：一种是单独配置数据源，一种是不单独配置数据源\n1、直接配置processEngineConfigurationprocessEngineConfiguration 用来创建 ProcessEngine，在创建 ProcessEngine 时会执行数据库的操作。 \n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans                    http://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexhttp://www.springframework.org/schema/context/spring-context.xsdhttp://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;    &lt;!-- 默认id对应的值 为processEngineConfiguration --&gt;    &lt;!-- processEngine Activiti的流程引擎 --&gt;    &lt;bean id=&quot;processEngineConfiguration&quot;          class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;        &lt;property name=&quot;jdbcDriver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;        &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql:///activiti&quot;/&gt;        &lt;property name=&quot;jdbcUsername&quot; value=&quot;root&quot;/&gt;        &lt;property name=&quot;jdbcPassword&quot; value=&quot;123456&quot;/&gt;        &lt;!-- activiti数据库表处理策略 --&gt;        &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot;/&gt;    &lt;/bean&gt;&lt;/beans&gt;\n\n2、配置数据源后，在processEngineConfiguration 引用首先配置数据源\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans                    http://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexhttp://www.springframework.org/schema/context/spring-context.xsdhttp://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;    &lt;!-- 这里可以使用 链接池 dbcp--&gt;    &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql:///activiti&quot; /&gt;        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;        &lt;property name=&quot;password&quot; value=&quot;123456&quot; /&gt;        &lt;property name=&quot;maxActive&quot; value=&quot;3&quot; /&gt;        &lt;property name=&quot;maxIdle&quot; value=&quot;1&quot; /&gt;    &lt;/bean&gt;    &lt;bean id=&quot;processEngineConfiguration&quot;          class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;        &lt;!-- 引用数据源 上面已经设置好了--&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;        &lt;!-- activiti数据库表处理策略 --&gt;        &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot;/&gt;    &lt;/bean&gt;&lt;/beans&gt;\n\n6） java类编写程序生成表创建一个测试类，调用activiti的工具类，生成acitivti需要的数据库表。\n直接使用activiti提供的工具类ProcessEngines，会默认读取classpath下的activiti.cfg.xml文件，读取其中的数据库配置，创建 ProcessEngine，在创建ProcessEngine 时会自动创建表。 \n代码如下：\npackage com.itheima.activiti01.test;import org.activiti.engine.ProcessEngine;import org.activiti.engine.ProcessEngineConfiguration;import org.junit.Test;public class TestDemo &#123;    /**     * 生成 activiti的数据库表     */    @Test    public void testCreateDbTable() &#123;        //使用classpath下的activiti.cfg.xml中的配置创建processEngine\t\tProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\t\tSystem.out.println(processEngine);    &#125;&#125;\n\n说明：1、运行以上程序段即可完成 activiti 表创建，通过改变 activiti.cfg.xml 中databaseSchemaUpdate 参数的值执行不同的数据表处理策略。2 、 上 边 的 方法 getDefaultProcessEngine方法在执行时，从activiti.cfg.xml 中找固定的名称 processEngineConfiguration 。\n在测试程序执行过程中，idea的控制台会输出日志，说明程序正在创建数据表，类似如下,注意红线内容：\n\n执行完成后我们查看数据库， 创建了 25 张表，结果如下： \n\n到这，我们就完成activiti运行需要的数据库和表的创建。\n3.4 表结构介绍3.4.1 表的命名规则和作用看到刚才创建的表，我们发现Activiti 的表都以   ACT_   开头。 \n第二部分是表示表的用途的两个字母标识。 用途也和服务的 API 对应。ACT_RE ：’RE’表示 repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。ACT_RU：’RU’表示 runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Activiti 只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。ACT_HI：’HI’表示 history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。 ACT_GE ： GE 表示 general。 通用数据， 用于不同场景下 \n3.4.2 Activiti数据表介绍\n\n\n表分类\n表名\n解释\n\n\n\n一般数据\n\n\n\n\n\n[ACT_GE_BYTEARRAY]\n通用的流程定义和流程资源\n\n\n\n[ACT_GE_PROPERTY]\n系统相关属性\n\n\n流程历史记录\n\n\n\n\n\n[ACT_HI_ACTINST]\n历史的流程实例\n\n\n\n[ACT_HI_ATTACHMENT]\n历史的流程附件\n\n\n\n[ACT_HI_COMMENT]\n历史的说明性信息\n\n\n\n[ACT_HI_DETAIL]\n历史的流程运行中的细节信息\n\n\n\n[ACT_HI_IDENTITYLINK]\n历史的流程运行过程中用户关系\n\n\n\n[ACT_HI_PROCINST]\n历史的流程实例\n\n\n\n[ACT_HI_TASKINST]\n历史的任务实例\n\n\n\n[ACT_HI_VARINST]\n历史的流程运行中的变量信息\n\n\n流程定义表\n\n\n\n\n\n[ACT_RE_DEPLOYMENT]\n部署单元信息\n\n\n\n[ACT_RE_MODEL]\n模型信息\n\n\n\n[ACT_RE_PROCDEF]\n已部署的流程定义\n\n\n运行实例表\n\n\n\n\n\n[ACT_RU_EVENT_SUBSCR]\n运行时事件\n\n\n\n[ACT_RU_EXECUTION]\n运行时流程执行实例\n\n\n\n[ACT_RU_IDENTITYLINK]\n运行时用户关系信息，存储任务节点与参与者的相关信息\n\n\n\n[ACT_RU_JOB]\n运行时作业\n\n\n\n[ACT_RU_TASK]\n运行时任务\n\n\n\n[ACT_RU_VARIABLE]\n运行时变量表\n\n\n四、Activiti类关系图上面我们完成了Activiti数据库表的生成，java代码中我们调用Activiti的工具类，下面来了解Activiti的类关系\n4.1 类关系图\n在新版本中，我们通过实验可以发现IdentityService，FormService两个Serivce都已经删除了。\n所以后面我们对于这两个Service也不讲解了，但老版本中还是有这两个Service，同学们需要了解一下\n4.2 activiti.cfg.xmlactiviti的引擎配置文件，包括：ProcessEngineConfiguration的定义、数据源定义、事务管理器等，此文件其实就是一个spring配置文件。\n4.3 流程引擎配置类流程引擎的配置类（ProcessEngineConfiguration），通过ProcessEngineConfiguration可以创建工作流引擎ProceccEngine，常用的两种方法如下： \n4.3.1 StandaloneProcessEngineConfiguration使用StandaloneProcessEngineConfigurationActiviti可以单独运行，来创建ProcessEngine，Activiti会自己处理事务。\n 配置文件方式：\n通常在activiti.cfg.xml配置文件中定义一个id为 processEngineConfiguration 的bean.\n方法如下：\n&lt;bean id=&quot;processEngineConfiguration&quot;          class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;        &lt;!--配置数据库相关的信息--&gt;        &lt;!--数据库驱动--&gt;        &lt;property name=&quot;jdbcDriver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;        &lt;!--数据库链接--&gt;        &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql:///activiti&quot;/&gt;        &lt;!--数据库用户名--&gt;        &lt;property name=&quot;jdbcUsername&quot; value=&quot;root&quot;/&gt;        &lt;!--数据库密码--&gt;        &lt;property name=&quot;jdbcPassword&quot; value=&quot;123456&quot;/&gt;        &lt;!--actviti数据库表在生成时的策略  true - 如果数据库中已经存在相应的表，那么直接使用，如果不存在，那么会创建--&gt;        &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot;/&gt;    &lt;/bean&gt;\n\n还可以加入连接池:\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans                    http://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexhttp://www.springframework.org/schema/context/spring-context.xsdhttp://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;    &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql:///activiti&quot;/&gt;        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;        &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;        &lt;property name=&quot;maxActive&quot; value=&quot;3&quot;/&gt;        &lt;property name=&quot;maxIdle&quot; value=&quot;1&quot;/&gt;    &lt;/bean&gt;    &lt;!--在默认方式下 bean的id  固定为 processEngineConfiguration--&gt;    &lt;bean id=&quot;processEngineConfiguration&quot;          class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;        &lt;!--引入上面配置好的 链接池--&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;        &lt;!--actviti数据库表在生成时的策略  true - 如果数据库中已经存在相应的表，那么直接使用，如果不存在，那么会创建--&gt;        &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot;/&gt;    &lt;/bean&gt;&lt;/beans&gt;\n\n\n\n4.3.2 SpringProcessEngineConfiguration通过org.activiti.spring.SpringProcessEngineConfiguration 与Spring整合。 \n创建spring与activiti的整合配置文件：\nactivity-spring.cfg.xml（名称可修改）\n &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd        http://www.springframework.org/schema/context         http://www.springframework.org/schema/context/spring-context-3.1.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd        http://www.springframework.org/schema/tx        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd &quot;&gt;    &lt;!-- 工作流引擎配置bean --&gt;    &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.spring.SpringProcessEngineConfiguration&quot;&gt;       &lt;!-- 数据源 --&gt;       &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;       &lt;!-- 使用spring事务管理器 --&gt;       &lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot; /&gt;       &lt;!-- 数据库策略 --&gt;       &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;drop-create&quot; /&gt;       &lt;!-- activiti的定时任务关闭 --&gt;      &lt;property name=&quot;jobExecutorActivate&quot; value=&quot;false&quot; /&gt;    &lt;/bean&gt;    &lt;!-- 流程引擎 --&gt;    &lt;bean id=&quot;processEngine&quot; class=&quot;org.activiti.spring.ProcessEngineFactoryBean&quot;&gt;       &lt;property name=&quot;processEngineConfiguration&quot; ref=&quot;processEngineConfiguration&quot; /&gt;    &lt;/bean&gt;    &lt;!-- 资源服务service --&gt;    &lt;bean id=&quot;repositoryService&quot; factory-bean=&quot;processEngine&quot;       factory-method=&quot;getRepositoryService&quot; /&gt;    &lt;!-- 流程运行service --&gt;    &lt;bean id=&quot;runtimeService&quot; factory-bean=&quot;processEngine&quot;       factory-method=&quot;getRuntimeService&quot; /&gt;    &lt;!-- 任务管理service --&gt;    &lt;bean id=&quot;taskService&quot; factory-bean=&quot;processEngine&quot;       factory-method=&quot;getTaskService&quot; /&gt;    &lt;!-- 历史管理service --&gt;    &lt;bean id=&quot;historyService&quot; factory-bean=&quot;processEngine&quot; factory-method=&quot;getHistoryService&quot; /&gt;    &lt;!-- 用户管理service --&gt;    &lt;bean id=&quot;identityService&quot; factory-bean=&quot;processEngine&quot; factory-method=&quot;getIdentityService&quot; /&gt;    &lt;!-- 引擎管理service --&gt;    &lt;bean id=&quot;managementService&quot; factory-bean=&quot;processEngine&quot; factory-method=&quot;getManagementService&quot; /&gt;    &lt;!-- 数据源 --&gt;    &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;       &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;       &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/activiti&quot; /&gt;       &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;       &lt;property name=&quot;password&quot; value=&quot;mysql&quot; /&gt;       &lt;property name=&quot;maxActive&quot; value=&quot;3&quot; /&gt;       &lt;property name=&quot;maxIdle&quot; value=&quot;1&quot; /&gt;    &lt;/bean&gt;    &lt;!-- 事务管理器 --&gt;    &lt;bean id=&quot;transactionManager&quot;     class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;       &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;    &lt;/bean&gt;    &lt;!-- 通知 --&gt;    &lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;       &lt;tx:attributes&gt;&lt;/tx:attributes&gt;           &lt;!-- 传播行为 --&gt;           &lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot; /&gt;           &lt;tx:method name=&quot;insert*&quot; propagation=&quot;REQUIRED&quot; /&gt;           &lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot; /&gt;           &lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; /&gt;           &lt;tx:method name=&quot;find*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot; /&gt;           &lt;tx:method name=&quot;get*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot; /&gt;        &lt;/tx:attributes&gt;    &lt;/tx:advice&gt;    &lt;!-- 切面，根据具体项目修改切点配置 --&gt;    &lt;aop:config proxy-target-class=&quot;true&quot;&gt;       &lt;aop:advisor advice-ref=&quot;txAdvice&quot;  pointcut=&quot;execution(* com.itheima.ihrm.service.impl.*.(..))&quot;* /&gt;   &lt;/aop:config&gt;&lt;/beans&gt;\n\n创建processEngineConfigurationProcessEngineConfiguration configuration = ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(&quot;activiti.cfg.xml&quot;)\n\n​    上边的代码要求activiti.cfg.xml中必须有一个processEngineConfiguration的bean\n也可以使用下边的方法，更改bean 的名字：\nProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource, String beanName);\n\n4.4 工作流引擎创建工作流引擎（ProcessEngine），相当于一个门面接口，通过ProcessEngineConfiguration创建processEngine，通过ProcessEngine创建各个service接口。\n4.4.1 默认创建方式将activiti.cfg.xml文件名及路径固定，且activiti.cfg.xml文件中有 processEngineConfiguration的配置， 可以使用如下代码创建processEngine:\n//直接使用工具类 ProcessEngines，使用classpath下的activiti.cfg.xml中的配置创建processEngineProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();System.out.println(processEngine);\n\n4.4.2 一般创建方式//先构建ProcessEngineConfigurationProcessEngineConfiguration configuration = ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(&quot;activiti.cfg.xml&quot;);//通过ProcessEngineConfiguration创建ProcessEngine，此时会创建数据库ProcessEngine processEngine = configuration.buildProcessEngine();\n\n4.5 Servcie服务接口Service是工作流引擎提供用于进行工作流部署、执行、管理的服务接口，我们使用这些接口可以就是操作服务对应的数据表\n4.5.1 Service创建方式通过ProcessEngine创建Service\n方式如下：\n RuntimeService runtimeService = processEngine.getRuntimeService();RepositoryService repositoryService = processEngine.getRepositoryService();TaskService taskService = processEngine.getTaskService();\n\n4.5.2 Service总览\n\n\nservice名称\nservice作用\n\n\n\nRepositoryService\nactiviti的资源管理类\n\n\nRuntimeService\nactiviti的流程运行管理类\n\n\nTaskService\nactiviti的任务管理类\n\n\nHistoryService\nactiviti的历史管理类\n\n\nManagerService\nactiviti的引擎管理类\n\n\n 简单介绍：\nRepositoryService\n是activiti的资源管理类，提供了管理和控制流程发布包和流程定义的操作。使用工作流建模工具设计的业务流程图需要使用此service将流程定义文件的内容部署到计算机。\n除了部署流程定义以外还可以：查询引擎中的发布包和流程定义。\n暂停或激活发布包，对应全部和特定流程定义。 暂停意味着它们不能再执行任何操作了，激活是对应的反向操作。获得多种资源，像是包含在发布包里的文件， 或引擎自动生成的流程图。\n获得流程定义的pojo版本， 可以用来通过java解析流程，而不必通过xml。\nRuntimeServiceActiviti的流程运行管理类。可以从这个服务类中获取很多关于流程执行相关的信息\nTaskServiceActiviti的任务管理类。可以从这个类中获取任务的信息。\nHistoryServiceActiviti的历史管理类，可以查询历史信息，执行流程时，引擎会保存很多数据（根据配置），比如流程实例启动时间，任务的参与者， 完成任务的时间，每个流程实例的执行路径，等等。 这个服务主要通过查询功能来获得这些数据。\nManagementServiceActiviti的引擎管理类，提供了对 Activiti 流程引擎的管理和维护功能，这些功能不在工作流驱动的应用程序中使用，主要用于 Activiti 系统的日常维护。\n五、Activiti入门在本章内容中，我们来创建一个Activiti工作流，并启动这个流程。\n创建Activiti工作流主要包含以下几步：\n1、定义流程，按照BPMN的规范，使用流程定义工具，用流程符号把整个流程描述出来\n2、部署流程，把画好的流程定义文件，加载到数据库中，生成表的数据\n3、启动流程，使用java代码来操作数据库表中的内容\n5.1 流程符号BPMN 2.0是业务流程建模符号2.0的缩写。\n它由Business Process Management Initiative这个非营利协会创建并不断发展。作为一种标识，BPMN 2.0是使用一些符号来明确业务流程设计流程图的一整套符号规范，它能增进业务建模时的沟通效率。\n目前BPMN2.0是最新的版本，它用于在BPM上下文中进行布局和可视化的沟通。\n接下来我们先来了解在流程设计中常见的 符号。\nBPMN2.0的基本符合主要包含：\n事件 Event\n活动 Activity活动是工作或任务的一个通用术语。一个活动可以是一个任务，还可以是一个当前流程的子处理流程； 其次，你还可以为活动指定不同的类型。常见活动如下：\n\n网关 GateWay网关用来处理决策，有几种常用网关需要了解：\n\n排他网关 (x)——只有一条路径会被选择。流程执行到该网关时，按照输出流的顺序逐个计算，当条件的计算结果为true时，继续执行当前网关的输出流；\n​    如果多条线路计算结果都是 true，则会执行第一个值为 true 的线路。如果所有网关计算结果没有true，则引擎会抛出异常。\n​    排他网关需要和条件顺序流结合使用，default 属性指定默认顺序流，当所有的条件不满足时会执行默认顺序流。\n并行网关 (+)——所有路径会被同时选择\n​    拆分 —— 并行执行所有输出顺序流，为每一条顺序流创建一个并行执行线路。\n​    合并 —— 所有从并行网关拆分并执行完成的线路均在此等候，直到所有的线路都执行完成才继续向下执行。\n包容网关 (+)—— 可以同时执行多条线路，也可以在网关上设置条件\n​    拆分 —— 计算每条线路上的表达式，当表达式计算结果为true时，创建一个并行线路并继续执行\n​    合并 —— 所有从并行网关拆分并执行完成的线路均在此等候，直到所有的线路都执行完成才继续向下执行。\n事件网关 (+)—— 专门为中间捕获事件设置的，允许设置多个输出流指向多个不同的中间捕获事件。当流程执行到事件网关后，流程处于等待状态，需要等待抛出事件才能将等待状态转换为活动状态。\n流向 Flow流是连接两个流程节点的连线。常见的流向包含以下几种：\n\n5.2 流程设计器使用Activiti-Designer使用Palette（画板）在idea中安装插件即可使用，画板中包括以下结点：\nConnection—连接\nEvent—事件\nTask—任务\nGateway—网关\nContainer—容器\nBoundary event—边界事件\nIntermediate event- -中间事件\n流程图设计完毕保存生成.bpmn文件\n新建流程(IDEA工具)首先选中存放图形的目录(选择resources下的bpmn目录)，点击菜单：New  -&gt; BpmnFile，如图：\n\n弹出如下图所示框，输入evection 表示 出差审批流程：\n\n起完名字evection后（默认扩展名为bpmn），就可以看到流程设计页面，如图所示：\n\n左侧区域是绘图区，右侧区域是palette画板区域\n鼠标先点击画板的元素即可在左侧绘图\n绘制流程使用滑板来绘制流程，通过从右侧把图标拖拽到左侧的画板，最终效果如下：\n\n指定流程定义Key流程定义key即流程定义的标识，通过properties视图查看流程的key\n\n指定任务负责人在properties视图指定每个任务结点的负责人，如：填写出差申请的负责人为 zhangsan\n\n经理审批负责人为 jerry\n总经理审批负责人为 jack\n财务审批负责人为 rose\n六、流程操作6.1 流程定义概述流程定义是线下按照bpmn2.0标准去描述 业务流程，通常使用idea中的插件对业务流程进行建模。\n使用idea下的designer设计器绘制流程，并会生成两个文件：.bpmn和.png\n.bpmn文件使用activiti-desinger设计业务流程，会生成.bpmn文件，上面我们已经创建好了bpmn文件\nBPMN 2.0根节点是definitions节点。 这个元素中，可以定义多个流程定义（不过我们建议每个文件只包含一个流程定义， 可以简化开发过程中的维护难度）。 注意，definitions元素 最少也要包含xmlns 和 targetNamespace的声明。 targetNamespace可以是任意值，它用来对流程实例进行分类。\n流程定义部分：定义了流程每个结点的描述及结点之间的流程流转。\n流程布局定义：定义流程每个结点在流程图上的位置坐标等信息。\n生成.png图片文件IDEA工具中的操作方式\n1、修改文件后缀为xml首先将evection.bpmn文件改名为evection.xml，如下图：\n\nevection.xml修改前的bpmn文件，效果如下：\n\n2、使用designer设计器打开.xml文件在evection.xml文件上面，点右键并选择Diagrams菜单，再选择Show BPMN2.0 Designer…\n\n3、查看打开的文件打开后，却出现乱码，如图：\n\n4、解决中文乱码1、打开Settings，找到File Encodings，把encoding的选项都选择UTF-8\n\n2、打开IDEA安装路径，找到如下的安装目录\n\n根据自己所安装的版本来决定，我使用的是64位的idea，所以在idea64.exe.vmoptions文件的最后一行追加一条命令： -Dfile.encoding&#x3D;UTF-8 \n如下所示：\n\n一定注意，不要有空格，否则重启IDEA时会打不开，然后 重启IDEA。\n如果以上方法已经做完，还出现乱码，就再修改一个文件，并在文件的末尾添加： -Dfile.encoding&#x3D;UTF-8，然后重启idea，如图：\n\n最后重新在evection.xml文件上面，点右键并选择Diagrams菜单，再选择Show BPMN2.0 Designer…，看到生成图片，如图：\n\n到此，解决乱码问题\n5、导出为图片文件点击Export To File的小图标，打开如下窗口，注意填写文件名及扩展名，选择好保存图片的位置：\n\n然后，我们把png文件拷贝到resources下的bpmn目录，并且把evection.xml改名为evection.bpmn。\n6.2 流程定义部署概述将上面在设计器中定义的流程部署到activiti数据库中，就是流程定义部署。\n通过调用activiti的api将流程定义的bpmn和png两个文件一个一个添加部署到activiti中，也可以将两个文件打成zip包进行部署。\n单个文件部署方式分别将bpmn文件和png图片文件部署。\npackage com.itheima.test;import org.activiti.engine.ProcessEngine;import org.activiti.engine.ProcessEngines;import org.activiti.engine.RepositoryService;import org.activiti.engine.repository.Deployment;import org.junit.Test;public class ActivitiDemo &#123;    /**     * 部署流程定义     */    @Test    public void testDeployment()&#123;//        1、创建ProcessEngine        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//        2、得到RepositoryService实例        RepositoryService repositoryService = processEngine.getRepositoryService();//        3、使用RepositoryService进行部署        Deployment deployment = repositoryService.createDeployment()                .addClasspathResource(&quot;bpmn/evection.bpmn&quot;) // 添加bpmn资源                .addClasspathResource(&quot;bpmn/evection.png&quot;)  // 添加png资源                .name(&quot;出差申请流程&quot;)                .deploy();//        4、输出部署信息        System.out.println(&quot;流程部署id：&quot; + deployment.getId());        System.out.println(&quot;流程部署名称：&quot; + deployment.getName());    &#125;&#125;\n\n执行此操作后activiti会将上边代码中指定的bpm文件和图片文件保存在activiti数据库。\n压缩包部署方式将evection.bpmn和evection.png压缩成zip包。\n@Test\tpublic void deployProcessByZip() &#123;\t\t// 定义zip输入流\t\tInputStream inputStream = this\t\t\t\t.getClass()\t\t\t\t.getClassLoader()\t\t\t\t.getResourceAsStream(\t\t\t\t\t\t&quot;bpmn/evection.zip&quot;);\t\tZipInputStream zipInputStream = new ZipInputStream(inputStream);\t\t// 获取repositoryService\t\tRepositoryService repositoryService = processEngine\t\t\t\t.getRepositoryService();\t\t// 流程部署\t\tDeployment deployment = repositoryService.createDeployment()\t\t\t\t.addZipInputStream(zipInputStream)\t\t\t\t.deploy();\t\tSystem.out.println(&quot;流程部署id：&quot; + deployment.getId());\t\tSystem.out.println(&quot;流程部署名称：&quot; + deployment.getName());\t&#125;\n\n执行此操作后activiti会将上边代码中指定的bpm文件和图片文件保存在activiti数据库。\n操作数据表流程定义部署后操作activiti的3张表如下：\nact_re_deployment     流程定义部署表，每部署一次增加一条记录\nact_re_procdef            流程定义表，部署每个新的流程定义都会在这张表中增加一条记录\nact_ge_bytearray        流程资源表 \n接下来我们来看看，写入了什么数据：\nSELECT * FROM act_re_deployment #流程定义部署表，记录流程部署信息\n\n结果：\n\nSELECT * FROM act_re_procdef #流程定义表，记录流程定义信息\n\n结果：\n注意，KEY 这个字段是用来唯一识别不同流程的关键字\n\nSELECT * FROM act_ge_bytearray #资源表 \n\n结果：\n\n 注意：\nact_re_deployment和act_re_procdef一对多关系，一次部署在流程部署表生成一条记录，但一次部署可以部署多个流程定义，每个流程定义在流程定义表生成一条记录。每一个流程定义在act_ge_bytearray会存在两个资源记录，bpmn和png。\n建议：一次部署一个流程，这样部署表和流程定义表是一对一有关系，方便读取流程部署及流程定义信息。\n6.3 启动流程实例流程定义部署在activiti后就可以通过工作流管理业务流程了，也就是说上边部署的出差申请流程可以使用了。\n针对该流程，启动一个流程表示发起一个新的出差申请单，这就相当于java类与java对象的关系，类定义好后需要new创建一个对象使用，当然可以new多个对象。对于请出差申请流程，张三发起一个出差申请单需要启动一个流程实例，出差申请单发起一个出差单也需要启动一个流程实例。\n代码如下：\n    /**     * 启动流程实例     */    @Test    public void testStartProcess()&#123;//        1、创建ProcessEngine        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//        2、获取RunTimeService        RuntimeService runtimeService = processEngine.getRuntimeService();//        3、根据流程定义Id启动流程        ProcessInstance processInstance = runtimeService                .startProcessInstanceByKey(&quot;myEvection&quot;);//        输出内容        System.out.println(&quot;流程定义id：&quot; + processInstance.getProcessDefinitionId());        System.out.println(&quot;流程实例id：&quot; + processInstance.getId());        System.out.println(&quot;当前活动Id：&quot; + processInstance.getActivityId());    &#125;\n\n输出内容如下：\n\n操作数据表\nact_hi_actinst     流程实例执行历史\nact_hi_identitylink  流程的参与用户历史信息\nact_hi_procinst      流程实例历史信息\nact_hi_taskinst       流程任务历史信息\nact_ru_execution   流程执行信息\nact_ru_identitylink  流程的参与用户信息\nact_ru_task              任务信息\n6.4 任务查询流程启动后，任务的负责人就可以查询自己当前需要处理的任务，查询出来的任务都是该用户的待办任务。\n/**     * 查询当前个人待执行的任务      */    @Test    public void testFindPersonalTaskList() &#123;//        任务负责人        String assignee = &quot;zhangsan&quot;;        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//        创建TaskService        TaskService taskService = processEngine.getTaskService();//        根据流程key 和 任务负责人 查询任务        List&lt;Task&gt; list = taskService.createTaskQuery()                .processDefinitionKey(&quot;myEvection&quot;) //流程Key                .taskAssignee(assignee)//只查询该任务负责人的任务                .list();        for (Task task : list) &#123;            System.out.println(&quot;流程实例id：&quot; + task.getProcessInstanceId());            System.out.println(&quot;任务id：&quot; + task.getId());            System.out.println(&quot;任务负责人：&quot; + task.getAssignee());            System.out.println(&quot;任务名称：&quot; + task.getName());        &#125;    &#125;\n\n输出结果如下：\n流程实例id：2501任务id：2505任务负责人：zhangsan任务名称：创建出差申请\n\n6.5 流程任务处理任务负责人查询待办任务，选择任务进行处理，完成任务。\n// 完成任务    @Test    public void completTask()&#123;//        获取引擎        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//        获取taskService        TaskService taskService = processEngine.getTaskService();//        根据流程key 和 任务的负责人 查询任务//        返回一个任务对象        Task task = taskService.createTaskQuery()                .processDefinitionKey(&quot;myEvection&quot;) //流程Key                .taskAssignee(&quot;zhangsan&quot;)  //要查询的负责人                .singleResult();//        完成任务,参数：任务id        taskService.complete(task.getId());    &#125;\n\n6.6 流程定义信息查询查询流程相关信息，包含流程定义，流程部署，流程定义版本\n    /**     * 查询流程定义     */    @Test    public void queryProcessDefinition()&#123;        //        获取引擎        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//        repositoryService        RepositoryService repositoryService = processEngine.getRepositoryService();//        得到ProcessDefinitionQuery 对象        ProcessDefinitionQuery processDefinitionQuery = repositoryService.createProcessDefinitionQuery();//          查询出当前所有的流程定义//          条件：processDefinitionKey =evection//          orderByProcessDefinitionVersion 按照版本排序//        desc倒叙//        list 返回集合        List&lt;ProcessDefinition&gt; definitionList = processDefinitionQuery.processDefinitionKey(&quot;myEvection&quot;)                .orderByProcessDefinitionVersion()                .desc()                .list();//      输出流程定义信息        for (ProcessDefinition processDefinition : definitionList) &#123;            System.out.println(&quot;流程定义 id=&quot;+processDefinition.getId());            System.out.println(&quot;流程定义 name=&quot;+processDefinition.getName());            System.out.println(&quot;流程定义 key=&quot;+processDefinition.getKey());            System.out.println(&quot;流程定义 Version=&quot;+processDefinition.getVersion());            System.out.println(&quot;流程部署ID =&quot;+processDefinition.getDeploymentId());        &#125;    &#125;\n\n输出结果：\n流程定义id：myEvection:1:4流程定义名称：出差申请单流程定义key：myEvection流程定义版本：1\n\n\n\n6.7 流程删除public void deleteDeployment() &#123;\t\t// 流程部署id\t\tString deploymentId = &quot;1&quot;;\t\t    ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();    // 通过流程引擎获取repositoryService\t\tRepositoryService repositoryService = processEngine\t\t\t\t.getRepositoryService();\t\t//删除流程定义，如果该流程定义已有流程实例启动则删除时出错\t\trepositoryService.deleteDeployment(deploymentId);\t\t//设置true 级联删除流程定义，即使该流程有流程实例启动也可以删除，设置为false非级别删除方式，如果流程\t\t//repositoryService.deleteDeployment(deploymentId, true);\t&#125;\n\n说明：\n\n  使用repositoryService删除流程定义，历史表信息不会被删除\n\n\n  如果该流程定义下没有正在运行的流程，则可以用普通删除。\n\n\n\n如果该流程定义下存在已经运行的流程，使用普通删除报错，可用级联删除方法将流程及相关记录全部删除。\n先删除没有完成流程节点，最后就可以完全删除流程定义信息\n项目开发中级联删除操作一般只开放给超级管理员使用.\n6.8 流程资源下载现在我们的流程资源文件已经上传到数据库了，如果其他用户想要查看这些资源文件，可以从数据库中把资源文件下载到本地。\n解决方案有：\n1、jdbc对blob类型，clob类型数据读取出来，保存到文件目录\n2、使用activiti的api来实现\n使用commons-io.jar 解决IO的操作\n引入commons-io依赖包\n&lt;dependency&gt;    &lt;groupId&gt;commons-io&lt;/groupId&gt;    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;    &lt;version&gt;2.6&lt;/version&gt;&lt;/dependency&gt;\n\n\n\n通过流程定义对象获取流程定义资源，获取bpmn和png\nimport org.apache.commons.io.IOUtils;@Test    public void deleteDeployment()&#123;//        获取引擎        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//        获取repositoryService        RepositoryService repositoryService = processEngine.getRepositoryService();//        根据部署id 删除部署信息,如果想要级联删除，可以添加第二个参数，true        repositoryService.deleteDeployment(&quot;1&quot;);    &#125;    public void  queryBpmnFile() throws IOException &#123;//        1、得到引擎        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//        2、获取repositoryService        RepositoryService repositoryService = processEngine.getRepositoryService();//        3、得到查询器：ProcessDefinitionQuery，设置查询条件,得到想要的流程定义        ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery()                .processDefinitionKey(&quot;myEvection&quot;)                .singleResult();//        4、通过流程定义信息，得到部署ID        String deploymentId = processDefinition.getDeploymentId();//        5、通过repositoryService的方法，实现读取图片信息和bpmn信息//        png图片的流        InputStream pngInput = repositoryService.getResourceAsStream(deploymentId, processDefinition.getDiagramResourceName());//        bpmn文件的流        InputStream bpmnInput = repositoryService.getResourceAsStream(deploymentId, processDefinition.getResourceName());//        6、构造OutputStream流        File file_png = new File(&quot;d:/evectionflow01.png&quot;);        File file_bpmn = new File(&quot;d:/evectionflow01.bpmn&quot;);        FileOutputStream bpmnOut = new FileOutputStream(file_bpmn);        FileOutputStream pngOut = new FileOutputStream(file_png);//        7、输入流，输出流的转换        IOUtils.copy(pngInput,pngOut);        IOUtils.copy(bpmnInput,bpmnOut);//        8、关闭流        pngOut.close();        bpmnOut.close();        pngInput.close();        bpmnInput.close();    &#125;\n\n说明：\n\n  deploymentId为流程部署ID\n\n\n  resource_name为act_ge_bytearray表中NAME_列的值\n\n\n  使用repositoryService的getDeploymentResourceNames方法可以获取指定部署下得所有文件的名称\n\n\n  使用repositoryService的getResourceAsStream方法传入部署ID和资源图片名称可以获取部署下指定名称文件的输入流\n\n\n\n最后的将输入流中的图片资源进行输出。\n6.9 流程历史信息的查看即使流程定义已经删除了，流程执行的历史信息通过前面的分析，依然保存在activiti的act_hi_*相关的表中。所以我们还是可以查询流程执行的历史信息，可以通过HistoryService来查看相关的历史记录。\n    /**     * 查看历史信息     */    @Test    public void findHistoryInfo()&#123;//      获取引擎        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//        获取HistoryService        HistoryService historyService = processEngine.getHistoryService();//        获取 actinst表的查询对象        HistoricActivityInstanceQuery instanceQuery = historyService.createHistoricActivityInstanceQuery();//        查询 actinst表，条件：根据 InstanceId 查询//        instanceQuery.processInstanceId(&quot;2501&quot;);//        查询 actinst表，条件：根据 DefinitionId 查询        instanceQuery.processDefinitionId(&quot;myEvection:1:4&quot;);//        增加排序操作,orderByHistoricActivityInstanceStartTime 根据开始时间排序 asc 升序        instanceQuery.orderByHistoricActivityInstanceStartTime().asc();//        查询所有内容        List&lt;HistoricActivityInstance&gt; activityInstanceList = instanceQuery.list();//        输出        for (HistoricActivityInstance hi : activityInstanceList) &#123;            System.out.println(hi.getActivityId());            System.out.println(hi.getActivityName());            System.out.println(hi.getProcessDefinitionId());            System.out.println(hi.getProcessInstanceId());            System.out.println(&quot;&lt;==========================&gt;&quot;);        &#125;    &#125;\n\n","categories":["技术"],"tags":["工作流","黑马","activiti7"]},{"title":"activiti7在多实例会签时的执行过程变量变化","url":"/2025/07/10/activiti7%E5%9C%A8%E5%A4%9A%E5%AE%9E%E4%BE%8B%E5%B9%B6%E8%A1%8C%E4%BC%9A%E7%AD%BE%E6%97%B6%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%8F%98%E9%87%8F%E5%8F%98%E5%8C%96/","content":"🧬 执行过程中的变量变化细节假设 assigneeList 有 3 个成员：A、B、C，使用并行会签：\n\n启动后，执行树如下：\n Execution（流程根）   └── Execution（multi-instance body）     ├── Execution（子任务 A，assignee=A, loopCounter=0）     ├── Execution（子任务 B，assignee=B, loopCounter=1）     └── Execution（子任务 C，assignee=C, loopCounter=2）\n\n根据我的观察  在act_ru_execution表中体现\t2. 用户 A 完成任务时：\n\n当前 task execution 被销毁\n父 execution（multi-instance body）的：\nnrOfCompletedInstances +&#x3D; 1 → 1\nnrOfActiveInstances -&#x3D; 1 → 2\n判断 completionCondition，是否达标：1&#x2F;3 ≥ 0.7 ❌ 不满足，继续等待其他人\n\n\n   用户 B 完成任务时：\n\n\nnrOfCompletedInstances &#x3D; 2\nnrOfActiveInstances &#x3D; 1\n2&#x2F;3 ≥ 0.7 ❌ 不满足，继续\n\n\n   用户 C 完成任务时：\n\n\nnrOfCompletedInstances &#x3D; 3\n3&#x2F;3 &#x3D; 1.0 ✅ 满足，流程继续到下一个任务\n\n⚠️ 注意事项与隐式副作用\n🧨 内置变量作用域陷阱\n\n这些变量不是全局流程变量，不能通过 getVariable(“nrOfCompletedInstances”) 获得，需要使用：\ndelegateTask.getExecution().getParent().getVariable(&quot;nrOfCompletedInstances&quot;)\n否则你取的是当前 task execution 的局部变量，根本不存在。\n\n✅ 规范做法：通过 getParent() 获取 multi-instance body 的 execution。\n\n\n🧨 不应手动设置 nrOfXXX\n\n这些变量由引擎自动维护，手动设置：\n\n无效（执行过程中会被覆盖）\n易出错（流程行为不再可预测）\n\n❌ 不建议：流程启动参数传入 nrOfInstances；\n\n✅ 规范做法：通过 collection 推断即可。\n\n\n🧨 不要使用局部变量名与全局变量冲突\n\n如果你显式设置了流程变量 nrOfCompletedInstances，那么在某些节点上：\n\ngetVariable() 返回的是流程变量（错误值）\n而 completionCondition 中使用的是局部变量（正确值）\n会产生值不一致现象\n\n\n✅ 规范做法：不自定义任何 nrOfXXX 相关变量。\n\n\n🧨 监听器中获取变量时的上下文混乱\n\n你在 TaskListener 或 ExecutionListener 中获取变量时：\n\n当前 DelegateExecution 是userTask 对应的 execution\nnrOfXXX 变量在其 父级 execution（multi-instance body） 中\n你必须 execution.getParent().getVariable(“nrOfCompletedInstances”)\n\n","categories":["技术"],"tags":["activiti"]},{"title":"Activiti流程变量取值的一个坑","url":"/2025/06/20/Activiti%E5%AE%9E%E8%B7%B5%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E6%B5%81%E7%A8%8B%E5%8F%98%E9%87%8F%E9%94%99%E8%AF%AF/","content":"两句长的很像的代码!Boolean.TRUE.equals(runtimeService.getVariables(task.getProcessInstanceId(), Collections.singleton(&quot;isPreSignPending&quot;)));!Boolean.TRUE.equals(runtimeService.getVariable(task.getProcessInstanceId(), &quot;isPreSignPending&quot;));\n\n\n前者返回的是一个Map，这是一个类型错位比较，这里值永远都是false\n后者返回的是一个Object，这里可以安全的比较逻辑值\n\n","categories":["技术"],"tags":["工作流","后端"]},{"title":"activiti实操的一些理解","url":"/2025/06/19/activiti%E5%AE%9E%E6%93%8D%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/","content":"\n  aaca241cff9841e7a50e18190d28387578eb2483bc56e46256ab8bd7d381ca1e3c5232c798974c82c00142c9076aeffb723d69e75502476cf5b10caccd119763445a4811b5c06b4c9985bc3cc47f877ea819f4db91710429bc670c0e0ce363e2996b0125f08c597689aa6747df3908ffd7014c4ed232f418d427e1c801c35781cc51bcc05e68849fe3f3ff1ebd36ca029fe846cd5d95db5d0d649cf35075748d4df9ec2e097aeb4907b26f471be259bd868bb83ea299ae0a19c34a02e766188d393ed3af18ee3c7cdfed3cf3bce6477342ff46cf6b63cd183b7935c8dd44585a77d76bc5189918f7c71b56b8ba576583ea44cd1ca4cec72adae7b42bf708b25e2c4f92bf37ae7007ed1b36a3afdb67166ff74133cfc46703e229f17967492ad3708521d361e8e73c123f55d9ecda71d0013cbb134b14b96898d9a03556de3a0670099e01e56a23d333bae2b586979ae823c279175636f4b87c43226a2f1ba6c6b2c8d4bdfb4aba338777fd2f9df51506d365f64a9312f98619a17dafbee089cec730580dac9670e0a145ff7ace227cdd56999fb2bab481ec9a77c19adc72bc72f895809730b4a1078d9b46c9c84b4190a898d2cba3c70355462ce67f1c63cae7f7e7d1a6d423ca44fa993035f2b7bffe062913c010be7cffa31aa605c6f0930cbe46fe04ed55b36ee5067f98f7dab3aeea1f5a3d5f2647f3a6d918e0b76de5d34a5e13a614bdf7eeb45eadae8da4fdaeec46f4a1274cfe0d074143c9d6f151004d3cec64b4e62dd54905a863af76970e81b73dfab2434d100f3c6ac592075f4f7982d0268e8d64c69be3e650a78904d55105da043c5c48ff425c8de88360423f19d2a644e5ab609625b5d02607196a2cf102d181e7739c51b237c1d2fa4e81b157cbfc8c59649a6105e520613ffebf25d0e7b0195de8b4d008abbea0de4b0172873e2d14eabe7db3d1925263a3cb6adb9404ce4d9eacff65466feb16fed91707b30bf7496d5348ee9b936cbea52302f0a3e155a7340594bdc191850bad8882d8b24d0d2ffb928fdf5da869b97cf2fef124e95c3aec3adda7a2fe201406ea2df9654737269b5355ee69c3fc38c89f40ed6ba1171cbd99f3fe2be156ce1b31c8c66efcdf871226d14f000a6fd86e9f337a25ba7a2ae9b54ab5b84c4e9e12f77188c3b432ac7446f0762a71d9e3d242bd2f9e23c9d0b3f9491b2e15ddb914c224ad82ffa7126535987a063ba7c3f69dd023d2d50577f67435fd51d6729b9166d7540ef2160ef21d6482c8ce807befaef9c10ff1680026d068431dc5abf622fb20c945b3331bfc1ff84f8468bde0f2c9d35b9441801a4803799dcd392084a39186ac9ae3f19edffd7165d757e883f6ec039d266ff7804fd38c4d60b8ae103d0f034e0d8d40469b0ffb97782335b085f62f73f0edd59e3cab11e9859a0e2eb941dedfba71cdd8eece0be31e81995c9c93181d847b73b6d4e55dc9684e86f59470415221dcfcd40c07bc8b0cac77b2df958da2bd5de32c6fad701f6774580938b19f8ca56883808d69bf4098280b3b82624b305c99bae85780c6938f30976d8a7a741e6339c664a9162e841907285c5d84de7269390609cbf106251ac100f86245c55d32c42e88eb65a4ec865e8ba0ca0f5c9c545296204f23a9261182c3984411faff52bf8ec7d670b83d67ad4a917182e9d3449d6a1c265c9a5e112258ea9effcfa8ae4f4ac2a840212c6ac310f940be1cc3fe82bb27109d48fca22940696accde8323a0d428b2252ed074e8fb89ffd9a5e4d44f35324a14ada261d74acd0692f57fde800ea338de633592417505338c9af4876ec429053ae043f423d7b723fe407f8eaba88d2481b399cbc97ed48fb33d5f432f14e3465ce3a819827e406a115be142309e9f8752c5cf8e675d42addb8c52a6317348b7971df6840d5e63becb35d4e2221d10957996f285e42e840fb5a9253d17f63cb7b7953698a1e3e9f6ffb238309834874f04a57f64355c345e5f81663ad6f4fe18be311fcb3de3c1f79b0c4842454111e4a517099094f8bc06a14fc4f55296366ab4e785a68b4f582c186966a151255b864e5a6244efdd1c4ae30bff44a4dbcaf876d51b30a6a2b24131b81520429a7bdec55299e3f2a85c7f2f3f020f74a9a7e6e44b8ce514655d2c4768c6a582333007e2848c0d23b5066490d7605dada7f44198df1232784638e1f690e5f9304b71d58c5d1a592dcb09a70ee8658c6ce1ce9b12c753034dc0c0b6b1a0456e0014cd4ea35042967e0a0a5d0d6f739fb39822298e61bd410e56d18257471c4d29dc4a82501cf1289b8b552ce000d879d05c6b47d41162816a9426da8819f37e4216de7132f580efa976cb711208a83ee6d2cfcd11ad1a88aafb019d238ead25e9e69d81724a3f5e8daed32aaa7d4b3050e53de0805113d3fd5b32f1a8050bf976cd9106635644c6f78ed3fa160ee2dcab5757ab649c10b22e29a868db1913df9106ac4d4d44cb80bd6618424f5a5f18546499385efcff5f6479d3e2240f784b89d97a60ca7ead5b3b4844e4f3c8358a8394f0f10fb26bcc6b17fc244e241c76695bcf71fed3792ad04227e6123ec601fb78aa3442eb9a9454bbf428cfdf8fb4391ab19c18076079eb6894f33136c1add4e170ce252a46b5c5b5cf96081c6fe57ee718a9d4b84520bb1bb7cac4879f4082945557d655a87503556ba1e24ce49f9e3e115ff2fc07ca01bfd1263d7389db79aa3560d8049ebb020223ba493ef4af8406d434446974a4e5ba9e45b8db01e6130c2e24ebb4b91a8a829ba4dd529afc36bb7c5b95f2dbd32423db958ebb556cdf70b2e9ddabdd90acb5d32e15e24fcf73bc17af391ba043844c8ae41e1b2f7e1d0c0ccddc827d49a8547b3732310bc1c324a4bb54907f3a9f04bed856a70c736b4b3257b958036fdd5e3d7ccccbcc560e141eeb4571ec1b62029d2de9d87ddf95645df4c69fbb3ae0bac1af8c5b2ee7f7c8098669c755076833fd661e30c6d16a8875c10221a5e53e05bfbb761c6ff8d183eeadf6273cdae342013f8bc92c010928fbddec28d97bc44f38100965aeb8115dc8ad90b193467e9ff30d8398021e77c602c353594d58af82d43003e04e4418ffa78a6e81813d84cb8d61dc601bfe97506c2159c28be657cba3743e79fffec84002dc91adb6671b36548f3489a5ad13052a111589294f1659702d39f31de721ce38cd88a67f1d3c48f0f31f7e6823aa9a7bfdbf1c1bf66bed10bb0dadf7e26e4bd0dfa2501d5c434e50b3a91727ae37d29c9192915798938bca2449ea2b216ea421735e5dd1987cf83ba158525dce07cdbeff9de9a04fdd141eae2f076d2a4e5200a80dd45a6e15af10936f1156092341286fa093f5de1d626b7c71ef64286f55acda659e94588892bf729aae984c2a9402b3cce4031f6fdee8fc160dd384c0d79b3b70d11e5afbc48b0930c85d46c37e0515941be6696c1dbb04c67fd82b65043919af50aeb67e3b9d81b575a5b54373c782661a0fc9520b8ac1d93896a60be4db53e9ce9aaf1208591fcc55fd8668ed786a31c87d0959ccf62fa68887879a57dd86b40a888da1342eda8002cdb926ee40c85352adb71ff36007af56e7fae67f9e2635db4ead3359fc1459157a7b4344e0a8cfe02067bd38ae654bbe6696761eb9a6dfd6e055d1196bd3fa29097ee5e672b9a63f15dc8a5b4ca6cde2f04817454211d5e09aaf61025341ad33fd7772073117363c4019a0c0e7273a9a7bcf0c71d219742e1848aad8d157bb5206cfc12fe8d5149ec10bc5aa47fa4919bc9be8b16c64bf980b357759085428a82a10902ed3700e8f355e4dc4d73d1c3b2e39821cd522709c62eb8ac791565b612019c4e6f833b0e4a91bd35f053abd578022710ea788101ee030d9461597e3183a3e7879cfa62edbc37c92e592575a3ef4b50d3c3c1fa469f5d3f03aa2f5bfdb653429c686c67bbb812445d1ba3fe0a48412e90a24c7df57db8ba604cecddcd5d1b1f6c7310176a1ae4ac212436354569749cd4759323b803d865a72d9d7861b83d63e8541511993fce81a0b9aeddce29b18b4f0a6aae3be3c3b5b8aa227ecf234c0535f96c5eb0549fafbc80c7facbbc3c28e3c08f0500206571222aa73d1bb4eca290cbdb3fd10cc6697f0037e78b4fbbdcd2747531d677ee6029159f264931c065e6f45722ab5b224344d696fbe3de7178250cf8078d205fa095b31511c68b5716bd697426f5a9cda41b2f54b264bb3f3772c36f477d69fbe13ff3f2727a7992d9c3c9fd9304d3ba59eaffb651dfbcfe60be074171af597f23547ce38a4868fd3bedbe87bbb79943893785129df7b94e53ce3e2400d8fe4d4fc563ab95d50b9c6a4dd26bd15572c070faef8a63a777f06a210b328a205c7c1c68c4479342c35ed9f543b3d28822a87618134b7a735bc0e69a1f84722a6659dfd1fcfe269053b5921c6dc81071ef893b861fa9f1d6137d0c82e8a4e252e6e33ddf6dce73425febac132f0fe2e67bd94706ec484d1762173b0b07082a5e977e8114fa85a70ce16ea5a8ca22dd78fc5b702b82c8a3b27d185a4d0a699680d2a972a48a698a5b72a64a4595f0c97c1de21abfba383cefde6496afbecd39c655f4d8e48a1c3dc102760219769eb2231e9703eed101dacf55a0dfd6a327f96e4e14f89b7b941287a1b08ba2951dfca97037ce120af4011012a49665ef010a5490a6c657f6d686924d019e249c913af48357cfc5ac5c3d643c316e2e82a9406aea4a1b02b308254f18fe5773ec714d32ef3ded7c8ca20c077e1d39f5665c45afccf9e1c12d28f9e5bc8fc172ac270e6f0ab953cfb90cd1b11766649a07f559f141a071b8033198b6abe8b37e1ba2b90cfd9b7f075df482be3bf35e1656331e0a0e3686d7779d41f274b1a20b06df07cf2ed990b64758ac1da47134ea1ddba970a40851db692920afe65ee057ad2740344c50f1e6801e5ae71c9fb3b5903bb76cd8cfb9fdd92cc4edf68ef0316226a980079427dff1b6567cc892fdb96a4a34e7007ecc98c04df646d83b9ab21d42f868b8be1aff57da6e88c0eaa0cef5532d60f64a273e47d9f88b5af9de3526c90412f0e3e19e34fd2ee43c54aa2227041cf6448276eb99aa2cd62a6667dd1e878010ac6b8930105150f36e12268c7a4914225aaf7393638864d12a5666c5a60cf25416c74d3b74b3ae1777824b615dbd9228b7831847f74399a81d5f1765ea61f06186210207b607cfb5b0f56e30d1a3e35eea61df38a8ec4f6743b7ffeebc42d6afe7205582e9dce7b8a2d505a7887212a68215391b5ed0d708f72ebcf65fc3efe35bfcc660c7e007ac85ebc8a7f0aa1805ebe064154710ba66a4b0c24a9490e7b0323830e604e769d2366122d72a28e78a5af4dc90fca5e26df9aeee92e52d117b5dc04d10edae1aa96d46d303a711c6778b285027ff8e0d6f87bec102aad839aefc45ff865b653dd664c4fa95b726bb65889fea5d2ac7410c45a97591e9e5c4ffed51d41717f9a6aee6e2c2d00aa9be32df7b2ea2cf32af871c7281d4cb5829ec8d402984572385ace07a2391d8ac95dde2e1bf65c99c9414b0642509e60b862bdea115013945b4ead5660421f5308356e08c4bd8104c6f66a387aff9d0c0d80fee0d3b61ff2a78df8c37241f20ba3f2f28162b8d848f61ccedc264a022a296d7ee47ecfeb9e3081e67eb70abf1aa75eb3d26c6c13d295c7f38124484ee079d1cfff0a43c07dc8a363a4da68b5c330bb4127b5327bf6495c92169ff5c5a3bb4af2cdbc6075a36875445438c7e3b9dca6b4cf80bd2fb1d98d7b8f929189b9553cef691183ed7eebefef4f1d94f94e6f3001ee0516b9469aa2baf25efd3ddd93cc0e953c3232d3a93bef7fc6c7c085f7f956928491c79d97b69d6bb7072b5d3a3093a49807103154942e1d9156b1e8d77ac5f52160d5b8e52b0e53b69c553211fc07e0f3ca14be0bf059118b9fea780454424478e79fccea2fd871985be27190be7eb16dc38da194501864a9572ef42dc4f95d9dfa919b55be02facee002b4adfc4a270e9d13633a55863e57e9ff06e593c5bb0e46aafeb670d029fe8d1a9e13b8a0896f7aad957825d9be903b444b3f0b075d01637bfd5bb54c59f93c88d83ef02d51ffc68119d7087dddabb94be1dcfe450311d6702ce622c845fc025df8314db2a4fe5e7fb1a3c65d9c0e7340d608f026d1af06940fb4c2baa2d344efeb6e57286d60faba36bf0f0aaa424d4bc7e448c5b191f78eb48ef4fc2f72b72eb0abbe5f1aa6dcd3865067aaffb17b538cc49577253d7f09b8ac1830207a2600f22d4033b80a5e337c3bb48b72835f9ece2343747351b3af80570992c305725796d1afe993ee29b0e0a6629221575b8e892620ac6f8077a985d25b05c977adc3e55fe6644223771e284a209116ab34d897f7e94ada5304a9303239769bd39415904a73c8dcca3c4210d3530c7356f27aeb1b1be169d5e26a4e91ae8bcac5fa29739654d1a606398536b88985d4aad87c049902dd60634fb7e8cae1ad25229dbbe729fd7465cf84224e25cd6ad151faf6dc12b803713d74403f84b830c936222f73c5359880a27223d06104621c97bd49bcffc7a18d033aed99ac36b4b0b0cad86248f832f12c09fc76aee0806c775730930ba2c88747e7883aef087b6b327f6d1c2a575102bb314346ea7c963e0eeff9388d6b547df4120d0133ab75cf489419ae3eafc0af125f44b371acb9641e1a515111326c4bc96c324b618b7ec16f17f1c242dd71a209cb9dececcfc51e3feadcdc588763158964d9cefb9b0f2ebe9fa17b60f7165c8feff47874001d159dced09f5d83f4757febd9de4a900724c0dd6309af119d3b8073e540507764851fe60da30137ea4868b7f73036025e21e1c089f7b5ac440bcaf5f0aac52d4167b7df95bb64710e8660744f1a9bf670049bdb87f44be8a967d0bc5370c0c8c8299b03cbf9e200d6c1fc37842d9bec11627a528426da08f93163a77d14bab23e5f1e6916fc4accdaa71b1a629b8c76156812b18eec02d1c1ffe4c959b6a55fa1215ebdd2d2f0625d1056778082de889512b7849deb50cbb2ac5f75a05898bb23d4e91ff26e25d51c65b0f6420ee8d6e6eb6f4844737010d2424669e5d8a20190d3abc83e5a0c3a2e26ae72b2a557dd9d3e9b6b7a92def69422ff4887659b1d5034cf20edb944da2e57807c8ba7d41d23cf357bfb879e5005d81576d56e79ddbf13f79c52c5adea1ec212f82ce0e7279208773c01dbf032ce348087180a6b878e26a66f93142fcc1deef760056f54a7875b38973d56a657f99b2d5aab798e8490f7a6e7694c6496142d3ec06189cba79ba986b0707e0135fccf9bf65767f98bf3e56c3ac26fc1e04c5094411d82dd458bbdb0f033ba62072f30842bd87cad5fa8c4ba1992337e181b26191d808f4962301d258a82f8013ccd0a378771acd7f89e8291fc77d8da4bc0655e685473ad514014881df5942d2d4a0fac60719e80682a64c8b56fd8ddb83db2010563cbf73c9053978954229823ee0dccda638d599b426339fcfaa7007488c1d241e4ed6e9843779e9b3063b499783bfe806e60a373bec2841fd441081b49b9173aa9289dccc65e071ca1af48fa428ce61c86d7df301bb1e42a1849892ac1bbeebb44f6968b11cdc60f33a4ec518b26de218d823c4218f9f10ff915fa14e075aef3e71cfb472bb134c08901c30d3dd6516c39e3caf3258f6202f0fcc9f0ff3a0a9a0481ff05e2691415fe630beddc1fbb3986365d6d72fcd8b8ba3d02302c6a83586d047a2c964960226179eca0c314354aa4975ad85bfc37fb830ea47455378880e360cf2cb330a2981dbedf0616cbe4e5740d33f918bb125fbfef701f9b3766c333265b7db80227a68646bc00bf0a6aa41ed65efee457a5d9695b1d582c1f68a238a8abd806a697e990415c7eaba8006539795777a99c9f21c490f47a480ceebaffcc62ff5313d773854d4f5957267083c0735da7ec75a68404228dae50b20543363ee5dc7600839b2e522593945a0634c752d43f99709d582f6cc8b18a1e2af8b2ee0df2a0245d12488089b71ae24053f988761018257e0d1a72b65779ffc3a012327bd8789fa2f46e7dab1e00337153e4db3f4e6fcc0bc4d2d81856400d434c86e01530272f3fcaf933691b7a03ac8b454b55d8f0c69e320aa2cce18a27cfb3bc124d6a50b98473f39af90ce9d5a77233cc01199669905b29af2570db93943b89a81623ee2771801fd698c3178f8b9ad647c699cacde1fc09cbe2b0dd45ed619d976821082f73d130a55606c4386d218e807cc3907a5d2d39d69ed49dd90ebbf3d60c4089439f64ec00de432c5433561b2b48a06fe40cd864b8aaeaecfcef956be093390222270402508a36315d4809f2bbc106d4a49a234965486499c03a826286feaae3aa85c3def5c4f3f1c32332eeb07cc4047a13cb195e53b456a1075e9e8c552e35cb02b49a8ed93e48a071ea71a6d3062163dbdad712edf856ef3d8affd6253b8ab01bb41b86528a8b9eb0b11a7e711b28b0781d862d9caafecdb1d41dab108ea79461b9b2f321d1fcf065b6d9abcf74126d49da8facbe9a750f94b1e9e194f36c4689500bf2fa24382d33d7ac7b93fd42edd4b5db141969cd7b5b13212ada21e03cdea1fd9f096885fa8c7b0f3379c41f2def2ca136aa8b4dd22d13487aadf383d1a94c0946512d0b468e12de8576c75fad7164f0ea565d84f6128df8d95ed6f8df2dbf7be85e4bb4effa94c216f027f3cb929c5c5015ed40ba9ecefb533c43961e1f5dacc987964d3b6bffc24aaa187b620f3bf539687724f135094d5ade33369c84be9ae0c3bd799f8102b81631128be4363ea64d4572527f628e05c1835ff9aefe1eaee9a52b435c27b0d7a7fa3e65b3ce33e4d914cd1de8d0adbfe6608000338366a106485ba9114284314f4331b53aeed3a44c82ad9a0e6127fc720accc83d2616403205d449c869505e8faa9f5c9f90f2560d98dadcb0ede0ee94fa971a2605486c04412769522c510c354622f988ef9b9a852d849aeb7fad0e03ee4dcd119bee51559a38dfffc4686d8aab58148e5ad1c1fa0e4407961292b90c144b08e66d417bb5fb59bee2b642f76c480fba61b0c286df003ef76523e9b11991857c3018518a02f6198dec8e8ac18dc87c44e1549c607d6071697ee8b69741b07ff1d3f41e6cc9025198671278a0d8cc5efbf6e0f8c7ed77c75878c21360e1cad39239b813b03caad84d33b1e2763894bce4ad095f8184f17b3bc87ff816664b718a363d464eb682d593358c99f6a610501d81f600898b394fc10ab8d45f5f1adaaa0f8cc5e6da118b46a5bfb3dec1edf919041a15bb1c7199abb530b7a52d48af8a6f1b9f72a7432f9210111f26811c376e96a5f33ffd155d45e18a4b13a00a92f175008b3bfdd000830caa6751de677ee0a26e2185dd65cb16938cc0e4dda480b343ca80de047bbde1eda7dbe260e5c173f603e19488eaeddc68a04fb7b17a157aea753aeee727c6c3dbf266cea2ea47e19ce93fc26a46e378c5c8f12e686b53b7bc248e56b2136caee74339cda119f34d8debc40053ea32c55996aec187f916e3585c4397f5746ddfa592489ab53a3d99d2de238760e17feaf3c7627b9409b49982aa5773ea226afb75c544f80a3d13dbc3dc4afe82e409360989b1a1e289d02f436672d46d0d4e6759b479826b347851a931aee3a9a130c18a19a107d952e88514e746880a796df3777f534bd9c0f75f824b5ead9a605fc5c64ca0fe4e2ddfca35ff2397257d48706c01c79fcdfcc2b658534090c90c2aca60e18ba45b014887a3ad2035860f42c1937c5f7df152ecd192b3f83dc72ae76b3aa490634d39191dae2c2d88b3425423d516f15cdf1dd17bfd36ac1f33e3c451434061980e83701e277c9dd63995ee74be6e4f471228d7fcf8c71d80de261ec81d7d6d887226da4b80d3a1bfdb723f1546750f9944dc0a032284ddcfd51a40125bc3195104455be08727bd329f26dd1d5980d8cf1f7b278b02dfca38147379d8d925a4379cd154460d30c4d59195043ce8da79384bcf03b85486bfe05b26fe29be58d466e3d4e9519bd9312997663ea655adc7b427a1ef49690cd30e4753bc82555fea046cf0b1fa05bfde686b3b447d1e7997cc0410077fb22c2513d2cd9428d75e01380f1832dd150e825d01b410228a3174ceba0e92f262febf182221234e5c116bd2116d39effde17834c95ead285b79338356409171e4c665ce023a22dd5e74214f529af86e977c6d0b234320d9f16e2f1b18bf0cb199427ed3ae86543a0c5b2e37b302716a1d6b4d736820c168d4ae5e721e260e10d8b6a21a334164437e7f404536fba093e268dc4f33fba83491d40b557f5bcacc54826c7ed540bafcd72e86e6f4397a5b667b9dda50ba9c5892a966986194852a0f70be2108b7da152ce17d54f4f9a021fa4caf68431daccdc2cf3775b4a378fdbaf3acaa3a6b7c8f73f30990a7bcdf8d1a72e3c6ee60d0424adc602d49740ee92bb0aa1a0bc34b6731446c584b1b82e26f16abbf74d27568e419fc5364940696baba2273ce645c894d2dab9132829ac7e300b893c5bd7ef154247b4d0af823708607cb70117d924dff3ef34619331e4cd9991159f17caf8a45dfebab1d0708e556d3ba47db53e0a9e1df074a4fd866c24ed6f79e452240a4502f68a119451737fb193666e1f0f20fa06f517085db98fd05980c79ddffc7a1ca73860fb17ea4d77e03dcd30808e4fa88223ee2375e121d636581a956478abb81c768d5fb21832f5b1d4b55bf9312b34d66984918838e9140af863cc777a3c8eb38912df750d01595343341fd34ccfd6c786cbb8cfa0359198aa5c8dceea350b4f35a8137fa2a0f3305e08730a0f8e97ae5662dfb959b05d8b8899dc412f69c07ebd29804f00072b48be5328d33946580d78561916606ec2e221cf5649e7866051c465c760f02fc84aba4e9ee258deb65f5a9bfb0ea6436c124b52799fbd3275400ce1865879937eb6b35049be908c5b3492e0c0225d9be95b900229a2fd3cdaeac2dd261eb25d1f33252369c0cbd1148dc478651f7dd8d112d238f465f3e73eb287a441d84d9a522ede42585107c6caeb84c796405cb42f6a09cdf7dc0f64f505eb4972c92b9f9e70725f3a12137a7ddd7a3543b1418209b3b0b464e12b9d3bb0d3650489007080e1f27a863f783a4b3e6acbb2f9fd546f47fb0793afe8ee1133c0b9ae9eafb0cd2e66cc0d93654b2943b7bbba6c4983f7f75ef65ee4579d66bbd8b0d66fca7c173edcb4059215fa584f8395ac65e586c0b24993725f1e24218c5c60f5f2925e4c45ebcf034c6f33df539fc0bcbc6f98a7abd6215c5d02a3fbd21a22772d8cba4dd5984d5952b86df0cce70120ead781e154c7f930df38dad89e574c38b616c9d1f133ce9f04d5e14998b7cc36610d7cdf022f8824c65552b077d4a0363849ff3dbc0d38b5e42bcdaf8c45fb9d2942c6790810991a9432f09cf19e4d98b57a4a5cadda3eba03a1a7ba0f4622649be0131371eb507d11580af7e090050dc88dcbbc17a691767794ac98bdb01a5d69751eeb5442afcaca815aa257104ce95a9382c873237bd12c02cb4835a5385fcb27876d3d51369a16cec05670544ad2daad1d04e37cd65371fc843b7472ba30aa8ab7368f7a84e7e8a974e7dccb7ab310e60914f66e7570b419dfb118170a9f592f7a5b5943fb26088fb0dd9f15472bb7f0a898441bedf9e18fdc9024e95964d0e91a45a0a7fa3446a16382857f7e937681366bbdc874a7ae68fc1fccac824d950c353d4688d6e353a7cc0e5f2124933b112c9e8461e1b69e412eb121f5dbb223466aac8431bea76399883f4809218b34586d53a696639a066f48ef719d414521e3d11a2721237bdbdbe861566432ffdf0ce6321175ea593840edb9de5280437609d7f496a76681ad4945f4a6d755cbb2be0df4ae8ab2319404134bcfbd3c8e70795922432795e6803967ebe28b7d60c3edb12425674d22cc9621880bc06989b0ba7a13e0998758b88942514881e75d98d16c770cabc828bdf8a0e5f05fc1cc1409ece5c74e90fbc197211854ccc303cb5d99e1372d4fa5000a78ac87cbc0dc4371feec5585df99e7ff9fce23e768798500fffe0966760cc87c7a80102a796b52359cb362ff7ff18cca138815c3ecd6c394c4f247aad3361335adfcce71671c061835d6b1434a35caf1ef3e2d9347e522299e24985c593ef5091bed0da7655503e8482a15b2d079f7ccf00000ccb41916bb23f3cace71fd8d13392fca24248607230fea1b39fa654415f5e77ab0d3bb8a0210bc8a85326a1c4bebe0016c10b289385a0af62f328017077bf097e13137919b7435be5d16c7c4e329c8d96290a18876255dab78b5eb75d278dd707c281523481c7d417f06ecdf642746c9bf0809143c63daa0bd567f9221a97cdd7f70dc239304c5dabb67ae715c1a4672972b388d319025ad9adb237143b2f5ad3474f12bf7291337a082648ca211aa33347c9ec182b0d3e7c10e4d14aa5c48922572388e21b253fffaa835234bda660705c02af46a98288c130e17efdb5515a07aaf689839b39ad7feb589e4ec5c2dfc058d3d29dd10ed234d07113ade584723af3e91510532bf5395a78cd47b761e5fc6e2370db82419d83318d38f2c9baf03146ecfc85f507355b713b35faf63782ed65cbd772e769dc2c9ea5fcf4aa7651f43582f873850dba58d358a35e321821c3cb0d0c6f06d5612ba281f40036994039ff7d98ab01b1ef2b7093ea77b1590c6a5f671f82c602b229b45edc9a19275414c26e01748cd11637abcb2434b2a8997739afc092a564ef06d3e29725540eacc6a9b3e56e46ef736258f682999e3a3a433e84150a67b5929b53990c0e16e2e3677675a189b3f6728c79b4db66aa3bd4d663cbca02ee35e3bbe3b86b762ad29dd8a8200b899edfdab38c5a94c2ec6789b938fdbe4344e0c2db446e65c106cd3bdae73720b760ea783c99c81d5d824792a2943872263f51b97df3b1896bcaaa7fdac52510931d62e52ae1879aaf9374ae6d0312b780e3fc7d1c65c1ba653321281907e1b6669ac3459fd9760efa9ff687f509587078a7ff1d485b983d4c5c0264d555d05dc772eac74cf3d0c6c7bc4c0d725b57ce041cbe8ee031500e11476ff85eb4ed62a29b6ef55fb33a6b3b4d5d9d6bb066de79b9230df57b2beb9aafcbb960f87c401981545c70541c453af433b18df3303f79e1617b5e2fa3e88ebc3d3ddd8fcf91a5c1536ff0a03f8cfeefd8884b82f410fa714114e83a88294392bc4b8d9279bf8b2a795acabcd27e9e7d7270eabded351de2fcf32b17fd06b33385848b68ae4b6b3971fd46e8bf66453f45301685bf8640e6b4c7ccf421286fab5ae5e42696ee52e0f7c05fafe2373afc599aac837c2b7069e0828a8b438bd904a39ed806bc4b6bc58353459e941d9843515ea2017388bae5f199dbfc565ffee5e9c5e9fd4f61b91cf019c3d411763468439ff574c7f66d88c748a5055df329da6b59e1ac871314d13d4647aec63d731f94a1b44e89a3938a714109c8ccb35733e6e47f8d88001297627f206527c560b5cb9babe88f70d5a0a5cb6c27305384e32261115085ce3d254bf8fe23c2037680f8a1fa64e01aa7165eef889cccb18cf225514e3b406135f5db4bbc8d3162b13774dbaacff1a8d235f6a6b2de3ed35c1077cbe16127530325319a50b9330e07a437e17cbfee0058b81ae9285d957d332bee36143a1f0dfcb711ab9bdafdc2e3bd4d690f3cd8dc28ac3308d27ffa0d6946b7a06987b610c866a1bc86b843ee4833b6ae7c2cfc9d6695ff9d68e54df2ef2223862d5b272c77a6c53872dc4e1f08d8a508413cedc7e0ab54aae1951b9a30fc70701be02d590c94518a750c383c1803ffd1e54cc2b2948b179ffaf8ebe3198a736393482bcc21dedab185c5d982be2cbc30ce1daf5a74b7ecf608b20330c2256847aa743c8469273e403c9fda0dbf0c595d9c1d31e13d9448943cba3a958016d501736ddd8432663e9f3c17e0ea67271383fdd3aa1e57536684ff4d40dfb20bc9e810fd170049f5b191f7099ea012531d246f8f3d0a727c80815fdaf4ad36848410ba6d06f8c2e9bc36f94ea279b81bf03f06a49b02c81d1a20ea772a60e8d70befb0da6ac2c8cb9446403c627a0c19307c292645f438729e7e950090bd65fe1e6f551bbb618ce94d3b84649204771345232afed143c0db3baeab4372bac42b772fe0ba8acba6d78d69edb3937da0b03d93312be6b8090d6a5be74bfeef8fbde7601a52bb0232d0934496f6127b708bc3aa2069a72cccad70838c331cc7f7dd398bf93f15284139c3fd09c12dc046ba943c81535788398b78423b41dc21287f61d35dda8acc3c35cb739d060d48c57f39edf1cebce88af5ce5e0ad363531dbc7ef0a83275f9fd6c5996630f608d0e16ce9d9d12cd2b08e72bc9596fbfe0d7c643ea229285e2a935956c8f253fcc6aad7f41950131d8646b43a1aa4ff468f7fd3104f7c422737d10b647d040054a7512de2121cbc8e29743ea10a1816f805cb0ea4a5a68977b753e5f10aced87077563f20a7f225ffb9bf0203b21581dc0c5b98d61f72007848c3fd48a4d886f644289e768ca5342d31607112ae1be284a5c4c3cd6b46adb2b3bc121f8662822e6d170d0fd17bd2703b71e8fdc54ad62c4778f7c96a8484d39cd921785b7eb2730021143f388746879f4f433cc8234e2cd5ae80f9fe3c8a21aa8913ac7598711814fce1013f2c0098d06a554bcd9dc68eeea620e40b1d28aa194808af5f12054f5203b9bf0853d8267972d5069f78704fef937ba3d8a97b0723d0b81091237b3fb879ed5e274f7ed1c143b5df601212dd944025c0cb84fcba44b11ea3951e94ac5e10918d56f13ed93089677406f7827b60d117eb1ec002d8bb1767e802d52d738c00e7eeb10856422b7d2d41aa8ce99c6536d26ec9613b83eb5f3685c46edc0ff7c403cc27716306a5f2b00b3b6459d2e0872c99d255d2f527f511620cf1e85bf8a2257edf037bf3a8d0851146a202a15870e8b14cdf1e56dd3cf587169ecdb8ccd096daaade8f9ecebf69e622200690f18ea02f1fddce13ebabd647c6526fca9347d24300b106bbd179c35eaff843a8aad7d53bcf993ea3cb10d0d28f7f6fee9e66b50d0466d1eac6b88ba444ba8fb785463ccef65391b21cd7dbeb81c5d7daa7213bff0b2a3694661418ae7baee1092837b9c367434d923dfdf0bcb55489b8b2bdd137dad3d1907218bde719f41072a3caf9fab06a16f7853a954ac6ca627e455476014c54958a195a1889979fcfcd17a42452a5e6941a5e9ce3ad47be8837964544af8c2f7100150fb4278592d92a686305d312e80f9a7d4d82035e45e41fb502c849f9375e1e1070d044f84076e10a10c247821d45d91fbf63fa3b34e5143f7781e0f449f1541db59ad8bfd19fa40a4a1ca9d56fc216375dfb77e9b34bbffe2350c733e39b1311629c2f2d57c91369bb29e63f35895dcb8dbafa01485a78cf17ee547c38661e8a2c2a8504ac0f608935e8a424b01b778c69a1ae01a6e926cce726abc2e06e313363b53cdf2e1499ebddbf05766379ebc97cef69cba9a4cf37ead51fec593873e751ce4ce597ab81cc2b9c54270ece3ac9b924eb4cbdfb061b07c2ec4df2a020026357926a29111a300408efa33c13625ca3960c3af98f6c6c82565629f17946bad28723f38249d1e8adbb9aa44d2f69b43336f1a8f47a30f036143c503b0cc80c9161791a4e06395bef12b03e21df034569808382c0bf9b71522b89db6fd76565e19e99d3167e486249dde4798877e47c46ad64a7d69abc71687ea1d48fe85e7a0bf8238ceb9cfd85e3c0f819244821fd1f515eb21ba8d33f361882ae5f912bfecd59b6ec770357b9299640a0fe0e66ed5798b84722c51b142ab2b896a43dfc23569b3bfc3fd6cf2abeef96a0f6a408200d3c39d37dcbef48f83f416c3a698c56ac2febada4c900e2039cafc22d30ad8aad1c52261e57be2cb601dcf17dcef6063d658b03648076b7d0cf91080fb1362845f6c2090a307560bd6a0597fb8b7bf745f758c4cd629f53b44b79db981e2e332401c75afc8e25d4f66ccf8e8859d50d28685c26de618b6ae7f931cb5f481e07bad42b32702217bffd0b3bdfa4f879da93fb73745a2567a3b0f46aadb48edb45aa846f28a9b5f869f2aa29de4dd7771f7d8c8f53c8536cba1a92943a2974053607dbeccc27cc7a4260ee64870c90e3f11c271da6d9224e0ef55fefe912f716207e1939b5a3abc21bbfba92bc3f11315a31cbd025100bf9c4c0e24a934b219d09cfd89ef068a94222b7c0961e192efc0c5c03d0bceffd88e8be256f8c7d70e19ce932c1bb84c2692100e36fe410ffffa76155eaef7e6f143293ecfa16200cbc4805de120356cf17290b3508fbb7740ffe12c49ebea3c053a643004e671fdce6d16237d93f340838daf188cea94d24c8ba629cce83ab6027112e5b7ceab5a3c9ccc6fcc70233c78b0b3554e9b6506d5b04f1043f94b25fa21c1ebd0b4241373c1d31684ba8a6c83f3948a931d37e8d1dcdc15c749b40ea37332b2d3d7649b25f38be90f5bf4689cff7665c9b879ae8d49a1c0564f45f7a02be4de2093f6dbc8096b03ce35a9cc5829dbe21c66c439d7bd212b13948cabf37fb16ef8cb79264967cb285b5304f16662d08398459fe2d73047aec9e5fa8c3bc6906d474103a1b87c11f7867875a5198bdacccccc333da8c43962a0d3b4e0cdf1c43d9f885b063bd09f81b405a2927702800c50a87fed0f6c9e19e319db837cde9fc320196f75afc44f3e19cec8da62887cfa423037e4749a5d10adb2b1829dc795da1332b19590c748ce818640b3ca3f395ab14deb2b549411135a77a324caf3ce0104f301d4afaae3fd29146dafc920b11950c4b856605749565c3b0cb2b63f1b8231587ec22d915f2d6aa77bf68c0ed616f8f03cde377fdcf05d046ed5687ea97f542d5383c2efa035c4635a0283b748c14e31957658ed4e1b77f21e0a822dcff659317bbbc11177b32e0f55b62df03699f523e2097fc2bafced5789295050a5786897639ee090be8767e3dccc0fc08ffbf9b8319d7bbe105b549a7c62b8fbacf7580134d6cb9025a3cd2300361f00f48393ba859e5e82817e04992adf8d8c1e700a9375dcd7423a35370cd41f1a01275d097da43ff2f5ed10a2ee240350e6a76818466fe7adb43d2c1a679b3cf525da05eda765f928049f91c92026e85134d7f4226089cd415ea5ddc49d92e42000adfdd0f925409a1836e7f3b9fb928d471e0c8f639e38c4d4c6209ca7ab6a0ce61bf5207e446a91b9784f605df9f8b41e47b606d074455e5d24f2cd3016c24c821bab9456ee3de5badbf5f4b74a7a01de38d868cd7f31d1e402bb43de12387f9928cd51d7b570abe40f236d36616da9bceee3ff1133001924d13712a6b9b4aac4ab7196e712e4d42a724945b6fe90c933504e760973cd341192375bbf82cf019ce985d705d82deb1d98dc24f0ffbd271c34a034f53e7d17a2eff7b37dc2ce2ab650df8a0cd0f9c4b09fd272b9ca73adc77fa0fffc61a7fc4b29f189818850def83b06b23742b53cd42e61f2a5ebda86fd5eb905cc11ffc4f2b9ffee303016fc8ae565b1a4db54b1eca23fcc63dc3327a4990aa1912cfaeefd0a21d18ea7cec91ab2590d980f61d3e9070ecfb5715e1766598631f6287b5a9351b95194fbc4d8fa0fef5a50df2bb37f17f8489423b2925d8f564463b171134ccdb774e453fa24332285c0c8ac2b06a34523bc6f06a743c4e55669fc91ed5e494117567b66720f8b9e12b0ecc6bee35c57b6e16c121438dd2a36aa2664be4de0b91bac91003505542af2be8b78d820f6b60e85ff5cfab247f3892938b6afdd474bacafce44e18999a7b225456a8dfe02fd90abe7f5724ae8d4a5fa9c3db84f45dadbe64985a672f325ad92df15a3c8e17879f2ac588aa139898f20d76080cca1b3ba1dda5dc2558d29a1cae78940d8cc9ffe169da91ccbda0175357bc8a4e89dff4adcec004b093460fa91dfac7071bce5409ee8dcf1e13363900c4e86f716d83e0d6e9c76bea336f0461a213c1b55885568abd0ee2f01e757aa0dc602a11202c97bb8341dc428b3490aa8120c1e028272873ecd13a8fd5ba3938befdd80dc44e96ef122c248d9325980f0030386d2f377d8a13c832cc25c460d29f65f9e71f85781b75dfaf55900833648a4c4c2a4a1541a3b997a206f725df00f7cf9ff0b82c12d3b342c65304e7a13a99b74ed4951a81fda0fe401496d005f2a97405faec2e08cc979f8eb373832b196edd286ceafba3737a1b7fabcea320f5ff68078526a94ad6395b638867ed929e51d42cdb9cbce26c00eb072fbbd405f5fc182fa246eff342db7e7ea0f19c3e45278219118fda17018bc194b8943a4c2c80eff497792a767d7275476bbdb0c2b16c0a7af79f53c0c40e48f36b39fa6bc7f15c53dfefe5a954dd1a85df86772e2bfeb28bc4179f3aecd4b355f4c8b212ab254e2b44ed41875c166f99aad202729bc159c236bfe1656812303994874bd68408094ba9c2b1e7d10c33d203d5dd909b74306c42636a06c52fb780b6e0e9d9bb74dc27d8ea98ac1f156b77ba29dcdd334408e88fbcc2cd28d1070ec8a39932a19b20994888380db46026ac81b9fc8bb196259f0d16b08d15fb54a90fc82ac03919c6f9606ec3fcb4a433e6d76d84daa9baa163ba9d0fd0dfc0d35de4fe4f990c8fb9d3bd51e6fd41a7bc6ec264a0f4fa77fdcf52d46916b5693231d64324154ae1d8dd952a056fecb7ce9fa16a82a525b649ff01b26cd72f7909d0e3f9193c0fdaf3c47ef2ed1d7af5a6731348dd1ee2f236d9d9e4d896d8710d1c9524a3e46c8d9c821c6cf6aa7357087df45848103e8cd197a6bf30f2d308e3a01a56c12cf8443615fb1c8411314456861b6a220e8ad5403ec8e23d6f18c7c905319d2ba704451dcd89e4dee8ce7c2f1d1de0e36c6fc156a27786b736c3520d135d1f7e91feec7da54c620414ef68d8bec680f45aa563bb1b6c2f47fb167df22a8a937b3cd4646f1a55c17db852fd85f06bd766ec1041c81833efd6dc8d301025fa2ae0ea2d3f0f06ed44f88648125ccf5803c024e5186dc9a6ff15f2f5d1750397ed7072609e87877b4934b1e50ea8f179626a2996f00ff5f1438a49e1c4a6f11ab2e687b7f0a3ceef06d40d7a745819f8a70d703235decaf5fde21f81a95ad9aa18b03b764eb7d232de32890d093730a3c64656c34e9385183cda83a4a4969381d7c07015a5c2b1e3b83e0cb0fc7b896d0fe7cbb9aea7ce366c5a8c0fa6739787914a4f9b6299653194a7a72e11bb491e84afa0bc98921e9bbab3ea765ddc05cd8a42b690d841aa70934a3af9b8678dbd9d1d0f7fa5641ebffe6fcf2be5874a539f54852d169c7cc0642e0b320321ef0db4ed2e6bd9f0d7d67e1db2b722560590199f3be37922788ba6b5c7d0e8030f90f22c7ce8abaeff79a333a7a3b84c0a25f9ac109b9b3ea54b773cc7c9ecd110f57e066fe05fe057c6a7169dc00da8383ae2bef926c56e734a87c0f68d683ebf0e3779cc4485a963aef3e816c313408f3ccfdfe566e0364412218a3b6cded34bcf8823939d587478fda71f68473a9a2033ca3cb32aafb411b50a1f0f4ef32518087a7749fbb10444775be79c3a64315930cf497c3dbfa7e14847a4ec2bc9e8f544f835ce88ed3eefcee09e7974f2842a5ea0c4b588c3b3a65394d061522d0b4d35ac374e6f9386aa99c15debb06b5fef76dac79a43c7f825c153af07507817e0c2fd808d2c912dd11bf35fc4eb714567e921d7766fec0e8338c260bc8c02f718d1af051d0ee5699dfcf41fa1d68057b0b858dd0d446ceb1bf18a2a2b6066d7f58c0732f98e86dca9069db6f3afc82748f2d07201eef7d96396c17688fa0d7468d5f5d45a612214df5fff31c500861be4e70e7a00b00eefa3e2d69f9fa2f81c7aa48ed968e756549f62b67c9013575e3fdb3a979e216ceb2747fa2ae22bef3c2dbd3fcbb60659a182326b1b088a9a6a43f632cf852447b60b512860fbd597540c561d9c9cd6c8d2ea874cacdef2ab00dfd5b6421e3cf37771946ae879c5984b5ffc29594f438f9accdffbdb6d6a8f33047187e64ba367209135dc833597ccd3662c8a62b31c10702224cf6678852aa6bb672d9be512848402de46c6367988174e46d3024566056b4e4de3a8eecd7102a3e67b6f486da7db7d8125630eb8d860617652c7060934f640d42138a6a671fd53e3b3b8d9cc2442e8b7c55e84ccb99a790cb2e3ed9b64f135bf6a73795990442300723fe94645225ac467a43a95bf6521dce5ffc2c64ef7e3aa5b0f69b637d982d4b731a81da3d025db1a161603f8d6fb94023e07ab30c147d7e68cd0ba0e3974555e47ef04de058653eb0cf9d00476e19540bc44ee72dae6a99fa8a17b63f8015adab8531f92c554aa99117c7bc3e1c05f26819b692ef4b6ef28744671593474eb4ffaa1ccf252dc16e4e5229fc3899958a3142ecd45b5aa408c62c0eba472c9ebb29de994fab88c393dbbbb29b5f2414369bf6c3c4221c02582ae30c9ad8934b090aadb8de77c744d85256c38f5225dde1b806e3ddb213dac81d81923516d6991a25486d41ff217509aff928272cfdd123a1980afb8d33b8de88b6fd31017272d2c27ff46aba60d6b789ea3293e4dd67ac1fe7ffddc39cee84d8ac6366b58aa92a3d8a5d7eca39e472fa47f51a4a4ab57fcf9ccfb5f6e9f5618907c4d2117834e1e98a1d5a795a0d52d2c69dbc85ee2b032b3282003f8bc65c15db7ae8b339c87ed6c60a20f3ee2db0fe3a6382d7a5deac51cd8b437dcd190599976332d893038b8898a4e8e4d0c561d5bfad73b5711603eeb8f4f960e3d39e988b50093bfb54aac3396d6cae02ed5b7e9ef9dc7acf8f45472a926e904f7dc7b7f5fff3bb069d57cbe82dfc17a92ed771b369b54655b27d0a9707099e78791412c9467e86ee7fd3855408e2326a3a3009d4e35eb462144c077297f1d5139740a7c1017369cee2981eed4396dbc0148d709d37007ba9532069e54cbb333f80de451d24c8167ed4063f9729efacadf79d14ce74dc503aef8bc3b07157c7ef9c3dea5bc1d57b372cf919d232689caccc994d545ea00f513ca6c0f769c3abcebb279942884d3678b9d4c4d0f62a8fc575a20d4fb05b4682551c1a2806ee9722109a1841c37824bcf78e67bcbffc03f181b11a99d407a17f184fe44c7fff781a1bb5eb90e14cfb3aa223c8f2133b5bdadc6502745cdc3ec41a0d53d748b35b21892d7f5a0fc33cfff3b25db9701a63196983f210d6d49f8d56c57a5e57ce2da63b3c316acfbe3f10268bcf0d58c6a201cacaec205788989489b5f1c39a4702a7834286bb9dc4d24a75c5bae9d33d9b4d92478d53c1964f04fe4181c32f29355adf7dba41c8bacc61c549a9e659a6f2fa63c09e41efb092f302dca5a14f5e3000dcddfe312510888e002c1bfe663dd16e3f015ab29199184000af5b483827675f32a4d8b27ecd322315c9fa128ba9c703af2af4c329761ba2fa4052e482e3790011c5993737997ae1af1565b7caf3f4adff2d80648859727ce1a34a0de18519df89494473bd7f36b86231ac20b293c23856e4d5639f723bc3d46df5a10bb967642d114f61052a1cfa38efa238e8cb85dfb6eb751d817679b9a71a9b6650cdf10e54a20a425d20b654eb1475ff78fcea9b1302afdea8c16ee227059df1993f1fa79df2fc99530c6e1f53c3d35c4a9cdde8469d5e9371c95f006ec87ec40f02c5f960c20fcb912e7cef7cc2ecb6d89dc3a76602bc4b125eecc18a20e6cf506fc67a771995bcdb7e1b1dbdeffa8ff5fc1599e556d90a0bb82a5233f8746194a7fab50f065c5a42ae819e01533d28495fb1063a6e837482967771de262d461995d92e9b65012a89ad22a13301dcfed28f042327eb2b10bef3cd8d926e3d2beb3e386408ad65627dbe170d42118be4d6398d0f7f4a89116559f67fff0977a6403201960dd8000c6cec242b4402a3c35cede3b03d5efb17831304af224d135accd7f217134319a1f6ed6eab3e53f445967699ac4efd5a199be379711c474443bf203aa1d82d3c3b072ae4e8b0f3b85e36f4b8e4af7bdee1874910e43e06fd61149bce6d5a4bf5400b8ccbf7d1e23b1c6469dd7eac6d68df3b36288d01ad3ffd0da556b5d9effec2a0e55a2756f3002a6503bd13a302d31edeb4567c25a95c58c903855c146dd5cdc9d77a21d9074e048c0e20e984b36e3c5bbc92b4fdf73210c9d3aed8d70babe6ddb84440ebaf9904e49e9c8138dfa543a65907829914a3329265d03401c859e384a365d3a4032177bf14d4a4a8159f56044541d31ac1878bab3a13ad3856a82de83132173076d56401c96c9b7bc659d098b6e3a04386003ba3a21a4f4cf3397a520be821393ceef41c190388ca9d34779501cdb084a5c6e584d5bbf82a24c7c01efdadea131f6484ce0396cdbf284092c43adffe9016186182ddcaf4c24fa7457344afdce696a31e3e231842fe91dafc3f0974d619227b96267b4ff6d89b8bd0ff156e22f7b5bcf967c2683da3ea847a2d459b63a7dfbd51ecae19be7ee932982d7b6e234848c20a28facf86eef8fd507db3e6333259bcd8d97e2ed7073f0991f375bfdcda769bc5072db6e6b3532bf34ec26c5493d86183285c8158984ff9b000c8447afa43487b227f5e4f8e1c3e1f80a00b531436fde35ca328b12b5b31743795d5a815fc0c614603ac02f72fd230ab792428976aba2193172ac57a50b6470bc41ac4f7e28b4d0c782f13abd4af588a6b8f8124302bb65752c7f9d4beac8e134890e3f8717b0e12038c43747ab808fc91ac0bc29755f1f40af60cf06e68afada58cacae9429ce93a706c16a2b8fdc626d891cb7562d2d5019fcb67a0c7079ed0776bd5e45da1968744d4b9be679a79b3d57dec7743e09d7edd5f1b398703c341c747d6190c12594b1c0373146780dd20e3eee2084eac34f624f9a4b2f77ff8f8e3f998dd95c2f6a0b5218e350ae3fe6ec5e6cab08f007cdff7f1adfd491e7d48f659b1dadf9d642162b5218256c6bb69d714de80773cf3813db365da01318f2f17c90d1c5d070472c676bd020e76daa8b3e7095481945871f7347bfccf7680b0e560d078f4c25658e16de9a98e099127b27ac0c671fa36d7c40c12034ac98ca9237fa8b611880d7001a0c0e876ae426d1b4ce8216e5f3f2cc83720365577fc9d04f541d89355eb6de00f40edc05921c16c36b5bb51c2fcb351f91f2422272afef3d90489907f6746072b9346d4256ee1492fb4e73b7b710e9b3c6d1491f55229516561866a5e4487715744e95f2f4cce83b238bb1ea88d85890551bd55e05700a2216c758b7212936d1bb789b14604c5f4d3618d86e0d05093ce6f6e449834eec980bf8fa87d2b883ae5a3ddecdcbe0e4fc545662ddad50a7075c1980a854d167596a6c3cca100142fd8102e8b9c54dc66b562ca9c8a3a861fa01fbccd5306e4d3428fe3b0d707fa6d35c0ab4bac2c7b703453f97ed7e3c953da997787f0b94ec1a517f59b000e70dc0ec0814bf8ba15693d3f9f11c3323cfb9bed5d5753a19347bf7198eeafec5c8845bcc7d15030c456ce5dd89b39119989dcca795e746857ebb61293db58b105e287a3f410dc4c189ca09bb9d08eeb55f3701b4f3f2e258d2acc01f5476ab31baa1ff1583635ffc989e3742b1440b2f034a16a7ce1f2c9acc8071600fb0f8d46de1716515bd4b6d2a9eb8736fbdf57fc5b31161276ea074c4b034e2072981347db2b52882400713d8e5ebe69c042c5953635bc00bb5d28845a62ff403d1342b51d43031ae15aa39104251491e0e5aab36c396311e2e946903ef16c7b9bdc9c3478db1bed15709e49669d860579ca0b5c7bb2e31e1cab93f7d8e3b7c8abd5225dbce0206c4a1563a3e734027238d72066fdda3c69cf72d7ec9a7a54bac5f36f9882ff1b9229a0a8cc9d3669c130d08dc757dd57098e7c4122402c079b6ba8fadf2f93dad200e341623adfcd22d27fe7e4353516109dc3b36e48fcb02008def9621977004a92ca05645a7e904ad6d857e8eb8ac5efe028d90d8bf10a307fc87ce681a639257e35d80a6ac877eca7e33b3f0b98045305ab9c82e577003e163164f58430477ad1cbd85c5b7cb65b5aaa72e66143e090a7b451bcc9f02e3bbcc32ff1eca15c639bce63b417325ac219c878ff8e04cca6bf48e40b68c0fb0446bb4b0b219eac8ee3eeeb210eeadaa5494c717180439b23910825b195b022255a368b10bc6703add34c3b8ecbea5ad1522f52fc43e33f37cd06001c90f1afc5d0566aebea8ff98ca8a9770ee969de6bf75fcc83b57e042ebffa3ce97f7b13b61f48a1befea3e69266542e1b0449af3973ec8a807f894921b8961798d6187220da620ea004f3f0d2a57f8d0557af2f6b702790fbbfad0e986066105a64b1dbac33c815754683bb2032ac8105ef555681ad5ea37e74f6e37f70da285151f52fabc58f5112805d7be8dd1397b578f13da07ecc90ed4db55af72811515472fd72fbac4933168251faede01924bdf7f46c6982d8294f645861b0568ca8714e450f65a17d5cbf2283a440b6cdfd7ec82af14d6c6c7330068e7c4a7ffebb469374827afa6210d92c4e2086401ffa8c120b570b2795c516bd0ed0f5fcf859152e5d80b8e0a984aaa18a216142168bd0c4370c61f5f5ea95247c22f3702e32bf7008971f9bdbc7b09e8c11db02cc3f3c0657b9349fe2c16f8eee589f03ea45452cc32916d767bc69ac37a8531b7a813704c3a22269b0348e9f0a3f96e8166bbb5819e64d1fb37079dac82bc9abc8e07580b2bb96a69bd4baf40edb14cb3f1740ab793b2f1a1f895c00985581b2a9f7eb8386d7cf4ba8b1ba2201efe2319d3024c3444deae49e8df9477fa552fe17a62b0e77c2874c0e6e700b45c25ab7e241d8096e797281e590f74fc9be4a29e1683ff245a806fdd50c2dbba73269b0054d47d7e612372d3a984420b689dd6d183ae38d41606388594fcdcb4a4d7e7052d384b08ca3b448f2c9816e8863fc1ef6a6ee662e742bcc713cd046ebff627fe70308e016c6f5616e225405260e8ebd7bae6ff6d6fd127ed584dd2b9965f68e46c238930d31f913f8d20feb4ad32387f22c40b35718d6ecf400ae4e0b73edf8acbbd05521248b2ee971546a69433fc12463892ec5ec6ca23f41fad3ca8e7175c006a638344b89b3295d710d94e68c0f7ad2c1737292839be23d8c38ebaf6c1df7ee5c6befba1347ee2a20f7bd75725409199aeed6696a22b79180bd7e33e0d9ccc746e6b45e560bd359fe7ba21740de0291e124a14eed32fe3d2b5e406fe5c36ed3d18796c57567740aa8c43ee2627f6a51241bae954b6039ad7b2926f4b70d48f8902664ade627ceb5e4573858700b8baaa3f04d373c2c84e9433b6d37f345cbba2fe657215d39bb84391d35432f4e118dbbff8666ea1479aed018df9555e88f862bbb25088c44d73c8976e8f4136f58eb1b1a4b60c6b36d7b13bec62e9ff57e7eb73615b453d3bb786e8068e3d46f6acca3c3a2db0857618cabf6ce84d8c0d9bf7c359edd5f14049e38bf87adb130c8eb23f05f7d249498f0bac73596e2f0a63aef38b8a0d4fa5d07d780ac519184f8020edca08832822b48dae62bc4433e60c0bff77a88b9c1f5e700fc508c0f0017f946f8a36abae997249e06b701e6a7914746fd349f11f661ccc01a09cdae29184374d0e3a26004d78d735ec95bb655d83dc33b89282b13c1aa9c8bf23b6f2b2e7a5b4ddc3755d25db5d0f1ade981ae4f0f799d1c635d7fd4890f81c5a359e30ebcf3cbe75acfe8f07b60d29ae943098d7893e742ec48c090e29e695ecda0e92b2021a66bd1f4fd5a217ff59ed4e980e3f0710ae2b5a12953d0235e967940ed398ff4bbff63e1aa383dddb8e3634b8101491d71fd8ac2a76fb9c44b9ed71e87f6795f60f72dec3aec0debc76cfdca501f833085bc592216224d42237dcef7cdf26c80db9e4fd5d342a818c7f8964554f3d295df456fd577bfa0583e3782122d2473d19a1a014f6cc4c15fd77f918f916b2e89d51c75a2c36c45235cf21d4fdf8690c9c0dfe85bfcc064925ba7435d83991d31015cc2c2d099eabc028b9667eef81f965f01b924087d2ce703a6d980a2d9e2f194b1b7241223038c5c249b85ecb049c138299e437c718eac677cabb79b9d1e80cd434ae28440886dadf0e7e296e648747c077cac64b1e5a631cac71720d2d2779152f6fe4529079fbc38e141d5b374ef7ff15efa65243e10f7ad5385c73445af704eb951f6a14f320ac6c7668e50eb1d182933f902f7057678302446676563ea760bcf5491e16228c5e9c71e23feae5fd4b67e0286bb05eb416ba1f3d0cb609d9230702a25f6f00ac3ce6d9bb5c6e990ca70eb592459b895b54a360de1ffefaec1b41d988a532304fe3c1577294ee152318f5423940133a2b8f1d85b2f5f9450b6e3c0875c9525f79b2ba56be4ae1ab5239002b38c16ecad292eea1a06aac1ca8e71cbe659d0b50d1a8760a21de0b03c5f40149e22afec82f1a1cec16327908cff730706655fd51b49ef917af24f76bc7a7fdd0e2df81a8f2ed2ef5e9445f22957b390ff07d7e26aee4e1f15bc29c4da78b53cff3d5f7ad8f189b434bb587bd509b6fdccda6b853cbf6ce8b395645ade38c8e41ffdadd5ce1f0c3c6c5dbf7b149adc78bd1592564a0622343f4784b45c2cec44ac6e8ba892fe31eee194f77c5419c76886d1ba77276f279a2805eaafffa26228ce1508a25dc31a5750b140bdd8a4c4569e0412d4a9e1f987949c9e70d70c2ff4cbf5c771fe3dbdb85c40a82a518c2d7c7594a607762d50ddb46854f32784bc72623a74600de5bb5c5aa624bcacd6c607bd91454bd5d3a790f30c1cc356b59a2ed54ab5fb090b905f7930782af49139e53b0ffd01bc81d1d91c4d3c87a1580331a840ede3f3be2063eccf6a3b90233789fa95ca59741d1b72162c4e22235ad5684b25569c8c144f1a07323fc48b719ac0169913015bb5ad77a98f7b6b6d0a907b45e679bb211c251c2829734013c59984209ed37fbb20f81dd07f3a63012a4cfb9f7f4201777d36158642fbcbba6cf04803d50d8855371bb8da01c5600e7cb9fda060b3b6f4a7e18c386e3ba0ddfc8d5ffd0bbd036e1dc7532ed796383bbe2248ad609e549ecef507d47a0c1b81d0d06ff18c583a15888beded0d9fa58b9d1e65ee62938930ec3365d8156f26a2bb880331c2560048f4c073596eb1664b3df4d4968118a74b213a50b51a6115c91526d50c7f0035335e9987f9591142d75c78343cf36a96bd250ee425448a3a544ead337d6c81b1cecba02418ad32b6be8ba5d223b42c9b86847934a0185ebc1e985232bfeb302937f6947b5e543345d53ba86fed2571a04dc6d522d8957424b2793ef739b708c8ca3d9df53ff91077505322f1f9e4357b12ef3aa7c0e3ba0adfc2a6cefa16e72946dd05682de91c60373fcfbe46e91c7fa03a09a450c0eb70f6d0701fd022165460a8a70becb2f27e168d0b14135c8587a27721530646e098610331c0a04b94e980342837725e287ee742e13941da31591005d6be12eb08c8cd8acf3bf6ac1446379f52bdf6c7fc101e5e2f14097751db2c389443efff4567be77a773a10f6760b67d73b29fa02f671ec61b6f38e3d76a640393a1eab787305fa4a4b6354333421d295252527941bdebacabd796841025717d5516980b17585c4f018afffe242fd46521192110b64dcfe4fc69251f0fb0ffdd1ea7a84cef9a9d5902de7eb9731c8d13c1961da6fe9933a7825ce4a99b606052fcafe2376d2407479fd94a56ed5791010d2d0ad84a3fcdb8124f14303f8300503f62012ad4bce6f9344b2ef70f039c00292188f7d43bee65bc237b0e293272b783e9a5abf7887b5d80d1567473b83d4a3db8cc4a41d32c6d63a528b2a7c2d88614bb4664b5591fce0ea2c52131a203f3987e578e1dc069db458e1903b807dc8442280b47d4b8f4acf639f29b743847e03b62d968bb889e7d296b23e2676f72563d97999de5c3d73b75438493eaff42a7b161395e6743cc80a778b44bbd2ca8400c6de741509673915d047801b954fd2d98b7099457edadf6f180f9b019d1868a2686860e83c5164956ecb9da1956d7e39d68ed64d4bbd405f92a2f5122d2691faaf9f7634e7f4d046d0aa7188ff1175943941da0bef8f77d46a3fd8fb53fd671235d70a0230c13ee68b7cfaa511b87585fe09c85695a2246178eb407a8b72ff4df2837e503d86ba3e5a379cf2e91a2b40e7947dc674e57d7e892e64c877aa7fd7319df953fe1c7c16c6ceefaf13d9d3f9a24e47135354a7e8bf0101487b1c63337869c3518ac90de6175fca2939b7e26795c8194ff86b90ac250fe78674fc22ec428dc1c8e3ed1e7b9200386ed46434ba835dcb2841feb39b6543fc7c5d0b4a9508e14edcd17c7357c9ee07cdd89accd7492594d266d9d13a1f416d3c21623ab5cb8a6b0afbcabfd52bd6d17ba931849eaf53e4aea6b35f4a9edece8a9595573d7be5bb494728b6b1b693fb04086dc9df0742b72220fef12b5e0b4978eb61ddbf3390c9a635a05402e8ffc442388f4aba8c98b858e1794c9598b21ab2fa48f2b46653e9fc6741c23b4cefd2bf55d62f1cf1066833c286f0c8258d17c610974060a335377a002ffcf7ef30c5486aaa853bef8f943b51eea60caebf15bdac29a0d67ff560a7d21689356ce43254580a49244b01bb4a052ff8951233177ac006f86b6507a36a5bbd2240b354ce38e9b6d3029494c833eba1cca0c60015a7e6a076f0aeab63a2e03d671fb168c3d47610657f5f239868843f53156dd8eee6ec0f871329a1763d9ad020ab3ed7b0d4672d1c7a7ce0315192e5b8ded237277eb04188a004c348a305011a5031c91d2a2640163dfd4bb8f2d7b9ef4471fe873a4e5b0e3d48910388cb36e88821128b68a481297b7c1b89b6a34f85919d149649764871827207b99ca2f92f5c1371eda7a2db38698176b7965e2b29a491f370c63c395963ee1427e6f1355a8564f49211bb264a54969cd8ce2a0bfe7555b17e9952f273e1b617a1ca9ed8440d8dc55a5964628fd072fb2c8bb664e8f83a34fd4c87cc4c2356a2d2383ca530c89ebed28eb70f4b59433cd06f235308d085a93a3bde471ba9b056d54002fd74465c5431e29462ab689da963bc36bc39553311c55098f65e8c45be9f44282322898dbaec40c30e20588c785d6f4554bbc9d68e10f7e86d8d83cbde84244e2d0fca6d8919516e7b4279e356320cd1e8dc552a3813822b0467dfd2badf6c2560c36b088a7592920eaa9e22ef6e39d8071318adae3eda858b370225f6cb67441e9e71cc027aad083c1488422fd17019b84fcec125b4bce322149f781bd4736b7be806d91812004b599db1088520576509ec02effaaa74ca0cfc9fc00052cb5a85c10c19231b08fad59fd4874ed97527d8855179fc4f38ea9a0fbcfacb699e185132acd2fe5807521d594e2a484d4ea9f77d38158445e50cea77ecbe8041fcdd3f355f669288866b4c60e417efed981481f87551bda0b4a1fefab071b03a7a3a486c3c4fbe726fd8655db4bcb9f795d98396c77e59e50d8e09fccf83600fcbffec40250e1a211d958f5041c6247b6df7526d8f935a31f0f50cba115cf39af55ab56cfcbe90a4972d4e7cd2b54131d6d68f3b6c67fa2ced1c2ae0275e743bb80e7759b872b75deb86537dad0b5976b4ae0969f8dbcb0b608bf22b8481b94e2f2df85512d9b30ef5cdc00b2d3791d69e5c2fd1065804225e1626c6f296fbbae0b6c7fecbdeba2cb04ed4d3c0c324cfa138f7e6cd42cbdf2f442d6b2b52e159f04c5a2e5568b44fb0b7c0f09779634f46020dd95ddc7f3f91ed882e897c6871e2672ad75a4b178ee2c170d704c4591a85ccd55d26e9540b004ae2786cb7abd893838332f67469af86ab0310fe58850affb83dad3f48773649ab027deaad9fcf211c95e157384840f56b16c80a359fa3a0d1e72e8df711c195089f23bedad62e40be6f7994d6e08f9f536656813bdfa90442a4607ce7d4f74aaa3eb12c03d0d2810abf44ad0aea222b20d4b753f976c98743740044472f81a4e65c927e99da6599f50010d28a8d076c7cd20e9aa8d549fd237b0dd46b06c5e4555d7448a6207d9a424998946e4c249dbf22012e42dd7b54ed7ac6d98af421aaaf2ce8f4f16c615730a74d1bfe87b9e40d439f7cd62d1b46d4bfddf72c476316257384ffeb3917d8cddafea0c6ff5c804633b9507e7b482d2d0d7c4ce91f15cd060ae3a857d59bca23e670889c2e670269185df88decfbafa1d1cc07bdb13d140fcf0c3c39f3c39b811a0fad43e96a5426a8ffd138a1f0f095b4a0db37ae0e1bb78005ac53384cff1d83db3b302716d1c23a6ad12126f6f7d9c47d82c77b80d7ed1690a01963b4e491b0c138b65e4e1d3ddedac0dbe1f46ab2c33076e970f3ff9857e124c0b6c4c86a69168fecfd12c9b48b5866e8723875de55bb1b391466040290fb8d2525581598a9e026ab281974aea80d15bf44be35112c0ef8977585aefddf706f4137c608eacbf7e9a990e562be3624eb6f94f314e259d83ee763adcf3456ac72b158148b045cb533517ae098b0ed930f4d5eb8fa0ab3ed05c51fb0c1d33329da5ef0abb2c6ee02e98e3ea9d09717f356f8ccd01ac1f433d073bb02df6fcb7b7d21e22e4325830cf0aa495056af7ca6455a6dd6cef87d5b6f3ecee2927033fdf376bc5cf3aa99e98948e8b08b7f1bb0cfa2951a9fa1dc31d871ab4e0a4332a53238bd6892ac82f206ca892c1067e0e685d6155ed7b082e294747b2b639fa1373446f3f3dac033f6a0e73ee5c52e98119cb12dd77c9ad7926402c8bbef8139e9bf6a182e0ccd8466c8fa7f8efecd0ac668b147c3b4855c55c5a05a83b923d34465480e411ddaec31a90e220c4c4a1de21ad80dee64d5caffc714cff4aa0f52ae1f65c86efd981d7bb273f4ff3eef79ed4169d1a85a1fd7e5d09944aa8577fca9d303157bbad45ec6fcce50957a6b811f51b984ad40d3760f92f354b6215776665005a6c108664e5a2ecc73c6ed509bda56100241678cdbd2f100cf51cbc7d8cc0162c7adf40cf5bc8d6291286d4b2471cb819def3f9fe18db7e41d92cb1e9750e2ee0e1852ea3a6294fb6fc2851f2de9f6b936eb95e4f18e777d07bd357391e6910b2270ef570a3f477f57dc6a8b9ab339abc934caabe70a7a06fb221d5dc4b489afb6039576b1bf12bfc24a85d6d17d9426522f98469763b8d3f438f34514b316201463a319bceba71e128833d20a99ae2caa8e5f4125beb754d79671a0848aaed5d3fa5d04a8ac6d642267cd0ab54fffac38be848ec6eda340a1462fe94027908f42854cc3f46f198edc9072b9f4848a4e984e3302a96624d63d72c7056e56a5b87394e495b18c4f8dcb0217966c57b5b6dbe3175c40a03bd4cc3540da62cf56ce6b3f2436e3af41b8e9825e464c721149e625e44697e172917cab5107e46ce305d2f34d5a79c9bd984a1b6d650220892d6bd7ee2f8849a228c5c2f8fc36a7c7cc889a53acb660dff2f48cdfc4fa4f760d994913701d4220e8f418780c7aacfcb639b71866464816b7a6649dcf2b6a031348bbe212e57275b8f40fdceac8851ac2974c48f0d0665ad51e8938ae2b25a52ba802ae60853d8e00f7d31bc523d387ae45d99587ad77160b98e96db3097acd0f08445f792078cfcec523eabe3b67e95fbf7a587978e5762177e0c140914ce25604209d0ef76b1c464fc007f65dbe259cc960afa57de1b5ae7daadc06577fe1ce1146e6920dda7480c1648dca54671b802c1c32f9064aac86de56604f92699cbe6da09ea37bdd9d5838033b2ae18192ffd2b94d0beab0ad92fcc352ba332cf40f32b01b239ced56d5b789310be4f7ed93211f978a8aab0f58fa5ea31a6a03fbda9ac9220053c01714c41367707a136042fbc0aa10d39a98edd6eaa2431700d9cd053443ee6dbca2cbe7781cb90d7d4d499a7f891c43eb5438c166b777917e15d16708acc3f9ad6bda072fe2c7856980dfac2faa7bb93e68edd95a3f48878dedb5fc109295cd3cdf93b20c0a088f6551de6ebf5c99c7da811d455997b0ab32856b4c8da5e2e0d584942f3829d77c3688b99db1b877b7158161f0112a5c54aefaca585e60305f3479f194fa0a431439d6d98b6bbd9c631c3feca660481953921e0f9bf39b9c1c630326ec9971ed9a297adea62f99d7533d6051a421ddd5ed968dda633eb1dd6c26afad142e6a0f545ccd1781a7ec53ac8a11646055944058cc6087b65005c99ce9920573f500fca026bb26756202815fb674409333679125d0caa094b970a033f2300098300e4aa7aba36630311170ca214b9438eec9eaa97c5577163211c8455dcb6301e7352fc7933860a3808a2ac6bc071e31cfb9af505230468edd296b77b3ab5fc61a995c8c2cf1b17998aa0d48447caf8f0aaaa405f8e03f0d6406d96dbbff61a750294c5463219df77c2e01d13fcfd22317ac665de68644ba24c5a19c56255400ee0688d9cee96e6d32180a0e771fb39826e65a911189d26ca6f1c6e501751c7fe41843fa5a1ba238e9ed50c587a09d7efdcd068ed316cf6f55c370839adf7a44f60d89360cc6caad5493c993ceac1cc0cee94fc5bcb392089b832b603c7a8e56dc0c699bf3e1d2782af87f7c845fb83308d9d063990d805229c307e5412090a8968132411c63ef3abed7195f45330fafc8d1edd1b9c87993ed87521d9c8f8c31ba2284e59c55c071804e62485fe9ef10e2855f59c1745ca118200c30ddd12ae6e464b87badaabebaba7d05b2ce276fde187b2c4d544785a3f7d5e7f8655b19c872ccec555d6b056dfeed29c47957f0782f61ecbff211735c9b81ffd3f866edd6851576e7c92641247b563f5bc1609a0b6092f9a20c9d18a876319bd0fc77ebb2d010f00acdafbdf6ee90f3fcef5e4639433ccdfbc1efa3c27cb1841ce00f1b26a3276921c54af72ac066dc42b4e5c5ee14d6bec2ad94a79dc800a0438d4f8c664551dc7cc08a1f6842b286f055ec254d199ce5f4b47b7f92428165655fc82b9c925831b17f6486c300a87cb11ceeccd66c64e31c3a248ec85673626a24989b055f836955f4b7fc9d1c09d0d502992ec4eb5462a23c338a9b6f49aede9cf70c6de003cd19ad6a9c5a4e45c8314cca205a88215894f05fd2ef483a8360d2390a3cfcf61c63692bfa9cc41dcec93ff62d60fcc1d75e5ed7471e51ac1428bb58b4ce7b642b8b04262008f66dfabcdea26bdfb83b3b69b506cd2a97b7f45159b0a1da1178e5118ab015b853e67a354e419cb605cdabfd7a2cf11792779a5da7a38620331aeb0d979041a963ef177da145e47bc0039adf5074face1c87ddb3304d51d49b5dd5c36e694579aa2953fd01802c76d4338fba927b4dd731644dac42d48fd9b8d67bb8b5b3a8d5461dacf4c6f3dfe7d2fea8b70544e052ab36528c283f3d85dea65909ae0d1c084f5e178063418cb2560757dba4a84b2a283c188ac9b164d305cf0a4f839819ac10b4a489cc506765f5d7daedf510cec6cc57cd318129d9ccb36ca93df36041c8532f4961bab19fa8d4c2d90040a593f420e5b03358a02a90cb3263f0bd397ab1accd04eadf3cb2dedfe7a5be683cca348b92f15592d31a16b0fc8ef939e113044c85e77768523a5f443b12ea8e9586ab6807c4f8c12cb12c4d7d2f7f0616d3774b3c02a2356e452c0c6c3b7b60d03473b6b3c0586b600464f05a1aa54470ace0b46bae72adae74d817923969f68891df9001b165ab0c9194f31e536926965adf845c511b6e5d458aea7c2c70fe65051ca3bed48cb59f9d46549b9f6882132bd7367ff84ec7eae3dc9818b2ec0b1da5e765d96744da028175dd82e82c61574bf66774767518c185a0f943855c9d064d78fd4ab1c15d8cf43107f6c5bb531d2cfef2af0ca46080d6a3ee073bb2a90fb269d79a16221faad16d86db0d101e399639be08337cf7deac827b29c17f634a617f804c4682611ff5b420a7cbffe970b67356aef0bcf8ee7d49f8651ad80c45bafbda4949040b01b7557bf78c7da258fff52f3d87daca9a7f4487b122566096496b0e1284d3e5ec2c2fcde950da7f0a7c496a65101663ee398a7fa85e3d93cc1c71c0e7c82fe02ef556dccfec09be3d60d1bfc151031576a42adb26f19d54df3a54420381b2abda693035d788928d6013c233c56e706005b1b638a6bea779cff77e7e434df8bc51283d17b42edb45851049dacae261d3e6229bfc9f4ac42f2757828c88ce4cb891c7bbfb36757db424f861b794f1069a37c1f61e991a635960db8ae90301adb5992ec48ac32f5d031b741ff37a71cd8ea6e99dbd4ccd3a281cb1275f0fcf73f55f48d280cc3bbcf7c78f86ed16ff2ab90d217642de367f78f29fc7c945f240972ce592eee1db1e9b5d5be4788f18fbc3778e31d21ed1f3888b2f855727a2182c531861a47ffd436e7bd67af6ca8b2d64745154d4774b100cd7b1cdd3c070370501328cbb5a72b4f540468121d823872ce835858dae3440a0bae64831ddc8713cb8bc22275727fdc06b09f1adc7ee6b31213d670f4ff32a0b2ad2f7e5daca0fef637d60783570651d7d56147c2dac6a53af4f83a37fdf7545a4c7f9eb08a6dfdf36fa98dd3eedfa918713a9c35dd6434445fc101c4144d1ac5ea4e647cfb32cd1506e53d1d36c507410206d70a642f975a5e7352b4cb460a7446cc115678eb29a2956b601f894c266e395548aff102b2515dc1ef204f54eb8a718fef38510d37ecf6739f4e3bcf2cea945f21d4d8fd95d8d435d3b25bfd4d4d0ae38834e9532a846a723569e71dc4fc1d35978fb3eb21234c03a6c64c9fd088bffcf3b5aa3c050c94f90e3faef253c8856d4e6483897aadc06197165adee66a65f0069aa6664d2ed0693d76113906778828b50998e596c7507906e4f5259a86c6fa82ed998c08d53db26c19035e126fc2227672204bbdf4b6e2556bc74a9728ca3f4a33ceaedb08bc1c88031f34f89f29d5abea7f328f45eaa5e75cb9ef3bbf311552c4bfd730c40bc3e072f8a9efe8d89ab915bc15139b894a298ad1129c69bf5b4975315d75f3a01674b29e4895714b2dc80e6710d924082c4cf97365599c6b4d8e1daa642346f77334850fc023e4a891b3edc5287351f95344f8876354dfcfb7f820e9a19ebd6fd3f162590367076b19cd91501940fe8a758e5a7cf669116fa0379bde900c3f0cd348c5bc1b23b5031bc2d393f4c6dc631d8d17fa8228367e0de8ef7125916d7ca77a237375f6ccdc0143f19ac95400b86398578c97b4a1e509c4029abb022aba9610cc560aded06f9a745e7ec1ded1b5f3f072ff0b5890e6db8b30ce8ae10c8bab02216b69b29b909d8feee481c71ff58b946ecfa35ea26eba7cc95434e1e0cd279854891fab39e7b157f4f5e1b6ede1d7c09690643f95fd124aa757ade98e1fe21855955dba68faff1d10df60e7215426b630a2896b16b98ac4ff1083dc9b460ffef895e2dcb094355c4576326a0e564f78372bb2efba8e0e0fab4db8a8f97ffbae2eb448917018672b0e836930a356e69b9161173ec0e220119fccf1df0c207ae5529d0d8da51c1a56ef661974caedb5d452892ac0b1c674e3e21ced90a5e5862c7e929e6c67b0888354555e272f9492713f232461c96aea8aa12958b853b4532a2a56e1f325b282abac50fcfcc5eb748aec895d5d1ad28423ffecaafe97c2966a187162419ff4502fcb41f794230406aa870abf5380fd931aae85e16c8d7b746643bb4fde9621882708c67feb6a29f950ec1e808bd5a6f3ebbc507c11ea2b832105979a0e0372c9c36619969b2c72a6cae31f9463fc154276ad82c2f5d83bb8cba265056b1027425d7bed37c7a14fa2db95c977d9c0987ec051827f213adcad63c536db18e9b0b8675f1c7cda0f70dbc68a87747ebc17ecfefcf20ce3e6f0b3505ed88e5c7729c7f922eb858a3f228c61115ef96a4b2e952b7187b4288be90f35dbb88f862ac303a1709c9c10d5dcfa88ee2c4234e6d4197cca9563c83622cdacf07802e3ad8d7515d1544e1e29cc8d561285ce8c590b7ab8266ce6c6c099f79bd34b0ce86efd33ecd5d6a5ff4715b9a57dd322056e5799a430e99254059e6d63ad97b33406428eea2df2b7d3cada53a463b4cbb38283de9e19b0395ff450d0cb98035b53a6f829fb9597ab14afb5d9c70b4727d0fe9327d86726c3553a5d2d2ffb94f0683dccb871e479e3c7618561a49ba6ea917fff520252a515af516ec91506bc82fa74e37b73ec3cb422b9d1bda7946c1a81ec67450f7506d2c42567ead0bc25020b1ed0762d9d24b296efde4e2487345b7716e378ad2c554a73a68024217f69afd645d424930c2dedec49d79633a0bd4d346c5d9a9a69b7fd0e3e20d096dd3d28fc86bebe7faf662674b126e2f694120f9402ff7d76cb81a1439ba949295cf0caa6e9129cad5d792ad1a7c02fdf7ebe0b145e5c452bd6f2801a9872721fb267c5d12fdad4cd5a9aa927399f203c4f5701b81ad3b97dd84483549a50d5b547d583da63b11e5e0682b47c570b9d7eff0cc96264fa95ca031c5a8b3bfec6317a6386b99fd4c53b7884d33ae209e28ff35dc90f4bc4eb42f3bf59d653d7e5db1141643c25568d6cb6c30e15697eae438fb006b8326c5da93e25a8ee1de33ec426f9b4543b1a360d2bfadacd9cd2324216ef516911e96f319b8ba1a145898bbda1b38b9680d8d356762cd66410e8043fea5f851a7bf8d1735a48c5d5cdd80ef68488161ba2efee3720fde52b083b764583b4d19a7ffe100a9bb468f2b86395e43c2d0ecde281ee843080e57287d0423dddce429815f29b2463f007485f7c4313c04c5f9624949811320e247601763de35af9964e974b503b6e57cb4c46e3da7c97df68590d30f6049d904812b8f2630ea2019d4cc1f35f4bd6e4739d7e5a00e7d3b4707436124328edc9eaa7416bd3927e9151b4e5e605c87f7a2e95eebabffdcda0cb39df9d031e8b2f7e981f856a1b91adfbf7ce6b80e6e915e50428abc6113ebe685bb51e2cc047802c9df60873850c3780b625a66a3a6204c85058a636aa9c843bfbf54631dba606455d75c15f8231629b000209cd4d061ccf219995fa47d273d9fe9a561cd829fc05722709f222d5a431502d58508c3000fb9bef7e3111461de8effd5b92f7d0ee8465843bdc5ce3501e945c8ed36d0e9dc8fe6f3dc5e625f39d21eff1e4fff08e12091da10d0d44b08f06114f81978887cc234d40e1028103ab3af7c229757c655d6cd688c27b84446be98b135482601cc13c51ffa804824e08ac14d875db242c475533f39be11cd30fbf26d9bea86567a8f9e6a7c1996a730b6fc1e09382e2ae6d6e700ed709d965f13b7774fe0b7f4d6edbcb6e2627b841cf5ee0b598be9b02fd7047a97b174471e92e2ab9ad4db70451f3cc7dfecb75258e17859096dbdd233aedf6f4da63930f0349c6df18723f6426179ce11118fbff6368dc488f2e483a21ae85d0ff31502cc8b559f9b731454d5cc7f2fc4b410a854f7e44ee75002a27d1cb8f2f8c1e5917275726b2c8b1c0b05bb99d9b9b655d90c89246ff75acf004d279a00568eeec820b88e68a0c69e491cb7faeca38903a91761831677f72931775ae90c9cc9a13f5f7af90a55ae22b9e226acf214c3484df788b865ac32d3442a9988556eea5d556f86fca85592a97783148243557c2260d213915775c3189426e46cc28419a51aaf76a856050a5951b2437398cfbeb10b41759ba51840c430c38a07ae3891fbcbb4333f526eb9f929bc32284d9a69e28033cf9f6a35cdadb09c0402532a2ed36348e2a671b27b92c61f2bc2aba600b751575359f9a14c2715f3b81cfcee30f0d8657773802157d7f457abd91eab90a8fa8634df850937563d824eebd073e58854f5daff14c72e676399601e96b68ec56e6dbfbcf280935cdd13f10dba90cce0c27855078d9c05364852606cddd202ffe5bee90172c221ac32b1c17c0ecbcb1036c889b9fbefee266ea630a4e09db8196dc416caacaf3aa750b22a811a0666daa2a81f1fc31a1ff6b13f36863f0c8da40e19e28621c7a14e71f587a65a5b0d70c3ddbdb8f814883dc9799ff907c729b5ea3d8fe9213d2ab3ae7625ddd5deac50cbfc7f2221df42584a6c10709ab356a5dea450f69dfa7c2fb66f8170a33a2a1dd86550372251f0831042ba689279823a4b34247bd22913c1d9efaa4b9a839dc8a3b124ed64a6357fb033d696008e67bf9f1326e63e71361ca3951b1c79aea4e2da30fe31d6e596cc930258e3bec341d62e3475f75548ad8accaa55025f685f86791bea5ea7c3aef09cb20af6ca464be1531f1735861787d34a02177675dd39f8647199bebee8102b35d5ee396230b215c3b25005484a05fa5cc91772b6f603ef7f51878d85c42f4d672e4cad1480fd4b9975a67751eb1c47c76bfdaf72ad2a1bd3f7ba926a36e4b9647970996ef65e606314ea632a9fba9018bb537168b43066913008f423e8c1b0ed02f24bd3eb2294aa5ba1047fac303fb4dce73a8fd9bb9935b5af5beee5575549d22d1ac033e963c98573c6384cde037b8ec70f72237ba01068d497227786b1692a4012ad0be374bfebba111a2a4947d583ab759d8a0d547a6f3a1b7fc82fedb7be9017c3471f6624be3429582660399ee7d14f7a1e0db531355ef25c8ce2c16cb392c709f68e621d81c531bfde239e81a177ff9ebc607c899bb6029b5f9f49fcd93dc227268535cd085692a22cd25e8f1adc40d01abdd18d36b650df64bc9bb71aa4fdbe597c8c3e51510397ee1ef91556786846ab1d968aeb0e5f12d797a3209f8abe936fcbbd8acccb3bbb7309c5db4be654cbacf81af465f5ed6b38a1e3eb5d06b7817987d67723c8184c128d494d4c3a10fd5d12ca5c257d4c5076da0d9fca1d5c37cbeb4a895c6423b733402b872ee05a2a8b649d799dc37e21983ba94a8de9f6e012c86bec67995275940cba0392f353938b66fc43477df9edeca9305092889064ff1992b0c01b2f53b219e375892d679a1c32a459307d5ba123472d438897137f7dcbd91b4306e52c2db1a7a83bd5bda946552aa9f37e9400cd73035d83f49c5eb72f8944740c3f5b09b7e3ae5e8d9fa066fe2cc8579edb171a623d46650a2308ce34efdc211c59edab68c3c9166e6d9c5681df1e072d8125ff97b7fae724041259dc2f0290b75871ea66a505f1c5832b09a8a79252ee0aa1449e3318d1256c526971d75e6950ac354ad566fc88548e70d2427485826f3c25a63963f7ed9dd4d492e3afb540ec929c035adb5c429ffaea74ea1ebdedc2857b32643d7ea3220118aef86c792b6d712e61f76a6749b33cab5de668fcecc62c252c961c33e6d73d8f7fd3415c37b9e4b0c0cf5f983d8fc9a6dae9c02b5b6bc459d2e00df6c6ff6749e98d95c3bdec7d163a84cb57a214346d9a96b9694111663b802fb5e723f05ba01cb4369895f56f7ebff568f02798541578b17d9049dae2f185be214a1f5d765323934c96fdae72421c6281b2c6b7ee55730f66233b26a87242be5bf9fc10922a99c75bd4090b6908b5d3a29946a9b478a6cc447e1cb5136f8923ca16a5909aaa0614e3544e7a5101ddf5729f8fc5f9bf6e77a8ea1a7832132bcdf3744ca8a523f87271aea9c439012ac2381a7be2069159d8b8401c66b887b1b160851c8cf6a0e141cdfc6923ea2ed6b04a08af865d9361460bd1330bf9874361a57ec6bf7707c87e5843ab81c583f8c2b4c77aeb54b227a07a114d4b59c70bffbe7f3fc092479df091c730c875756fbce310ae38926d7823bfe730fe71aae4ea66b37124bf9e0b7f7ae505ab92794f0a449df931051bdca6308c63f5e2120dd44f1bb30211737b9d000acc8206afd4228c57cc6ee433e5a0be17f3ad412367b30d11d7bfc8a2875eecdcc6317a566bc901a41e79c777bdccfb07872e795b2873fc5e58420e8980f271a624380c1cf232eab8cde28ac4334c364d2a96289665b0574fb6683ce9a62bb7d287da922a81982ec89bceae655b19e2cd472214a39abce4d9db9cefbcb849c782c3158f84112df928f71ddc91193fbae329aada66577efe36d5950ca313f4aa88404087ebf983642e11af834cc72c13815eb1734d7313cbfc4cb1f9957b92bdd427ea471d66f8db5a5c4ce9e8a1dedc5c5d71a111b332624b64e2baf0f625de3f0726d461a84d3821c7fd17be2546871d3ad9c37850a58e17f79a61f8463924a18dc6ab4f63609f3dcf814c5914983ecb286dbb19270dee7013bbdd116ca5694a94576a707249e582242100cb051f6d971cb77a5b32d59494fe2b5c1e88cfae17a452f5fd5da28607deabf72f8ae4eb9517e51e99c0cf06bd562c4770be2e46f22d02d46e5e954135137f833ed1401f82bc19ea100a4c6f8d7f88b5c8e961b44934c6532589ac41918728ad9aca0dd2e5ec87a55b6ea41bf0f45dabf47005524ee29b84a43dd331db2796df996e2d968b7852b034a83dbf28284bd8cf4fa332251a406a83ea74d67f4e0a3ed19625c8949485367a9c63fee9ba6a6f78cd8d6bb8b5aa6012f4434dbf55e1e09bb6d73debde1c36334510a1b7aa490d9e1c599a65eb4cdfa47e7b93f48dfb7bd421a75f11c1edc93b724b2d78b8e072c3951841f962e0eb2c38b5d382a1e84611fae7169de43a768d8ec9f96d30f411c47f0110b27c7f685555c6577cc035aef080a076a38c551f231acd9c616797a8514338019e628b9b4382fe5a6792088babdbe65e33ea2149b7533c38dd3f23c062bdcf4795ad330035e26fe2e6561dd8329dd34781c13ca5f07590eb4d6d8f5bd50ae70e38d280b248a9622d66fc33bada59444dc225b65968610f9088600e3a94f6dad9176b0ccf8a8da2e52baf4a40f8363fbabc795cc1c20deae069526d586c47d2df01cc521b059f87df7f15a4610401527abe8a16f90641e0defbc87f003b95897e9cd746b722e9cabe57e9e2f0fb6e29f74fc7c88d1d00d9f2cdd694e2f2b7177a8520e57762a0bf98c0ed6f4d492ba8c8160b91b6a603efc6b83b70e812ce900adbfe607e02adb89ed865249b62371d76ed309b29da7799384dac20c9a2c2c3c743e8856ec843b3f6edca4d71928442309eb4e218ecaa292e96fdddf730ff4b9fabb8b31ba25876678ceee8590b7d3f77b932dac7cab83d091ca6b38d93d6b6264ec1dc2c0f6e1a6e1818ecd1cc7dd05b40d6682ff7ab0e255994af267fff46dca934b4f9dcaa4073d88c821a43b71ba811bc04f53431691ef48c3837f73c62cb7ca8271e39ae060c2688254b243cc740bc90a55aa3f355c40edef41687aafb35ceb6fd162af325d5a67661ded083965a43ecedceda46b6a953b788d73aa0bf7f523df0629fd6a4b749dac4197ce9de37ba1a88da32db1a92c7848d56ddb599a8ec8ab39e806e328e90d3655aa865ef1a1997b86d8e689b1a847b397a4768c4f53314694d6dea78f1125cb5127df0b227de48d2d9d712d08398aca5ce506b923cf8df9f3f3a86616a88f7e29f553aeefe1e54992b99c59289c33fa5bf8aa1c5aeb18ea1814fd59ca537b4caf86bff71e80acbc8a151398897fa7ef482c0f6b36bcb487d7c20fcb5089a387b398ce1036a51101ad12a2aa49d491a8aa66bf064d441a11a2d5eb3e3769013cf04b9ac29a023e3c87cf6629f02644538644904d766f80679e3a10b3b685d3a6c5601ee9e0f4dba2bbfba399ee41d2134b250074317a2c49df970f28f92191f1241055717446d37c0f5731bc96e512dbb6e2497d0e5e3bf5719e5c7be5818772a389fda2a0018dac0d7bf0955ab885375c6476c5891ac3b5e95b803c45bff3792332470f9ec305a445988267d871f43ad2b7bb3bde488f0480e5313e3e68306336fcd8e7701310db590481c38507cdba41e47bedda39ca078a04547ccada875e765978ea75a1b7848eb23576fd98677708e388d48ab6a755e81538fa77e3b419d0102dffc9e64a12a7d6cd42be6ebf6e82eec6de7d3acaaa0f701395569aae975aad5716035745468214819e5eacc33ad6d4f56fe3306dfc04f581cb78af550a8491a9b456e0a6abd235f16776099f71a69227bfd7b89ea58bf92a3aabff539ef8f9b81ea93c360118752684cd28dc8b88e1d3733373e779092ee878f42ef63dfb7e8a939107ad6564b53816c6e9cff223993455ebbc7ae152dd0182d33b54e2e612029cc6c97f9fd7395ae7589c9f37dc5c657afae96c19f2f37781e77bab966ebbf3deb7b3034ffa6b3430ef606c2609ebec68dd7abe1c6ff8c86e2cbb63aa2b9c7c38360ecb4bb3b3c4862307250de1e8e0df65100a8ffb4bdfffa9171042243083cc3925ce41601609c37f3627fc3065e7a9c55885935a18549b401e61b49eddc0a937beb8a111c080b945e10ae79a3e88b6664e8a8d3e3304a3416fd8f49803099bf202b8a8bc37e53cd06ab431e0bab4c5e2488a47649261e466007117aefd0f687fe177856fc291ccf17f770b3383799c5c4556220ea0da76a1b48b018066541655e43c145df09831864d5320c0db8c9fa052a069def358f10792018a2239a96ffb9bf1268b4b780f880558cc755b688bb0ff47c892adf1b8441e65c5a2a4134f403662515bd926626a21c3eff31d232e7b888b88e0cf73ad0c39233a08825722c9b372941a0b404078957cdd9288dab01a2aa98337f4a8e6e21262d6ac024b4b1fca7716e2f6fd5100ff24dc561fec1cf17e8b47580aaa7c66b71a2bd7925a785fbac27d9c3060058ecc151179e8be832e816347b2db485eb1bbba69cb409f285ed1693238a068dbead56f8006fb05ea281e41b6e35b3adc26037f3c9d46d8475474aec96e60cf7f473d694ed4e27c0f6c10ef9791e74f0b6fcad73a64fb324050d318d4df4a642dacb88c8076b7712ac3f42cfa8ac4a95acbd4b59710208238456c8385f1c2bdc45ad3c11064eec22923309d48533dbd0b30f8c2352a866570b62241c3f96e319e8473bce0ed2ec827222e7d4e946558758dcf8c8649c495ecc6f7963525be3b581e231fe879b9a2f0ee94834e48d14802be92f7c5fe77175759a71d8cc9630b69d44603d64000392a75d96ad0497ac3597b7ae119150e2a80f4e623b3d0e9b40d76769d7d3a9e026fbe640c39ea255dd9bdab8b7c996c657737b69e3089ac04f37d1b8f870065b81a63637bf097c7f611ccc81401fe16c60ea0a852010536a54cbcf4dd96b537dfd0213bcaf77937b5cdaea322633c2973a25007a6968a5ab3bdd968beb3990ffebc3809cab1f802cd2c39d0c305d048590e23e3ffb5edc922810e5666ed00ac7a09ee17ed13a64dc0c729e690b303d30978bcfbe3e34d985ac116b47edc3bab2273b7337bc7452cd68a35d33b9d3d970f460a75c9069a54d91e78f04ba1489261f98b30c78fd8cdbc77089a0c4cf66e022808a66280258ddc732be93b57460d822d282da9e1aa6193e828430a15c5c605f1019ca1a4e92e435be6dfb069bad651722ec158ec0d92448e8a5d329858dd2426cc095a94ba8d192fa2b73d08496f34870befe48938ad0c149d23cb05be3d6c176bcdb2c335e29c7a77941e134d05707a123f463ef76678f58d33c0b5bef56d2d5e1a6a509dbc673303c8131c10f51b464de90f6b56e618737c13ac4e2f392af7fd3a5ba479d5db2e222bfdc7a3dd3e2adf69a825cc05b51bbc5621a04f0ac4b95aad8c7a646598b39e0d5d57366f82211645d7823e1d1e59a0b06700a5ed859c2e6bd8d9e3308a269b0fd5a0e32300ecdeca578018efa71bfffe52b3732389edef6de06ccd3afd10e68002dad06ad2dd52e2bed99aef3285b19eee6c6579486ae2a6fae1855aa5658182814e72f8ad7a804b4a462369d89f2e757f06a868846bf437098ec33bdef5c4cf696ea510160d5c526775ce22fdf86de18257c3ccec598b85a4bdf436c22101b2c6d8faea517f1c999772784446bd0a4af8002e2db2b4014ab09f31b1f667a27cde5b9cf3ecde030041d3d57c9113c4b4326053456d3e1b4efad9664d9f0ca22d8f79eaa8c8e41ec8da0792593629bf7b2e3bbd448b1c31dfb1586c27a1f927fbb1936801cfe985dc0ff00889e6ac11988da8b9af44036a38f18223595035d6c8090ff794f27a8389ff3496bc5a75bb99b9f2d04095df0191cc0d165b224a48a9387b1e08b582067edbe343801d152c1a3901ddcea956ca805db6791508f832a6aaca10352ae8b0b1cd20b7184fbaeb4c53aebfae2445fb44028605c078c7d3e6d92face0bd4f25f9f73912d9f4964e316af62538fdaff153cb894836b265640b9389912e62bed4ceae0e96bdec5398b160afbe3d707565a57acd30aecfa8645dbec0d0cd546164b039150f9e4e7335dfbc306972803e69125024487bed6044f794831c28dbe749850e3e9f664f72ab734e5218fa48b084ae274d402ea83fe95de88e6b3ba01494c99929b09097c95c208ad4165acc08d59ec606b3c8251d7489e337181cca8ff29d432e7e373cd5fe0f1dd81f4ddfd60542f6659a1ff11354939c39ed8710351cc59b24e2b317e3511eb65e9c88bf5bccf7a0cbb465f59a56ecbb2f5e5bf97ed2f052f94cedf159955ad968c2684d3c1b9e38b884e9c8f8142cf4724d59873b0c5e5b11bbc1e02452aedd3bc9d8cf7fcff03d61ccd906ac8d565510e41f84e5bbdd991f4d8e9485f7a9e77349bbec039ef2ebf1d392e349a857db251df1637dd528182f73269b528adfb2c215272c96afbb8191175079d9c52a5f9a0dc4f1a3a08f285f6c41502b86ae4a3bf6a4fbec8e33e2b2bcea54fddaffdd49c7490a684e79658e05a7b42fd27253e343d95f89e732760553bf672283187f02a4108610b8f716f0f7c58b0612901108680f023352282aef994a06fd8f0c03fe4290b1cbc204a1cc310a09225aea6351fee8e337d7a03c12b43704e164ee8ac410650241d9bed9522133583362d9c49d8087f3537d8e9770131d4bce296541f58e09ab23028ec418edc37b77f820cf1c714f6b4933e625753e98966ce3a66dc41097a89592632c27a1fb68e619850d6ebfd337c056973c51652028b85590e93db46fd0430a80b972efb566b404ea0ce835896239fd114dd8f17f6915ba9a4202ff8380e50087167b01f236c5e4dfe8ea2e2c52f50fca40117308dc3c2e84599ab545646205c1b361b50b6aa10f94d05f226b22f918e489982e1cac5c73a31ab3d723deb1e81781a81babfeffbbe2d46c4437d884f9686f7f63590da9e0bb291670123f95242bfd1cfda8709528b8a179fc71a082bebb5ba4be698cf7e1c03ae5c2d6691ad3bf035eeeab85b65ca1355342c9cc04f8e7970f0802d6f6d29e9b3f89c0b3276631bd0345e2eb6436d4e075e6a471b7dd2882ecd6e0be2af7513b71494cfdcb1174bddc534a72f866f618aba9fc7a630c6d4164c8cb4a08a16bb0d1b59dfeb4fd09b0556da62d6bdc919cf69990eb595b0e47bbc0f074bc8301a76584b5e33d6ea1b3eac85147736804277705095913f5b7cea10f1c6111e8c232c11cce5eca10fd281618af53478381a08c9fd2c38bd060cebcbe08b108c0838b0faa7cb99132858504b07f1b50b0615561e69c95d7e6672143c13cf72433b4d45e69100e7d392992c15b16b3be65ff130b3160bfdd827d838e338f8a5a0bf454dc7a11585d23935b3c30cc9a77f30cd06f427003b54df92d75080480ad849dadb17994e7df7fa4cea7f38f4a7ee2fe94c5d76680da3edfa82ae084b7572f9bdccbf3f5f491aa1927dc6b7074bae72dd6b054561dcc6529bd18d28985c08240867538260f55bdb1c4f387f75a056beca5e4875a1dd54772af9950b4551a8b3aa309276bb82abd87ad3b175465a7f248a757247f13119e70b633531a4e361506d0fd5d8d105d69b9d72be604d8b00b46e7bbf308318116773c6e8a78ef3e91100fca468397f287f9d32cb5b9ceae81e24bac1587ffe8988cdd024aaa79e984d9e74fe3d43e1bcbbc3327abd8163002c4cdb4837e96809f43b52011e11abbda13aa3f2d268e7c9daf82e20778aa1b9d4f93ad8c9814396926e12ec213903118add22c3a24ae957244c654ffcc81173fdf1fffd4003a25161b5c37efc286e2d2b599820a9493809641bd7800dabb05ed8b5664a6d884b54b5587542e79cd87f9e744d26a3a76b086d6607a58de18c319e7495e96cb8c80824f9ee17a02f702dd3040c5e4f95d215e1f7a8edfa90277d136241316022b7239373dd733e86261346f656d7c329b963cc840093290ba69a01124b1ec4b0fc38ea8b262f13c522796ba664ea5967109700a680ae836aa7d2e6cc43720c3ad5b4f610335f9ac72661430c41e8463c2a2e3546995603f8a712a4e6890be7f70d0e6721afe8562afe402bbbd114b3393818f1d5e87d62a0a9f4b6526275c67ee170931e6487d2f94824a4955a751bf4d7ff01a11d980672c5feebf0fa91401803d70c07bb23f2aebcb7e7d1a24fe5a30aeaa929046f7e83af1b14697fc4df9f8b2d31e992dbbc383152b2be1d4fa10e5c220dbfc0502d65aaaa4436f7041026fb68a5771ac9906a9e1f60164390b0b150f151b33a09157117cb6cc5285f3d41f919df153d4777f74ffd98e7b70fc116cb7da1b575b52a38337a2bf8ac358f8074737d90669a2289db10d8129c20170d1400ea24a5dada2b226699d0bbec1eab623eef77bc359264b7bcc882e3e87430e5984896a5b3cb249ec59b4fff8e8894a6000fd4d48ee9479c715ef44e39a5d2c3f6ec807d55b250d2002a32a35da837295a4fcd797c28af415a3ad0e4940f9bb147dfe2af0698931c4f05fae3b35f7430aa236e4ba02efb7d07372d9c3b8081ef22d80b115eeb2d5abee55906bdf6832663ebd25f7729aba861db2cccc803ebb533389d4756f2bb3da38201dac39662224a4635ea323c14f0136a7b0ce9212907bb7a62659d6008365d9d46e29a50ca6ecb71d542c0e4927f989394b5024e62dcb044a4932a238b380c9afac932f1b7165670162f938c6d7165bf377f6ec621ea62a272b8ed7101358c3a98f7f2f9f4bb545a13ef90fecf2051cd9f66ea500b350a7cf59159290b5960c83c0cd596dc572fad955eb411137de5bb74d89b13409903b4dfee68e1cee20d9604d4ee0dc84e807bd59e87a1e3ee10dd1b11f745ab4e1afe6a7bec0265b781b5a852e9f849bd9d44d15f9455e7d744d16b76b8a7e3683cdf077ff1717f10b47c330bbc94de879de409bc1b23bfc0622c63f3b913017fd01f374e3022260a5c248929b871e42708973a3809b32d6bd4fc367e30f7c4390e3ce6af3c85e52db2499c8862c044892186416b26f48ffc437c9f0289e2bb3d4babb4508d7790ebb2a761b3d1f75793ad8acb5cbe82115891d5cc827e13e26d7c214bea0ed2cd8d4154dc988995505f37b6eeb02d17530812dd6f54b3a8f73c435f7bccf51b2dad15857dbbe457b840f3f673fe5a371ff17ab3bd07b2c1a210ac1b111f7fb0be1fef90481b6b23f53e2c51b8e9489a9ceae6455395e2ef437ed3f34e5d45f7bcdb2ec1939d7154dee74c7dbefba30d70c55e094333d573f89616fe8760e3ce0c4726b3aee886f013a15e3c34de13a0bccdc152249764c063d532ca0f9525dd9565e4846a7a215ac72c750c29614f0847003f76925c71db2721e44f31478b7fa3b1e11443a8fb1730c6041ca59c199286a8418270e29e874c152a84c82fbee80f9630823372993c03d76eec9ef0ec312bc5005a049c2710dadb3cdba2f3f2b45a4bffcae58d151a896f580bbafc5bdff3fb49759f7621ea0eb38c65fdcc20a8b8597da2c52f23259577868f65214bd7e90cc6328e63fee5069a031b7bf7e1ef5b48ce2ff7e9bb8e41e9734c86a03e191952db1861d9559ddbfa29b3d65f3539774673a68e0b1d6c55c88f2ab3cccdddb6c43ab0487bf1e60053b60a37583f139c2f7a7822e5e684bd55ec6afa80ac8804d9853aac082f8f9fdcd846c051f7d59fc2b4aea1644d9933fbb1cf3f31e230bf68368890097d1b7248cb8a6f013d4bad0c8da6bcef450f1604cdede6077a114f84aef4afb114d0056a34ddd7e0bf8b953c1843949fc1b1bfe070047cdccf48789ea9c009abd0e50613e986fa09be3f93afc6ba5fecb0de66cf48406da8ed442a4e7a9dc6e1c59417abe2983e3554abc6fbc6a895c8a4c0128f285742c60f5a8c0cce0c5d708242a20d9a24e8b8a326625574e45a1b6f5dd05eb4b6edf313b3bda1190563ab1e83b16a113a8cbc57208c129b0ee1b3213fa2195c3fcd3dc337fc8b301f715690dd95c34491082b406ad8165c676b1f2f4cff708a654ca20a5a19a3bb00c0528ec77744e9ea49f83bfafd495e9a1bc8f0521c2652aca28317abc6f4422f5a637c68d66262a65498431b3ab41c9bdfb535af152070fc2d8d7f629410b9eddb6a85fe3f3903b29afa8894bef6fea2b80771824227baa59121e7c091fb7fc3052aafdc9ed581b72cd44503ff631c1bd470783fc713d51b3eef6a72955adadd4c19c790537bfd87032b47c3a30fbb76bf2e8792a4b564b401b9d96083f8ece6a42992a2df30c2bdc3563a3c0e54c403cf883b02875d2069cd5eefc3afe6a4ac6b19f4a69d8063213f7b30247014b27034fe27ca97ac40b791e0c0e6aaacf56b818c9f8e08b3ab6450e8d40c0c70526633017af15c9fa182ffc5fc90b1b3e4b44547b2e5df32ab4fb1f61760e9f0e57dff11b76224c7c9afbd6244f7539f511f7d8cfc6b1576711c2e2c22940816b462e4e886cee59f2b8d1e8fd8c26f62ac002e270d099a416e85fa0e8998a6250b0a7a9bca1d1725a7babae2de4469dae5ad314ffebf07a9d6b95d84bbd9679c3fba6c6347a3cc349dfa1f1df75b9f7e192ce9b10ca06866f73b22aa3bed5ed7cabc30940354c4f343f5857c36a4534d725eef5cf2b2be02a3d611abb0b6b0fdea9de1ee1cd15b69700269a74b713a3e02e7025bec3686cf0af9756408f6cddf48a642aec9f2d294281909eec766fdeb4f22c360471a68553cd2f2d67b8f5fece8ddf0f290a95a36238fcfd9d97f5b7439af692b933d34e263fcf77de020518b064ca9a026c9a4faefa9ae88bd9c88fb422c6f26d1f95fd0c1008589526299f1f360db3e2fd46ba1c1a4468e3a2fd0f320a7d6a7afc8e3f2acd506e56f52f2d8de83283f10f7ca5f6c1bd5f1f1039ef8598a5116ffef3a16a8ae4f6c04026db6c40f6d3d610adab56feb584498826a63ecacb5590524b92c10a51e94ddd572076fdd38ee43183e189b862bc243167a82f7c16a181988883d556f71ba5386fc62d549756037acc755ee69e281e1a240909bdc854b070404dd21b715ca97549aa0ab167bf279501ed4e25f9a67ee241b718b6621d521b0fbcf721e4d4218633da2d5eb1f26bb4eea2ce2a80e5c344639abbba5f025e90e436d87acf78fc3d2acdca30b75e94867b71ed31338a644c95bc9da5a9f83e571ff1942dc86f9dd5dcf17e51c3097776ced3402142570a3aef40bcac908e57e95ad5f7559a6ee6cd9380ed747a7102b191480eac230ad1f2e76b42f43433a33fa529da810deabdbbc11ca0ec05d106227cd2ab87a4abf1eddf9c2af4c7f0043d918deea3363fa025e9e87ae39dde02e4e96c94568c70a3ed0aa41ed1ab67f99ed49f7cc722c9bb2a745e1b1fc36790f66c4777435b3c0a1cb73530ba59475c743cccd009d712e231ee7eac2abf0bec6d1e6f9a687b2bf75928994588159d99a877ec9d598cd58b559cea8dffabf60ed73f3cc53cab2a30f3c8ed17657e395387aff4a61d2a7e5c01637599f2e569352f91d610a9a9d2f1df504d75625964d4122a3cd34d27465f74e35841b3f476be374a456062f88a8e4c7f5667438c0796a92041a9ca84892d75fef3141c163360f72e09c43e96b9704be60eac45469ba2635708a0f28fb007272d10955d827a1f94f838f3f7cfce6100b293cc2c47ab3a1660c6a8b75637d93366c6917ad84dc419e7188d4b46b0ed832113b2be4619c0c225e5c46a25d4619091dec7a49794c9fb2a40e0fb87904d3f8c4c408bf940a8f4749285e09235579c618778366e48503c27a4b19653cd5560a289ce1ad0965ee918da86a890e9924a9d3a4d7f9d985931ca3d51f7ec9314b754e42ad00a6b76c56de048dddb56ebc923defdb7f8672f673d8dfb0126ce80df19609eef770d2493b1eecd6b25a665188da64bc4b448ea278fdd97166d9ac60946c2d02d208326ad704817ad22aa0b5bcc9a3c5b5a5d185ff8d24e5a420548adaf51e9fc9821ebc51d31cd43e4df7a4748057073006c4da4fe52ed4e7282decb08ea9d70c88795710c87a94aca36b8ede3eeb9b529871475a2d08f8cf71940ced27e7f774408fa03fcfe156251c911071e9e2dc4f8e11565e63dec1f7261c4e802ec60966fbe1f9d495a2b51a7b858940d0269848c255422a6ee72b35793a654542fb9bd6e633fc5063f7eeccee06d32df8c213f94f64ae14bb0bf60d1337927c320ccf9de41d8350140cdce1714f81327541f61a8adf9aadf32ad1b71980cbdd00a0f63d93c91daeb68eb9400ce78a20098fd07379fd857ab29ff63581bcb374a3c324f44b9d94c9547c820c6eb7c974ed4374f52680e55af160c32c6d9843780c450f5743bedb01a13c2011bb8d3ff9a507a46d982957a6807af1cb689eb2932f57c3b610c27b05d4d380bf603380f0631149a08735e6109c10adaf320da9514130410c723a5283fd1cc1e9f294bc451d78c435568bfd5e17061270370f2a29cff601cf23393f689bac7d505398aa4b45477576489bcc35128f5d72608e8ff2838f274026a66db7d08c49ee48f356a315934e8ce57b5058ce6e1cdbf9cfaba6aed3c5844bf01d9f36d39c67dfc5adea213109a7f4650490dd61be9f24c59da7f35fbcc54d4c251dfaed7e45397b3ba3bb6bba83856b6f93d348cc68ff28c423c6e643e1a55f4ebbe4e6c99baebf26b06ca2d52518cb14d5b4934a0ec8125832487e24639ff4832342c4c01c162d3e2040fbae8df0a04c14613d3c81f655fe5b363f9f3ae56e5d9b45b1638ed781a5cbfed4d27b0afb55091ca41832a4befe50c8b8732d2e659bb2f41e00c9702a1e99a2c5fc3fe3b6d9695341801bf2e6a8df1fc2c6e26e707672565466b2a9b470bcc87db9a28070ff76804b852cca94190eeae7d5ec4a54edd0ec6ac6344f8bc5923c61c3b564909b6986af9ee05ef32c6704d7d9d493e18fcbe25b8cbc410427b596e508ed5c97b1bc3070cfa2de8fbd45820d52ef5192f050de2ddb9cbcc875e9a2ddd7868060ba7f8d1f6ea4bb2f9af9a6afb5ff2497491438e0af472d1138f573d74a20c69ec70521fc4d4b1d240ca5d4237a101c7fd5724ab16ddb6866de9b30e9da439c3570e2cf350e5cb2bf4145651322fb8e6f7ceb42a19a9cb540a4492cbb013d11459b1d6eaf3079c8b2b093446a1cb5e3a9cebd800425f2db864f4fa290406bbd6aef28131953d4c053c3fac350539cb63f58a470b8db8ff908645ff40ea4f87ac586605e3fa1c6c12a6f78716c4c355b01308df4450d056b27242d2d29b1eb8170e91d8855a5b4bb76b4d2107dfe71149f74e52a99626b8fd1e374722c496b5470f6c5e034ddeec17d4215b784b99ead983b2cddcee88102cb1d85ced1b37a46db87020c912a2a46f1bc0592d891c92b8d7631d59cb1215bf5742ee961b5dd48fba20551b9d8536360ae496d1a9a7f780bd6a88546754d5669ba6284c9cf68b873767d55c5f674684729cabe8560598d991c8353af613445770fda4e4a391bad36a94c6b4ab02eed20a7c4dd22f47cab160b0450f761d362fa75d6fd232ba248415deb1d096eef42912363e6b7a413a771cd53d5f4a00a7d01c2749de228c1a235c193355b3f386c4005d04c70f7c0a03d17b6a730bc53de9fd9630b54436e4eabff65c00ac52e447bc0a296e415fb36f86f7c65768b64335e619ed481874cc82fc1f57bfa7abdae10287c227a9d39979824613a940a60f3529fdd3eaed81bd6f11885a033e9d97629e9335079478dbb6212e39631973bce4216e866a68c8f01d3e4b7a5f08b72f60fd6541ae5517d0a90fc5563b4c1665daa745eb7b591bd8b9a138065e5e38d4f35ddc3d24af8d18fda043a3e8e1793b4cea6646d6f2ac8a6e90c93229bc47dd46ee0e3c7170b30028bad3a1cfbc0fe35870129bea8d7ea5a2f7ee603a7ae080fd1ff18c5d842b49841a3452b01bdd1d2430a4f27ab821d058c283c9caae643bf1596ea74525c3b266dbeb016cec45631d93803d3ddc747c240f53cc3ed7376654841f012d7a0ef167a1043288d252f69d435758d0b0814a0f3540f075bdb1edfc11619412ffeefa6c53a0a954e6c3fbb19cd9dab0a436400ff2ffec7f7e97589e5e99cda02d255a1ab2c34d8424e4ede313eb14f7411c5ef7469c51e7c9fe66b6b9c260de65d7568693675449345d8df76c5360fd1ca16d28343ef2e65ac6d4ab3e766e71ee89564110df851a3d0a56ea26f9043b5cfc64d98471d5cee660fb625b6eafa781dedfbb285e869b165812baad661baef7b13b45a5c34f0d6e1535bafe314a04787099521489945422b0b43b5e64e1c551c9dba95bd034f7c0e9594fbb115891a9018ce7ba64895d91fba54134e744f065c834621c6baf697d826f5b49485df37b0d9156eae732bbd4c481d7c3504c254fca289a511161ad00303cb33e97a95bff647563dd50c13cf3bb362bb2efa8f6b07b0f80b44bb71b232dc8488cde553b4e69588c73cf87f4374354acd6e90137010712b3b1b766c3e8fc9cb84b3b7122b3bbdc8213f17c28738ec44a1c2d755e10a6e29e80f27653e68f7281ee1584e87b321ffab9623b6ca2785c4976ed8c493ff9abee40cef79bdd5976791b39ed5ab425f33636174d0218f196c10b542ae5353ef14d24b0a76b6c59071059f83c1d2862b7c9a14338d0ecbb6f735875a4e42cf10b34659f4b17483af5cfefd8f00adf839c62e4a5f0c786a901c06e987d243168d8cea2fee948a672fed0a880a9da2bb865640a6f0bcb9095066061d627eb0cf09c7eadecb046449f8a1d0d2b3024c1791ac96cab7b1567572205e14a5362edb342e7fcbf45af8159a289d53e7aa18c566088af950c9ff639af08d93d2681cd1f4764dc4c93f399a50e3f0565b493371aafe08b127e0c06fc83190368ce5295f2c8805753eb1c67ff4845d4a3d366952c6f681bdfd510b5bde595528291601c95dfccb9b69650317692d1278f3cb75cf9bbcaccd90e6919657dbc2d2b1323729aeb2e00ded911e4ce6ad45f12bde461109768ee19238adfb17c2371fe81011ee535da1593af4a5884c80ccbe40041e9f4ea0d1a440a782f5067740aee2d79037f56a1876036c9d04726da09ea7b91bc8635e393d0b0a9a8ece8a64bbd7a83b65181cb9b247b7071e870e7e0a8d5575909700ea9e6aa4c8cc80fab921823e0093dcaf708aa4e760563fba55729453bcdb9c9468e6b79c8c9f6bec8e8d0b1c23fa5192022312ea1886535e1d0210e57baa9c7953e631369364ee77c8babe7d45a1b4e4681ebec4f85c7245ab54208cedd8b90280bf3ee4f1aabdfbf63e66012c4632fcff259ad549aa274357cd2853842e08b43b7e41636bea04d5b57244a3ef3498e437bb1fef277c6828462b99ad0659bcb9427f82d70c7120c979e21aeafed9d53d4415f170977ee9f8d80896346a3d4c7f3f950db091ca5357f6b918b86e5cae5357faf05032297179b4a2ee755ff6371a63abf786ea0d273d08b232f2575e37ece0799eb09f526305062b366723a82519f36243f17cf774e3739eb9f5b6441d6bfe2383342e90b71e0c57a8383ab7bc93485466662bffa486d656c3e6b7cc5aa887b921e3f1e9f8aa0907da4673d7f22ca4703c993b8624b9b66c58f9431ef86de86a4c1188b591a4c0d41f722d2b3f8342f17da4ce397235ab76c07cbf34c7ace69d705b5f1932a1a1f6046c94fe0b0ebac44a287a74b72df29c8b4b7bac3f1040c4d717a150b443c63d0eb37beebc65cdc254d7c1307505ec821ee78ea9c161febaec3a085dd1dbaa0fb34ccc932aa8db80b698058d28326ab44f012c5026d69e122944a01f1354c2d349ff7b942a6d2a59ca06705a198c8a43f72b59785b42f9f8ada781b015bd542b1196c151c1b21b4c0142950259764e37b9222bdc1783ec62faed71ac433379d80748e05f5170ccf5affecf63b88ff098ae7bc2821064315f009187ae585aac598f6169d91b9d380994b0bab3b1ed7bcaaca9097fc53d10311c703603e968a37119b318c9a5b861469f4f0236c85669462bc2673223829d47a6808180c8e9973b9d3baaaf0b4397f33af5318bf689d40cdd6ae82f664a316894f01f37e36d636b5f5f7ef1563411187cbccca81d6731fa44f08fe634297f4b891532a35255168411b0ca7b5294622ff15e5fc46d76b9df8dddd9513b643c6aa4a347372a55fc765075da188aaa3de6d360c60056540bbdc76e6387f2bf8d542ff88de8d689a22481380366f42931e6accdff266419bf077170506fe44bb5cd4595a4791cc9bd330124f48dc7831e886ae6de659694b1d40231cbb3f28a5f20b19842277104612de73455e7af414ee952932a405f6aec879fb727562b853c92aaecdf2a69e7373d25b43e232e96ea13f358a133009b347f6f453be136d25357ff19415b78c71fc570f75471720a75cc60d87a415bdc55b4a38661b22794651eb1101fc492eb28225fd7519bf105fe2be8081e722dcd8382472c42c5be3d2d6f61794f4f13151ee7a0ecbf4b2395dc283947f29a654cf6dda157d47bed318757a158b7acfa583136c15b9ee7d1f268f68c72e19aa3b27e26f1f3f71ef6c15b0418d5620222ae31a1d19871e7e07555e0ea427e011ce63013c7c488149e589d47d15ecbaeae6ddbe5d0674063dbaee9353bb00b6447262536519efd5e2be453cbae91fa19c6ea1db371e05ec14b9739774ae7cd00e0b7d94ab341d7c2e94a4a953668280d2f7c1775832230ee6e99b5c9615ac0074e9879c6683ca2f52ddd8b81020ce4ba5d3194d0d4a2aa2ccfd7a026c0c6972324e98c40372042e8b1728edd35cbed26c29afc413a2bf177ebe710ac707faa93f8665ec8fe8ddd29e335b5bf4e7ebc790a7c2240f25ec7366d0566577775a240e5046379d95107c70e060b927a0b846d6fe9419f4bdaa6938041d34fec57dcefebee975bd98ffe3efd70ba40f11f34d5124753f74bdd6b8a66709572298dd3f9e626f20034780287d5e59de0c0837506d5f9bf221a4a321c9448f974349c522cf2c499f7c4817ccb3bdf6cef70a4e49e8b45f6b123bda23686afe5ae8988e2907a2e59622681645e3fc06750eb6d841a6ce762cdc6bdfe28873a47beabb73b41dee8f183d8aa1053a89b79d25ca3fc429c328d0a2a880181283aea95e0205eee1dedda51241b295c39435652f57e54214fb62bfa97a22ce0eeaa65a8520de541807cc7d2ee3d3d3cc9e7240960a942357815c1a536e03a52884a1a8ca7e44fd274896dc569ef73b2a486d9d94c3059bb0374ac10891a1276002cb998934f06136cfb740d18bc6083c0ddfe4f58ff246e08d34d8c83760115972b23839dc86c84df7f9c9c6b3e33013aec13bd6265f70af995ad3d02251b5c27bff83055e12a93c327855c9baee2182a517a11edcd6fe6e6fdbe3a0e0941cbbd237ebaced36fdcbbe4e8fa88c53ab63cbac745f733456da33f2a358a124d51e303d306c32bd4b219c3be8311eb9cdc0b58e7fc0cb0a1f243817b4c1c3362eec08938b882e5c348e162996d2b830d4578eb95e3a9e07a92f6281791e08a3eba3f40bc86bc2690564a1eeeb6a8657e7be80ee37b77285e47d30c2beca63b82567b7144f6594a7f92df602dfd1873478326216f4ce60dffebecbda5bae0464da15b82237ba42561ed7a278d6a8554a833983edf180198c8b0e174039e15362891d6929a97f946c44924bf55a05887a7ec03a2db562a65dc1a85522e1347a08a7a1a66326a9a0795d4a67635abc891f4b831a39b7d97dde07ce60e62979e0652d192e5e5b39462b7a624a51482e577cbe0c326166fe12c8390e5515fabfebc46cb698873cf1faac5848e025215e9045352e4127ee7a53bac847cc007f2da3628f42153b91a762b38ce68123d595c8fb5f7ee87757c4b64e854e98548d682942070f0836ead99ecc8bdbaed535d21842a23e533a5ca55dbd89c0ad99ff1b5f9584099a86b38fff4055e08a9959ca2603968259a80a171f55cb9e63f6f77aad1a4eadad6948fc44ac93f7321dc7f8d044b76f72912e7ecf06b33db75f83fe288af430dcb89318e91abc464196d2af3a1957a67f4b5a1f077f6c708de7c835d528297965e5944ed3178bc3fd78b59450fceb2e6f8e8be7ec3605661a015ab82d8c81011b3e05320a241fcd250f6e1f07ac424095c698d4599e84e59dad93e552d93d999b9ac81f811dfc940f70653e81531e792352d6fc0ffd403429c229eb237cd4cf755307926c8eb40ce9defa411a1448b8d06f632b54bae4b65153139922d2f4ac4926b6f1dca093f1a18a89637027dce435adbdaad9cadd64ab00556e85a0d445d87e2e8fd77056d237be68441ef5433dac2166611890632d0f6ceb7c454c69b70f0bf4795f59d766d8e071f008a27dce87c0ec38182efc6dbad6fa4e5f4e5c9fbca60f35240587feb7469ec982b7def2a4dcf04e2a17a370a999a9afb07ec1bd450790ca3ed2a253dc2b4b21753d29a870630b30f9d4d32f9f5386a90e736cda7b153f9a746e82d3baab7a6f060d20273f72e99ac1759d6f9c3d6bdb57454c3974f8ebc44f2f30f0a72f068dd434c8a9b8183dfe2f9b9999200ce5cdc7d80784d655d5731012085b05e1855270e9c559a854c05a11f0270f2e41894462022c3fc6131d68424f905e4fff62d1c64710912b0700e4f056a82734ce1bd6abe6215ebb41c8a04f435b7bdf225e838d5e25f99319c8377f97c367d3f30ebe53e98e8c93f6bbe05821df2905d87977d69039078fa64082a0d6cb78c4bfd5558f60dc283dbbe77b3f34d4130c2ec371deb329ed979b7409a7183c708b888024fbf433adf741e0fc0829a69c7696200f264f025821f5297ce5e1e39643b1a8733049ba60445fde0b13c2ef060d21b4b98324ee6673433ede93014524321b6c855ca56772e94b014909e4d73df5d5bb7e2e4991d12c3f67c52be7f1397c68ae51eb2716ecbdfa684a819ef2ea2a70b03120eee990098b060992e13b7cc5887d537f0a5567e0e40464990a704f8b289fcb408e60e02bbe7736d5121716fc463d6bccce52eec63c77dd1c4869c796d84b502a043a875709d0ac2abd0992761a2e1cb0bc02678a578d843e45a502ef87abb51eb528019da2b607a90261f111d8f90bc18ec57f090fd4ca19a1a4cf7c242aa5e106cafa986c3b7c10dcffa5f8bc61d408832abadc7a0c26df47e5c7f19a5bb765f08ea19adbb546a1be869995602155a2c458963f015b7be3bdcdfe9c37ca39bdb06a53d0fb8ffb1467024502003a88729b3e77104a7f31d462f84e9cafd2f6184272241964cc77344b030c288e80188868c846a138397e96c2c03e9ab47d6ef86b36dc9cd17c880d179407bc67579a13ea723cf6b94a605e644b15947cedc49afac2ff71936b043777a7a164c38911969561866ae613bb39b4b93697cbc1ffed2d011bdcbe811ccb46748500026e3b9b35516e53657829d603bf0c9b23d1f240f85706cb1279790e7d745f221155f63882d2c61b0b3599908ddacb86772bd11399d56540507ace99efa343bd7c79a90ac370ccdf676c90e520697d434d814caf95505e8a5cf3276bf2b7fa3aa15032e656f311bf2e39251bebe1f5a688b5192fab2b4b55c44674c343b6e3221b5cb3081eb8b812a52d3d50bd080dd8d7b57563261e6080c047c42010c46564b9c3a9b898652d171b930a2206fdf228344700d54274b41b03e147d98227fde1f3f8a4d151a8f8f41b68af3b3d8129e1334e3e19025db7950ce7d9fe293e7f0d4a666a412958c04f51db00baca5a8264192229f135e49fdd69c8ebc6acb30d720ecd5bd0aeda9db715cdb92d8b03e78335cf877b41bb72235b798acfbb31354f9f21a28125e4ac17adf2118d27e66d10a103d22bf96cff0e763a6a9d4ab7979066926fd44a1d84f389f38e642573af7c6a09256728b67acd21215b5c4d0164ef8d7df965e2a2942f98c1a5bb7a6a3ca210f21fd7271c1231ac073e9767a8a571a55c3951601da821ee1a4a90686d95cc370707930f20acbf4827c84c04150990a00872599cd4295bded2ecf8a03f5d9e5c946063c3b5a10581bc47e19b63eca516ee55a71a0bb857fba657f99978f53f528ac72378c390875b66aab47a2c5017740b29a7b0e40874fd3852107b4c1f36d3d214f875f13816377e5c0d3a05583de07269d7e42a1531a178656018ce1c032f2de07d017c14f2cefca0aaac042d12de8cdda79408f920585cebe860cec8a3b8b138586edd526cd6dd1c178b86bc130650fe109a12198b69331500f5ae5608c6690c555fbd469450f732883026d9fa7124e2c8d6c6fdd5047397cac9e9ef8f6d90c2f914b3f8d8bb026ee992cdb26500d9f641c986e7269428145cdc7668f7f4bc3dc67ef39dd6e9f2477ff9d7caa3c5a821abf6ad0bb37a3b3218de72be4ebf0c36c224afb31725b583310dc4d92ad945dd7356b2de5ecb550683fc1ab79e77e00db275010dc144b35b7e280cfb2afe960a48304c7f7d98f972ffd1f9d38e8bd9f83a20a6802d1ba38ab179213004e3cd643792cc716697afa204cc0144c30d57a2c2f007fa8e255309ada073958287eca168940a23e58d301efe9d457a3d1b7e00ec095f8304571fc05e716a85af0ef4b3574102ec11cab5c82505ec412717148379cb55c478a44c62d6a3286de25afe496fc3a9fbccdace6576dcc2e1131fa89d2d1a377cb0b9e88b92fcd01c1817148df5b57b6d103e1961d401e78079f03c902dbfae14c55850c515efa6b2cf0664db0f08464f9d5433f1c24f72b07a513afbc0f2518430ad0c9ada1507bdb9ec05a6cdef7bd74e01e0d450aeadeb114937157c8dcae41fdfe432a3e2b39307b255b83b2ca7da6ee09463df4e2c27325bad3c0a31c4d02843e1f6c2172702200cfed2e7f38f4471a78021a1fdaae4bbac14ac6ae47ef6759fe7e5e1fec9d4d2a95a204e8e9aec39a2764c9c0e28ac4b78fd8da53589d6ab4b90977a3b8ebbba43fd506cf3b9c2439b5325d0d79debd7b0643c56514f673402602ad96657bfc168c96dd8be288d6320c573da8a4dc8ab2332abc3bded09d41213c286bc0cf2d0b4db3da0dfd418e1b8f4232c1ee5b0e714e43e1300b9e8a40e8a2c2f477e4c33f798de2bd2b678082e913c303bc7ad649815afe2a049232ff5029f1d6948eb6e7d1b323331df749b208c4b6b774a1569dd16613a4c452572bc690deecd90f9aaf84b1731ec695896e567b3cbd096a1236806b7c93c08168b094c149d47b1edf5f794cab8a32a111850645f222f2e05866212f9d0519ab6d0dd28dd68c10ada3372039232158edc58bd97bbeb222e3cb57ed9fe133f9a9d618484ff1d223f89ca60940cb6a632169fbf9b154b3e16e9d6bd60c0a300dd7938fab58d5a355fd46c91d71d4bee28f710e239315eeb2e9b1912bc4e0b3089903cf464fa67befcff5647781017afd1bebce3adab4bec13c4b93f70a59c8b5df6056c92c45b69ff7d2127d9a9daa82247285d5facabaeeb8648b5e4cf4a0cac3fd39ccec075b0d79ea2a1fb6db9871c0b89072720b91e3d0fe57a2894a5f8fb4fe536fa188fe1afe50f90caefbc96d5175df9e74aca2e7f3c4e44a39bb21e7da5629c369650f82854b4f54ccc618d4d80eea1dd2f8cb70667638e059cd9eea1c89c870cd1e338a65a1c1bee621659bf16b2fc7121a7cafe67d739f6381f5bb363e536fb1113ac9d8bf29887464b79f0bdfba74dd96bd7db19e42775792d817a421e9e19ba358515f3f83408b26d77782466482f0a6368296f16179f3ddce14246976a45a3b138bdcff95c864026ca5686f0c05bf59c4b84f7d832e6c4ffd23017a60d63a178bfbf98f14f060bd4022a22463f7a66f468de9e12e894274169c0f677c31500e29f076040376985092d8bed872dac8fa646c6d6d3b87bf6fcb4f25fde1ed57b2f1013cb64d4184238f6083ac28990fb53b0b261941bc4601e28c9cf7fef29763bf8d2c23c2d27611d66dcb29ba0b7317fc07365fda21df8808d374608c9514b15c4adf0c1d708f39c7079b5fae6a0e99c3a5fed926726e7487b72a1163cdab9ab220a2235291ac7d9ff00179b5581c026f2fd2ba0d771dbad70633b22a3ac7cb188c381e12bcddcd0f96cbba7c83f981fc441825d402cef7922bd3442eb95bf46d64d0cee1c6cfe17e8e32452ac4902a3618a9ef1157c345447ed089f02665eab8f5965a02ce48f03d71c9c9ece5290598c4ae9a704c2b7370920df64444fbaab196ccad81e7668c6e1d31201299299d02006f46e19a6c9db85008eefddf861b732bc7ddae9222023e995898811dc479bbba6d2dfb020451631c71163d34c6131a5977c4091f3216bf8b142760b52991e0538bd3a245e1ae1bf2a8aaf588f0beb43ab84c4e0a0fe5ea1fca58ed22d35f350c77fa180494efa9e953f67609d5c2825a2897ffbe8f23f30e76e853b27d3ba6b00494c09e58c92597efdef005365eb8f3ce2fbcb29227812b634d937edac5bfc5b2fc28f6046b661a4a6fdf89b10349071b58456f01fbc769dff0c764ecdebb6a6406a79724ec80dee4c72e1b479e0b2f2c00ead81b3851ee81b781162cd5aaa9745e3004cb1b6559b170f77367edc3d41923adf41204379d048c7b4d3b43f8082d2eb389ba109734577db542171614cbf361a83b73f1822672f50ef41b0bc43fc55ea40225b4f94fd89b540863006be02ad0175692095e21e2b6d5e644d5ee5f06973d1f407fdc1e349483266c36fea496b3e7c76b7b37abc9e6aa19bc0b01b40d57b106c2651bdcc841fc4c65e5d7c648fc4e3fb3d2614581a6e5af49f61095ecd9e6a92d96b5ab4fc26cc50897822934de537ced4066eaf8a7b8c745bcaf81054e09a2c20a042574bf31ddcc4ada98caf5accdf086ea960cc34039e13a775364c34df5a38a0d23834ccb4a5bfc6480d689a13c4d3fdccac3b99792b50772431199716c821a0275b0f128b5ef4eec009563431fca333494c8c4ee8cf16cb5c955856fa8a43c4afe253d5d99382a9929b71ad89d33b74edf3a428f1cbca0c4b8c96313f969571774b4abe866284a4cc5666821fd1c99d4db05701d71763e625893bafb402906cbc9e7659bcb676af2e43c733fbf0c2b07a8dc9b6225ab2e703293696383893dc280f3374093bfa05d52eca710f9caeb8a6535ba3c11d819ef2f54d39928cfacfe82152c6cb2844750c1cd521d60cab6754a8438aeab661b29b63bd22c9d4f1488489261ecfa73018a70d9bab810d8399ab2819b9ce9aa080ba2de1fe6341331eaac46590080d724b1d679abe942df684e78020ef5abe2adf30b795d4fcaf18892743f2bd7ce36aa996e186e585b4673b556778f3b34503e058bc3348c107613104ff0183a3bd6210d6cd82cc705a27a2fb8f35e195639508c950a202016b1c2509d6fbdf2f3bc3c5f797863e617ca27b51c64cf0aa02f6975d7e5c5db659c4a63445f166626d438ce84ff29c1d7084248910e78f1de9654b113187e2ee658b14bf0d41ba6f4e571151b9105825e2dc79b8e9eb0d3d88d9e743af0f428d4219508188108e85d3afa0576e28aa60f7e74d3209013c8656f27dd0193b414be2acbc9192cea5f3322dc543103fc22a9b12ac4229b01bd8a3fc4f0eb45008a2f458b35bd123ee12ec3246cec53feb4c2ecdc66b7c39892035378774c75490f5f8c6c19c3548947c5c04aae80aee47ae6e960c8f714611df793626ae8144e2e35b8fb6ec411f87b31904fdd7b6526c32ef820f96b3585dae867b2fc7768b26e4aa60225257192f899ef7b691869d02ea2a217b6c2973ecffe718a9c489b693bd7054911a3911cfab033fb44a9c3d055d33164d9d075193d7155b9ad62cf7f5a980de562a4d9e378138a5b585caf9946d50026ec35a73bf0c54a8a54b59ed901d5646ef6d280f1bf43d1f9f15351117e2a488d15fb99a292eacaf187b96677f2315307e22e4c173af39541b824dedfe51c50a73b2d8367a4db25b14e5f92e5761671361c73a959bbcdc01d127f3440074532129c503b24cfacb6b192fa98880875f2250e3f5ee66decf84774b128535aba0976cecff1256fe923ff04a8575309dd7afe306b2f58758d4c1aa9b5ca8fa123676f8197b1a0884266ec5f576c8bc1ffe7b4b89dd26a051e5c65f377a770c1e5b7e6b938f7a1049ce3a21940041f9a5be720d3ededd602c2f5b0b5adf782649720498ea8ad68edbf89a88cc33e875a716ec973fbca0ddff74bd3c11ad0ea2a8decfbf08fa2136e0bc379eff1863caa3ac5d8a6f13d31dbb8b703b78c6826a61848919ba002b8f1511501aade0ca620b683833f81d467f1d05d969120ba9cd4d03ee7881f89f69af9cc11a8b8c441b3479e97ed3549167a68284cf1b96ecdf5dab6011ec3a01c2fe18cda3578f52120993ce7240c318dafcc108ee877ea06d7e2b2efce206e22e7354f0e393f916aac0f4a30631f99afdc0f774648fb5ffcd0c7f0204e82f8ac91311bb7eaf18002a7d3eb4918027c87e73c68c16edc6f4b0e71f4666610f007ae99796fffa24f5c07f1206775254208c18c8a5b40d7c50871d4f4855a5344ae5266e397dff4c611419db0d8d5e204963a2e06c9253f7e378641dcff0141c80d854a1fe39d751a656eefb61a61fb3a9d3b332f2c6ccaec5e7d6e2ec769bc0c22446224d80d03b11ff1fa733a40742005d4f812492544d70e58c31f45090a0e742bfe6f45094099eea7a00f92f304c29ba76863070754973b4e323206a613fa244194e6af3427e7f8652b4f699bc7e1d0fa385caa3a822f84186c1a5393c328cc1775dd599deb5d84361731a6251c1c41d46dfa5cb6791b5f64ec22540e2f3e189996f16f1d924245dcd3bb97444853bbb749780207c5decbe7d29507922c20820ddef0e83f2fdd5721532cac79186033bed6f681875aa7d4e78b6ff9afd16777ddc6ff4c62992617385135e1512b2dedba9864393b5c9136548a73e1e69eb4933af5534173030c5cd92b4d054104f6d20278977fb7d1b06726887d11fe5c52df8c45f6ab2c1638812f71e10b1aa8ab07c3a23745b3cbedf3820a4c37f47e723c7ef6da4fa53cbde5077249cb404150c9806e2f6766c3a40b34ff1ea36aee7d761c0f7c9918380ddc4a1abe2b33ee1aeeed09820e511c1944fbf5cad3d12dafb63d9bf75e2356268bbdecb7d5f5ff0e888fb9c4418f8a5fa46a373e29459fc8c4c93f48304dc3b9ee5e73f1a2404744dd9001b9fa530fb3f132e49131fa1bad533530d9a5f1a1d781b2a07521c869163b5609dcec59fcb897e790327d49b319db2d1658372ed37f17c48478d956b430919c27e7fa4ac409c5b8da03e0870808cd8c009af950aeab1b7711ddb8a86a13dfb2634fcb4fd99f0e6e06ff219abdc645e796fd3d24828bf4202fb04117435ed1b825e854350b0d54aaa8edafd4c5885f4089f404e13ab4128639719791224d1ae3402cca6a50c0d0eb30b30d071a9286b987b4f668b200df995593b9e34600a89b135a5a2add7b476f9956cb8c0b3839024fbbaf5f82be7508fb1cbe68c5cf378410830bcc723681a11287a6c58095bd758d1a380e4f892e20dbefe448bbd57612ff79d514e67ef10ad8e3f2862db0a49f4eaade8f841b7914571abaa7f159f89a7187e4af3d6ed47dcf14f6a044f3558d9779541f666489a79da039443bc8af0e18c3043450bc726087e6c4c2e14098c8a30d496f66664c8ee9051f030282134833657ea06545acf4c18d89c63d6e4cfb9b8509387b8bf6cf3574e476cda2b38caee199ef9326ff023bcf8c3252bfec7f31648983c63273a493917e8a568aa8a579cccce4a4eca72925ac1a45507caa458f815a538258291ba210788b44f611d1de9d881ac1f429acd4fe2f37011206f7970c11bb406917b105bec88109e9fd3de101673e3b1cd9fd180213811c3716d192ace1d8d03b7e1c39a321e569c93a043f1732497572f44b84e3b93df242f5f8d09a4062ec3186b880d59f72b14a3d00e31cc2f3a40970031396cde5e7d9b47b7631012079cb0565deb89d989c0a6fa1c431119730c82d73d0d3142a72701ca78c237000a6e495309a81f80be3bb3e9b5e196e10da55c6007260a294343905c73d7fcd6228cfac21594304cc8154bc6ce82093bd2eb262f7e94470fb3d697019a22e3f6a6816743a8c2b0df74c3cfc5352a4f379b8ae962bc101d7785a65bb62e43f453ef6a8d48c1a6a0411e600e00496769e61295ec0de5e061e688bc36fc96c256ed3613b87034b69c0e835244dd669aaaa4b9ff98709ac877d935d9edc8e0e8a7f6fe90b7f475bc31c8b02a94873851ce57a9d637f4ac94ff321dcd4426bd90b0302b7985ef76aae69c83ff633fdc3c81f1197710989b9febdd2ce65480777a0265cd0576739f6f91908951c8c7b3ad7f9c826f6ce832e9963a241981a5494d8bf180969e4a58068ce614eb271de1bd62075aa17949aa7b602fc57109e9b9c5d92dcc8e3d44d644bad2acb04d495951a15327ba3370a6ec76ae903435493690cf0c5cd30a78c702a7e9e3e1e497218219c4d557a948c9edf121b2e5367d53f4daa51e7afc23234abaf329334609b952525477561184cb93a3e35273aae37e0faf38a9dc3736793321413259e1bfabb1c321f762f9f8141bc4067867e7db3f850a736f9a2d3d05446c40012b0e12067aff77b8b9220723de38fa48f29ad132bd7c576d7d692f1b64a634405ab6416accac345dbd72818c91d69d6cf7d295e693c16bc28f0345331f10ca9442435c971d116504ba3c91ed3ecdb1d894191d4760dd772953dd13a58851b3990511ae0b99731773f216eb6f84ac456b37d1422158f60747d2b089dc185978dd7d210b2666bbad5234d12dcbb550c4e0d1433af27bb2d48d02336f0343493c497c941446b77d6652549500c17c981adc5a8d483e651b1bbecce12cbcbc2960c44305ee6443995f94780f7bdd2cee4e92dcb2cae2688f56256d7d6e16a4edfce277aa714c1e04a83037ca27adbe63b461f338cb1a2e8e1329be9435dbf110ed8d7fc2e051294443ece3285684097c0031c10fcef02683444c5988c20d4f0a3e013c6319581794403b56fce999c12de27957411b9a3fdd4a771d4eb7841c74f122bdba2b89c5e7890ad77786452b397f5be6beac936d6f2856129c1a3d3b89f339f540c3b77fd4a8e8ee8e1a925069b2c07f7038def325833b0c17c92294a1f408567410c72b6bad03591911805ecffe3582f256fb997d7f7785ee879e24fcd030f9485600548957cea1e56b68a5789812286432c9bf6c7fb1e8742f8e2cd2d3243dce0c5bb9a9a0b2570240d3e8338dfd7bb5594687a0d0c4b9281904581e2fcd644af3abc6cc6c9847a197061b5c2394e87f322ca5eb6da9538968545487be6743cd28206b50cda660be45068b640a2a596808c08582f1b1f375e2605cdf2e0cab072c38c7d4484790886261ebfee3e37fc14005a4585e2539192005c29b5fb44b6963b9bba48119b3e36fa2a4aca8cadaadc27bdc8d9ed0f6b81114e2630bc3fdf9a26c3397bd919c5b63ee9f9bbf77811b1a0262763abffe04e99b0974bd0b07e414c7c6daa8dca4af1bc09ff02198f8601e77a67d6a6793ad9fdb83d81af4f92fa3437d408d66bce053fa46e0181444c13dd221aa649925a8e43564d3d7e5bdfaa351d7e696ecbab29c23f010a6bb9eca4dccde30ed3a37a0801a106ec1b65b3145b860b8145394bd4393bd489d52f7e5f743cb60b3c0cc7e4ca6c801a23309c9e7b91ce6affe428252b71ef14955ff0a414c67b099485886d7e8ee048714545a8d197db6f17ebcb27383a54b6a073533d29a71960085c89a4fc7a3bac56337b44e6959e60a5fd07e1c3479efc8457e3b67c4fda9921ecd770e3d8626fceda8b4f52258e441c962f752f29fead38c01cb622f92efb9b994f2d9e6f239a38bb830221fd99aca76570954de02682a81726cf068ebeda30a83a44c160487c2742abc474ec0e1c5dc6037a73c6d1a7d06cb3f78de62b0794da88fe31911c9f4c80fdf64bc303d933c964fe84cf339d0eacb2016264a4336da59924bc8e9b35d2eed046facdcd6e6d1b856d8389d9a07f8ebc49a1bc39c44a654ea29f5b35cbe9cfb3ea9e3ef389d3af50ef6734d698cd78fba88c06e8a6dbc56d7ac0a43c7e0f999b430897ca79b4a6582951c4e1439a4a37d10ab649924193f79ec77387af9ea96318b3aaa3cabe4ead7fecdc0af6409b386463136e366bc6ae6358b482f74369e3ee40c40cc2b0740edcfff1dfad387beb962049ec472d2c865ca3403824f8faccec75d18ab019e07171ff208605c4eeb34de5530ec8971755dac44001d5c903e36f3d41f78e3f3c648b140dfc7290aa35d6ee3c38e0f8ed6271f463962ae4c1fc9bc5759d9fffc3857f3efa13bfba82c6da35cf63de0ecdbf07a8d580e52bc90668d508ff0e02decebe359d03fce9df84b8b4ddd3b7233f27a6441dc41e7044d1741b9c5f32bdbc5e0c1dbb584c6d84695880f51643fa96e673ca571d95bc9301e44bd58ef207d12dd4b6e7ef0a10631f0deff2bfd5d865e9f08c612f920577f898ba04019e439275bfbbad52dd07ae0d25bbb56fd22c7faede782ffd90e29c1b4c80d5981c45189026bc4a9ad70b59867730ef1239ded8c27a45de1a4fe1d051ead3f284f3139df1413278a5e374336a290cab20f17b3eedd8a90dcbae1eb6bec93caa6afcf62cbd7964a17722a422a9be55b105db59c381352ac7f526c093f91586cfe85cb3608a0136ff5ed02f45597debc9086331667af9082c7e951a5c6fb420d2dae3805d1cd34364c546e38d55f05c88fb9d10a9da7bbbd725ad5e295bf47bc7c5130d17ba16af471d6fb33fe54c262740530fb2598e4a6138d7efa15fcf18f8936e360e2367029c1a9013cdb08b483ec0e344621073e2c576b3e17eda428e0d790b586a8cc45f91762e3b24eca16d94c104c5f48919045cf54eb800cc78f6a072a38609c90d22b48e758fafc1110ac126f086902c3c336384dfc27d25e031e3ccea707e7c1be7232dc2e7ab308622e7903263ffb45ac4bf0f721010493484a3dbeaa349f95d3ad0881c105ce53da8dc7e342de5ac4ca48bedb650b0eedb28c7b3f0d54708851f0c2932e1f12c89d1886c7a1178e58f4a5d9edf984223fb7dcf3e2bb9604a526b65fbe906d4b018e4837d4dd820f1a3aa5942e578228533c86c006d421d75a28687f80d1095615c22e3b65fab9dfb6dc49f8026b7d70659578040c95a211f8f5d7b17bf9dc74d9fc4f5883ecca00e135664d9f856400216794a570c388b950eac4a0fa158188bae8c97a5fc3e8f7b8ed5b58cbcc3e049ca2ac4688be9cde2cd46e0663a7e8ca6a89c2fb65674ccbd2b304c4846606085828ee9772d72451aad6af76ce9616b9774212699f6c7f7a5331c3e4da71a8bc8122e6454b7e7e9183f324f6e9a3dd55aa4677202f044d8cc06506368df314e992251a5142818d189873bea6ec69c5917bcc89832ef445b82070f2108daffff2a4a6aebd257f191c1a1b8c598048cbf0a26a45d95c46c6460f016e5efd47198053babaa30501406f071ab8c08b835a190e826b5c6cff3b4619e975c5c5a4e512806a8a2b2514060a96cb26821c7a2415a6536b68eece824067cdd2e241f1c6cc5865892b68ef6bfd2c7d9d6cd423e3e41e59f8d436ac676bba04c74563067250997b626423b4cd6fcdc1cdde300f75643eacdb25b8ab7cb2aacd05174511a59c34a711229ace62d7b4f2d7f79b988e3332d841192e5f52995eec05abb263de650ab9ec836272c0eb90e3d73a0e7f647b69f04c90056e553892562cfe26a7f544fa1656e11dc41b6e7a190b50e9522f2e7dfc11d6d841901d750566da5c20422f91a2916af040f4347a3f16f78bff9a62423f57422bcfcc2f2730b4b0c91077dbf3d6197c999fc17bff2c4671aa440cba0206860b887b0dbad27f4896b56c6d07525e3aaa7c91fa57db3de081441aa22c34660d6fbfc795a158bfb79db41a1ff271da6ad184ad66f1aa9017a73c8d00fe64e153e7671417f7e6e6ccae5a7aeec541648e2e2247c097b05d2efc8cc40fefb0203bbfa2194e4244451461721ad7b63541c0ac71e48b5fd541116c46a13807a38bf6209fed247f917f038fa8619d2992e095b02258dd7c864092173e54074bbe12df68f8757d252671f91f8d6ae1be6116586483bdc0a8bf5a2b38d905f4503be1c31ad2b4515ff7c718978477d29350115a3e0d450011c904748349efbd4b624315a91ca9a327e16a718f376f23afbe9a1f670c4bbae4aa19ecca0b8596866e3559d133d03091984e161c371a64425acc34d694d12b7d76d7dad32eb42f7281dcede3d1a682d3712fbce169437b563d85e86a6a6f61b9c7e0262627299578d74d0d9c2bb2ac51bb9936db3e1059a552eae9b3ec3bda99676584304a34d1c5ef8f146406de418644001833c6c6672399039d0d0a39b58f43a6557a7496a6b6f8a625f2b872476953fb7ebe0fd5bf9abc92a42cc19a864d1103b22debd68566f6d834199559ad1aa125b0c2c6d306a71fd3da41c6f2037f4294dd18904c3018155afd111e82efcd9c18b864c35bd18e42a15146c3ce300a22c90586af43f39b5a529c9db833ca078e26edb8da56d791b9d516d880219c92a2e1dbd9fbc04d60fea5429a6346487ffb332ea79711eaaddca4cb577a70de8084db1f2c93d9541cc0204374a6c2e894e533a76a1b0698bf402acea75b3d8d57d2e17915c8c1ffc6e9e7e7434f9dc3186ee97df1f70c1468196c7061b66c69d293256a686894ed9549d864a543935d2210ee9c21807b70086f68117070a185be989538206de93fcd3113e6d887040dbe45dd0fc8ff7f563a3fa8f86c77497a10af8809314d097aa30d9aee7f69066a55e7621d161c758f366a8ed5524665602c925cc554c6dcb920c995c7d2d58c5ebf4720dc54be3a662a59be6d0194442e651b27acc4cbd8dca217cb2c600b8cbcbf7106695a655a890fee441f2030ce4445b7f782b805d6647fc894955059355a544929d1d7383f224ffee1f051da8828de1feddbc07272d8e32d8ea917e01a13966936ca7e990c4eb9a74ef0620292530bf156cbe024a23b0cbe1b20e0a5c9ff65098245d8f535cd120947b877469dc10ffc9dea0543df9ca9759859d98217aeeed2cbcad1cf56165e4dd97fc56292e6a421e5c26881cc635d8547aada11d0c9121870bdff35d056903c3f1bfd3e3f6a39743b7eec15576f1e519b803ecbf13d47228165cc40b9d74445cb47c281df220c9985fcd6f5a5c6fb4b0c9100291f86b58c54f65d19600a3f55384236ced86ba7ca909eb0cb2ca50927cab3a3e179092e0d3b486406fa60ac77a4e0b942e5cdc2fab2317e7b39f0811cd807b8e6d8aa236ee122af7d36838be84fd5d617aefb886f33039bd1a7cce0cd79ffe40211be6f9ff205ef61ffb1b8d9f6834e352401c4c9a8775b91cf836fd7eb551dc0981cf566ec19ec70a35017ea4145eaf61c9fce5319c4afadb6337de470d08c65179eba3d6cb33fd944f3f61b7f4609eddfb607314b5d8e615872bcef2f007e8cd0e33be717b27eda247ad1340ef2264d755aeda555d6cb0fb240bbeb24d36704bbb72d7c80c6f13f93d79f7674a4401acf9c78530b1c06e70c02b183f7fd9688cd382b388e65b498d64386c41c6242bfa1a5381566e1b0c54c61ba01a3735b51341b9111573e5ac58f77f50db5b999992dc33a71c38862a968c3dabc6c58c3541b2ececaa6a58b33a4c0c4cd378765af82ca06dedb54ef53077a65c542a6775384f0e6aadcb4e8627e6f4a67155901302db85bb97ee7233161fb1b8852fbb508aab2fa55db62ea01c66c35188d9bc5af500feab0025207090e5c4e80d9f776bfe97a0d0aecb3fca69738e1242359cffb683b6a666ce97c3896951d3438e612ccd418819b93710f6b1fa3ef9d1f03ecb295843492dc151703f2c3eca86d66da6c27761f5d32fe1e24460d82ca634304412222934ab869392bd47c229a7353d0c4ba972540eac32ae1c4fe8a54a34ce512642b7aed0bf569078efab573d3a27545302c8ee884c4b0c81d4d462b29a1242679da5fbc25b34cdc7cef6481ad8509de28e57a1772a849f027cbae605e3398eb7b9226538e841a07a24b6a34b45884927227cf5328f5d42182b683aa54743be827f5d32d5971875b543feb9842bad7d0f018bd4cd382edc636336c4490508b932ab4f50273267fff10fd106070d0eacc5ed60f93b2a8dd30ac4ac400da7b7a8cca68acb221f8e41fe3e62e332114b9607af198ea5372e84f312a5385faad02b033abea88d6a04357e9c7b97bd4233e148b58310129f5f75d7da0ec2a325559c884541fd324c03b52302c5a59e394382e903a06578013b1965fff14b703d939961939c92fedb2d61d721bac759a84235c5ffd00c39d44d9535478de93c657c318c0e701a2b5007d245598f417f956b70abc735896cbfd7539cf12b1adfad340e9cc2f30e31be0f7654a6e80e74dcc3afbb115a7fd2b22930f82a40016d48a9391da3e7ba8d878da465dfa02c137fa0f03023a8854d3d7cf73d25dab8ed00c73c8c21d15dd973314f63a047d6bbfaea36bc622a6d6283e9e12c3c36841d175a5e7a4809123b7f22bc0355c3a1c73c627137bc68f86dd5a2d8b148b98969c6b3268b9938bff173ff7083d43eb8e83d1e7cbfdda65a10b6c97c247a0d5fa23dd971f620ed04603a0b4c44520c6b2b9534c88f79f3e1347930ddfeb42130fafbd98ba589ce93b48472f4a060e61eb51dfcc8696170563e313a0a55fcb16a6c1c48bd0dfa75ad5391c9331e42cb169c27b958c04dae24329214d18257e0bbac4b7a412d1efab9ed8403c78de53a7567ac6ff38238a90673a0d018aae9854c5d6ca7eb5f7a9ef5da3f69e3ebf163a854b2a8b97ad7d6579674ad24ec68bc44b1b18cb472cc87848bdfae0573627b0d84076e13186c19681066a37adf52a71bec69538eaf4d19e8b088a887199f021dadc1e4021432d9f85002bc9f3a91c1dbaa31a83fb3c97874059a2185b43911714b9610133b0890898b40eb6b600163df7ae4f1deb282fbb3c2d67bab248c22ecf8ab9d4101f51014906368e2e3ecba99a724d29421739f085a134860dbbf797c26996e0ddb898d7c948f72e1540d975e09bd19f8c653f781434ccc7bf1dda4f6ad00eb440d0aecd64c718c38ec6e80563907bee0fa0e23500064988c9ebb8e3f7b9539c1da64fe4f3efe367681e355ae1863d9011e37dba50466d6278393aafc48aaae2f7008dea793a22efb4d43503f154509c9c78d8b874948b7ff8df745ac48920dc0540a44f34a5dd88c6aacb34301bc357551031b883908588ec35f95e310ffdc211a39d6e87456e6555abeb23694a96d19c0cb5dd42c17b5a7b28b87a971da3435f15f64fc2815c9983634428ac905d912806d13703e7c2d7849e0bc89e25f54170ead66d194bdcfdff4c85b3dd0f988d7e3cd7724312587f513573ec6881d76b48223d7fbb88c6b05a488b8e587c9f7eb8d628d9ec0e99a5cb0c3b2b768baf1918fcd7a31e2e20ec626f536f0a19f3484bc22046d923f7a499eed275ee01d43f3590ec4529760e516c6ede23650419d163411e26a934c273c03cba4642efd860d669fcfaac7d18b8d989bb355f3d1b74fdbcc9f50a7e1a4d8c541fea5dfc41c44d7602341b6f115bb29ba80e124bad7344a86cff196d1e7190667239ab8a59c4de001d100eadb8a6f8667778f7d7e7fe18c27970af92b9236511ef19bacee996ae3fc6212e0b6aab33383fa4f1c6b76c91a27dd46b63e16baff16257d4e704d7374e934471d792eca57759bd22ce0a1f50c10b8dee513dcfba855ce1f473697e8af1ee1e357479108f6a83ed73aec5ae7f4fa9e03cc69fd1e1bca0b71e4a1cd7b0539f5c831a555b2013f13f4cf44549c8bf5db8c2d2446297ce1d090421cf8acb751ea3d26671f39002a1551ac42f0354f94748736223a1c1d461b57a825183a4bfa5543d6c00966d81d41dc5c75da8dca293034dc5d06ffa11cc5899eb66c0f34f156aef3b872a73f320f3ba4991d55e1d86d9715bc70de878d80937cae46b1de847073607e005fe459aa98fdc6cf9a511fcb7e963c55dec99d5fd1cd427e7b055b6db23646a3f0c050e5f9dfce6a0e794659ba95a3ec6ca51d60f2bb91dd8a38af1f39cd5d5076d06934d61fa207852973286071d8c719ae43d0d23b1120f4b6c9c02176ef7a1aab81e780ab96fbe075c6a8bd0080ea7bd1be3af86000bf518245b1a23c3b0ac8f194650336d9720f27b59ac788a87f344d5292070842e4bdc71bfd6e3987c833e9917d1f4e35471a09b615701a457427736fb9f1da5e1f8058645fff235a0b91e31a14efecf5f07f70ba9d3dbc1d845f7607cf7022c85e402aa326ff391911b776314236367085116fdcc0d20b79b9877f9879e1bd33a89c75eae6eaee8e56bd4e96417e84807b133487fe6e17d6c478a6dfd8ff289109f51c0d5fd96d72c5e3b850781fdbc2c4c489dcb2255404c9720e44eaea39f796f8519e9be1c2e3658913e728c44e9d03e43a893361ea91e41be2113164114ffd99597815aaf8f2889b5b16ba0f5d1fa13cc652dff7a59ea72c9cc691b3586798c00c5e14a2195787726417ad64f1c4540f67496dec574ed417a7c5f17dd8e1e122c0ac263e232d25b07c2fe5befc83de8cf4015568737c602b77bad27ca03b333dfe9d61675bc66cabc8bddf11a56d2524efc504186a51495c141da982908fb4af4111cd6af9e4008babb311ca0b71fb555fea0823a1183c9db4c961c36cab089f81d01317b9bd6697106e39d6fa3e5de0cf458d800c00777831c461b3655732dafac53340b43ed9af270d4a5374a7db6bfc9ff38bc8a6898a809644b825e91864a1fa8920d7527fd6823ceb1bff1be21fb3d3de0b5dde983fd4cf2e2a16a3ebea69a6c467687251a80ba0fc9abe34b61eab90db6509554215603f9912fc907f9ddee4b60d7f3866b7eee9c22f5081e8e06d048eef0751c952dee0f6bfccda088b55bc4dd3f2f5b6387474199ef0fb1e085cbba74c546e52e23cd5e7f5fef720d982906dfa5c12902b388addac794176a35f561e45011bac040e17e78020376cc92b69f6c546009a8d01107ea45f533faaa4a7856ede15736abd498f05c84596fee991fa9b0057fdd5f3217fd84777913e18c8afd282111927e81a8251cd3ed8e847e5971a1488ff03d5ba35998b4decee9fd634a5bde50847a7e94302a5eb6c11796fb2bf5d6385ced6f8ab85490a980fa872bdcaf12d83ab319e1d28193e893b9339f0a436a788b9dedc1e7292c57c944e1ae94acff42cd769f79cdd620253892885bf4ea3e645b5b533ab26a3cbd04c37daf037d823f5efebeaa2a60239f45f1435bd7791855ba838820004677a7984fa3d6aea777f53d85137c019e528c82c53aa0d20db13a89cd30d9f27861ca90b03ee2d0880950e50878f6487c82f150fcf45c4ca8bf8948953061edbae5d7189cbb3a987ce5ae0dcc3d073564f15cb69640c71a90794c487aa91ff4609e246238bca5d54157bf2c4c3e16fe276ad5ec762306b7dbd190f73addbae0fbed8db3cdea3f7abada253582f8504d73062a27fb71a3492f09e2f85b99e49b372851c0be805cbda11dc8be7ad6b79c8a8f8e9b49fed25bc4e26511196509ff644951339211696167e0c201b6a07dcf5cbde303a2690ed3b9df39539d8a33ac4f87a63fdd9ea1f4714df50b42bd8302ddad8a6ec3b118c03afecca1f848d62b9dd117bb8c679bd3a52c36c0a9b89e4c1bf105fdfdb8f0eb02987fb82e97a6f2702ff8e8d4b6fae5a0516f5456285367518147573538948577e7d5dc35ab6f2aa93fb2c6e787bb3ad56b1a5b6a3b3e6a72ce083ce46790511e43a543cfebc9c04f74acf3350fba86542aa21124090943abea496dd0ffd3210203878328b81d1a271f717094388d3e679c3e65f2658a5b2a7777f4c510ca9f08938d8fdc225df886be6b631ca6b52b3d8e0d112423c6c7d75ac01e6510b94ac2ada80bf0ed0da31259860d11f15e1ed3bc58dd5568e2d8ed2afaa5940b4914fa374abf1db852e5097097572fd29160d7604bc4b643f1b21dd495f2ae5d82f6f54436d1b9ecd35a5e403755a720940f0ae74e0589f1d1df4899e83a4907458fd1e85631e95fc491ca8c9bea5381714a048f427eb43fd471aa4efd80af77dcf515dd39672f2ec9ab10da4cbd318fb7a21f80537f11b29d5ad572cafc0d98ec6ed4c887de20b851b0894409c2b1ef1e35848bc027a3bfec482fae706015d9cf56c6cc857383788eb76529e3916563eb31793ac04c2c33fb8e20a91b3795016dd54201c53023e533e6c8cc67e5340fef3f33d8647b26eb8ca21b31a3ed2ce0a46537e5fa6f08b11cd5b0eacbc05e103b72715a04b7f23adae8f273bee42312ca7f6a0a69e0d714836459b2781fdc8f9898780402e3ee0b1d3219783208de60a528183cc50649f9dbe2b86f5eb1e52807bcb29533469228907cab50927229c387f14ed4c916f5e733a806c7bfea6539ea2c267b1042b05f7c85294e816419d8b10fd66a8d466f4ef44fb07404f85e707ec0651bad218d992fd41251593ba32a0e879bf9162e3a8138b04db3f39997b80f604b710bbb890f3e84abe9b13e29dba64b7419fcaf6b70090193d74f63037bb1e6785c6c754b39e0dd9727e64bf4cc1a80385b4d6eb75837cb05c675fe423019e68b4e3cda0479f3882b0da890b24c8e6427bd87370129850cf0398465fe6193a051965a95761316b3aa6f02c9dce35fc97cd93fa2b1c1ae721bad35f29bf1b30808931e3ee3fcb07a5cb548b536e25636f0a10d583192f26440b8e5fc478ee44538f86db27d7e5e4201401fe1f1f9cb8d74932712c5ada8ed01da1fb61d92e01e7acd275a8c2ae8919bdeb0464a291a5416a80b9889b20093ecb25847edda1348ba9fab196f5a59b954607ae2abdf2e77542a30349d7e5c4fbbc8856b4b2615d81a6bd7b907ecc2eafdad858b341051a42127456745c9ad5a00b9359394a68432940c197031c391e3cb4fefce5773b35eb74392bba7419a47250fc265d12791ea569280142d637e7a86eba6f020f9caa5979783ab433d0b65ccfba08ff7a62c2974fe3cdeb7015053b398ee7dba605c3a9e040824c8c9e577c02f87c1eca0e3f3735c81e4b7a68304ca43ffa1aa4a609ed8139eaabfdbb0b99779ac11be454ab5aea9c6dfb6549dbade778a06417141ab82fafcb18869be15aad7ae66bad8ffcaea31a3343857693dc0d5ad35b43dba9e6885e5c895b562b35fddd8c46d86d8a26f0abecf5c3d580533576a9c789a8b152088a44c15206d0032b8e5a38b27365f1231a3ac9af87398f7f66cb8a3ed38532addfd9f2e6dfbfa5be4c1325918f08806ed8679fac525011944b3be892f4a408a83d92170a9882a523ff2ed6a89abb41f43904e16fcb97736dc4b0052caa0d19555e43f4e9dc44fb09604e11fb660b828148453d2269d653ffd1012e48f24124ad5845704f3c07858459c89f384868313fc7628c94d5420c03b59aa283e026dc45946975955570e3b962502490d0064031d871dcf587d177b40d7d82fb9f2e80560ebf54e40001b4ac675a75402a3992dbd95e0d11674d72d5f4098b148a968bb07a86cef7b58eba1eb465438569ec4e8b0170bcc0e2d801dd31f4c42bb24001291af8903681166deb3c2c2d3e33ad335da779c319f7a7e35d32e151a3ef4f687732638dbf7b9c222956a240244ed5f7440b9881cc22994e5ba8a15bbd725f51112bff0c865f8d2805502c5d919058901267da053d198e9ee28194feae574ad7b396c9722641fbf3b2762511cb5434e4a28948a401b05fdf6a878535a3773b3794f0957de3f94617c83d643916dd58cc917665e51f48fc0e51b377b9e4a2cdea179f0e0809d1e3f6273fcc90b1073ce201cdf3c17494ef85a2be26ac1d2123240b64cd6ea0ce943a8b52c79ec2708dfd63514e97c1652ee93caa09e2e12368b06c103efc6ba9896678e5ed252e633e8c261a7f63642376db465028307b48cec0655b89912d3dd84ad7049903713a534efdabad59970c4ec356634138da3ae4adbcce8e87ab91e7952587af1072de9da7f9885b017ee69b929b1114d6af62963f551a99af7f79be7ba1503d3c3d24427dba68bd5016bc544a61919c4f024056d349a99dae8edda41d018593ceda1730ee74a41f28d7d1d2354707897229971239326b5ab83f96ad0e69e0ee4a04dd5b65d9586994c9ed2cd56b89a5d7d1c374cbf08e0a2c0947b1d8c9edd361dae2511f4360315fb6d5dd5ccbf8eb01affa3ebee57ef84aa777f6bc4a25fde623ab51962eecb33aee62ad3e5a479910a2b9d434c7ef378f4cdefe57e27d4f86f800e35a3071291186cee163ecafdcb80275b5b4fb4e50ddf7bec063ccd629aa344ea0dc5215c073aca9129e88b85dec3f1e3e28c1a3e54dd1973b51d68b8e6b8b2a244edf66cf3aeda3cfb6962fe87a7373bca106fbc02c36de95a9808fef25dbb75a9ca1c97edb1f24c2759eb55fd3a23202a43340efccef39b5e9ecf6994cbd000176e1e94b3c312a08b7227ce5eff0b63e844b13d8f35677514338202669bd4bdad345b7672b1556ceb87b33a8ec1669ddf348d613e722c3d4a215da6e3a90b6e9358af55874bb222d10609d163c8ddac37a4d2a5129a03d70c810d690a317e049b10271aad78a3d509adb18a6d4514a7eeb256307ef90bb28b40740fee2065cc97cf8f1f3ac88a4a1e391357c2e7544d43ebb5ffd22b00f92c522b19ea7b33168794e973cc59a78c0c94244df4e32d8474d61f627020ffe471eaf58b99e22955eba1321e908fcdc7198a58170f82de6103f0c868255d6616d4297dcdfbf30042f240ad7f21b8e649361379f15ac612a7742a8ea051ebd067d1cb26e62bfaa2a981a99549012a51c0a8f1710446feef7700e15bfbae934a1c5d7ae2e806bce46dfcf84911d6ef985b3a225adaffba876aafd8d1e2e98e13096c34f8db15b202c0c963c71e514af05a7d7b0ac5aaaf7ae3e491786f5d063f2f11915be45f7ae42988882165ee7abf9785877c0b187ec1a3b9bec9ab61e10cb61c7bcd046d62410f8b39b3489f83ba06c8a602674babb193d5817b27e35783dbe6b440b957a4b2fd0f9765620a033b267d5b58faf1e055de4671e6fc4175ef2829966007e063ae8a2777d003b5ce60e0ff9a50ffcc1b70585ed30bd7466d7f5ec4a7e5f5242685dc71cb58bce1a380fd1e47c1311c28f8b0fa5d19cb6110ee94e66367c3f941d19df3067247bcef52d2c20a22959c1adb8ec8af854f9f7a594597cb5e15af307afbcf94543943a569b1b36b5bd2c684a6fb87ce485eb310781c142beaa2fb497b5415a32509454045a4fa15671605863d836c00092d93ee7170f4397d2bfa29f51c03fb303391c6b8ff5bc4e3667479277a7484d71e8e473e461ffa92e8bfde7a9a0cbdb9e989bd35f15f780c95081bd9ab928024affb28290285c2fdda4c20d650f4d79a101b79aa111239f06286be0d87d32afc2bcf1aa9ccc87974a1ea693d5aebead78e105d9243e6f57c87a22b0897b8e47994e4430aac9a0f5209c620d7dd9f4b90f18208c28e2a42b0ae86f663e7ab521a47ae20bbbd3ae6837573540d25eea7ea13bd17376883a27d552a3934cc30f8d9d5745ddb8f76aaea7d3da17f6be66227bc87fa744999302e087a953e22c44996f1f2ca25fb40d56fa9bb805abac2996e499f4359a400f011ac6c830cdcf92696f0231364638ce751ed3fa8850686e2856fc723ad17b73b85be58b81a577f472c7db7aca3fead0bd9a986e1a502392074e7288d5617510b0d40a0811e3d4fc53f85273394377c5eb6014e8c22290d8279f8b7929afe34500981dbea799f712931855fa19fa00e2bc593ba098000b7006c703a32d7b04b32f997200818d0e07ef5f2d8fd1653f88b92c01eb30c01fae71a8fceae03932acdf65ba21ef5d653389b67f9b0ddfb9edf4c2a0adb5caa562f4bdfc63f156bf6784c48f85bbff0c3344795fa4eed1d349e4c1526e12e251d6fb324ab2ea7dc0cd6a2b5ee595bd877adbbf38d16ba43ab74ae43aef1b693b37ac0e4c1d914b18c8139feb4ec904fcd0b6685ae258918c107ac6a99813949cc638371bbf249b1f58c70cbb0b4d387315c044fcc8215b34cbcb17ea91d614e40396d998b47ab10a6d69fdad361d094b33ce1bc1f386d3533da0e7d03c0d42345e719ece2dc6671ef6a98861f13b659c018025f1bed62d08bd45f03d9ffedc46d2acdaeb6c33abb81385528316ad6a7f324f96f66e6beb4c5ecce7a702e05321975cbe98613f4d081f0199cc6750f0fb225da7d71e4d51fc26b4a554923783629b1d126f67235ea4cddfcaff150a62692049210072b77396d38f5cf1d8501e62fbc12922d717a3316d34e566bc8a780a2d47f7e0de150ce39a844e6bd218483392bb7c29dd808620656408fda0eb59c60eb4b69445612a96c5fdce16bf118c2bf9d0d20e1f1a7bf839ccf8ae6559ef1458681590cdb7ab472bae8fc2337e78240551bb9948cedd12f726b7f389d0fd23651964ee2459acaace4c7668e6ef406ab85f75ebc87613dff094c8ae79d75b95bb083d600503e5d77b5bb52c90357ece3e50f5b281ca0efa303d8b50ef25dc269035bb861830944864991b30a95db92b495b2a2c6336b2074d6c9881088d93c8dfd4e997e788a3eceba0bcc13b958e1aaebdfe9f4cfe57a3e64808d6f77407e15bf08df4f725cedc4826ffd7cbbf61b0fe35a8ba942a8a2a252a842a3e0eec4cd0504d1e81825d3f10b37bf73972f12736f2291b157220465c6f4e2d3c365e5ed82c7bf356d8f92e4a6bfdd5df64bcbac96dee0074a439d1739cbfae35b1797825e3fffffda55b6b2a76e4be13e6212eade9aaff686467a1f2924ab111fccd7f4fab2aff214327d7632f59fd50a5374511e9f1a29e0ee0b04e6ac1a5a9428e5aa1dbbd20ea6271379fc5f269c95dfb4bbf3899b37f3d257d08cf54029574582180ed729ecf5f830c3951ebe37893efca411397eb5f30eba842703ac1395ca4b328268ef51e265ebfa1462655cb0b28242f6f53d3f5193dadb027519855b5aea4a90c9f810e711e8691105586353425294257c04ee747db0a9e8e418b78adee55beb689f3fb7578d16f9a105eb7bde7b345b8d1a0230a5e06e9c363f7f3a731469ef415e3f022783e7a0385812246cb8e3b99102a7eed6a5ff5e126e25beaffb4a4ef35b665a67884c4bc60d51cdf925705f04ef07c7750d94b39c1d54964c08dabf5457b4f8cec668ebbe5ea56d06f957a16a5e8975429c1fcc1f1a477beaef7d6bc412aa641968969a3e46fe9e0e978503c3c9ecd9d1e214e77a71f92ad6ee225ce7674adb50961e81b9c052da725aae2861ad643f630aa28786db5f9108a5006f2fb1f2f2540236668e266366d02f14d83a416e1101426ce584f1d6c47dcd8198c0f13e182555137435eabf8cf9c746a36d3463b411864942718572ef712627aa5680a8e1a4062529d7484970fd95c961a6340dd1c78f6b8d8fb32154e19517b819c91654ffb534d17ce9076ca41a722924fa700f46319072ab84b2b3af52408deb555073b3c9bf821bba628811c910280449e767d269fbfbad13774e63eaa937d250e6d7ace2e59cd7ad15cb8f2f2d1ac1594ece53b825ad38e3e069ae61823e731e31dc2ea5c906d56ab48608f489ed5e23e4075773acc39acd49c12fb505566fa04af8c981f483e1b39efecde568e9fb326d1cd84625fdad24510185579073d6eeb41e491068bf6c629fe5a873de281c202ed955380f488a56982cad705939ee78c52e817a57543e6f8faae462ac30216a4ec765eb9c20f0b39ff79e2f91e2f272c7029d530926d5f42d517f199e15573559dcbe38ff8fca60e419a1705ce68d2d58ffdc947c35dbce38cb0c12d018bbc526e1750dd28d9f7ccd0d0e0ee2105eb246c2e7980e6fc834f0a796e8b9ba84b95207294d0ae55be6df4c6aac997ff4c2988702dd18f2f430b615583b551e59288093a10b4bea60621a8d25e9ed09334f5ed97311c100b370f46d54ce862fbbcb5f0a77bc3e85a6103336d283cd71cd779f23a2f8558864b9c791a2e97eab406508ce0bd550b6b3bb1aa9a25964ec770d2f6270b43a88263e0cffd9dd870939ac24fa603172b861237f8f08f54acd8df4272cf403eb5ff28ed95feb5e04ec96bc3e3ab84c34360a42d9dd643a4337a0dfe9adca35333d80281f7e121df47629acf057db1074ad8bd1dbabce06b643352ef32a4cbb603dcc0bd8cbcb39be24e4cb99dfabdd16224dd96c2bea2c9e1ccd7e1c97d469b8e582187bbd0fcc8c54e45e77dc26cc7fc37b8ec3d817426f94f5740e1ac131f7e1e9a570bcd632d0e304f5dda3f8a87850ea77fe1baab6c719b319205bb364b63f235976eee49ab8b88cc795ff74aa6cd39222becb919977e2fed468574f826b5fb64e6df9a0637a7aee9f585d621f9ca77a20b18e3299634881eef9f93c09e2b4e6289419e50108aaad606b4d84f660a7f556b4ac61b72ab648797f5998189a8636051b6c01f330809d228ac0deb8c333af209d9ee547d9d949a9bc2d8a052b627a59499947d10e09dcf88e7b89b3cc5a924437689f07147902b859951283f5c98d1580c62f1c7797ead765632b5388c69966c3abf24977fc4c68a29714989f86512390040a4bfd774aafec80a66e48046142a9bd13a8af976e80a88728f8da5ca8db1ccefd6aff7d72439906917d3bd7640c1df92382622ebb4633ac57b11ab10b5f5ae07c68a6451e521ca2ee86673a6b8dcfa88935f60704cfa3ede892bbf92acfbce43cc51e2b3f6fc1f40ddf0a7a511b50d74fa17237f7d358d1d51021bd7ab338b8a8ef232226e6a0a32d7274465aaabc17574e2c60b2d7a6f710184e214aa0a7d773d7e85e3a019d33fac8f4001216f81120b65104c5e8630aaafc04c531e5acc9bb57130c7387b1b342f9115e72e22108fc021cfa550b76ef94f832a6e7368bacbc374213472d182d212026e1d31a4e74c0979e519f4d72f417cd94dc16defcc1aaf59a75a340b67f45b65b5e3e07129a363a7095c56fce76ccdc2b610e0ec7ebb57463f72a64d6b4b6b2ede5a73a5a08294a943aa7d978158655b6c3dbe1c3a47e4c714df3d171324ca8d82e4b21aff6eb8f27e138e94c25a676fc5cc2256a0a990cc9c505e4b12ad2b0dbf10bcd1af67f573e08fa53021157114025825fd36601fa8203cf7d81084f2e127050e82e74b0347d524ca7df8e33d4a047f39feee62465ea3d38b16ce0954bb24beb271b5bd6145c60a2358cb53fc35d1a4f7f0b6fcb61da97b55335978f4ddbe792ef32425e7b700bf5f95c8d427824b3137fce3dca1100d03bbd6633900f481392a8afebca9071fe302afb3e038e32bba997dcb6d15ff9905534e0659620b912d63a11cb6610a8f35763be2691585b3ca30f0d1d5e060e01474889eb2c9259be10cd090538a680e8c1fe7dd110807a9ec0ae654ddf1c269fe3f10590ad0266bcb74856f608d5d25b2e0526d4524a1f7bfcb694deabafe2c8b368513ee111e9fb69df1316c9c29105199531ad1f04a5c962a33273fd4299e911b52e913288bc8653bddbdf80b126e84a35e66c581be3d93bef3a52ae36ca3c51e2e8a91d5ac33146808e8cd6c19c27e8b57d4a5160e55877f598c9f2bc02b7482fffe8290a4c2ddf7ae4ab470e340825d1ee2ff764bf61bd751eebd66123f3ee723982c44c0af7ff2a44871ff2c3ca23596bddf55e3496e0704fa3dcd34a5d3382ee1df823d2a2a16550abed51f7799aa33c602667c04340b0c652a7b91a1dca3258bde9d6a000fd2a7aeae6dcd7db506fe3b2698515a53569af78bcb94faf2cdc82bda606816bc7c8c1678308ad25575b0b649b006645b8794535ea53b55be6140ba96c16313bb2af3f1ab25b54f94b184be590fe034d02d0163c6e5bf631709740e149ae323d820b235f581e91656ae1f5dff891f3b46d8e477917a3a7f95e22b428ee4b6b16e4965307931360f662c2d6cf2f887671c6d60cc1e6326d62c34715e1f794017d5d511c209fdc86691d59357d647b23a02a9922833b5e0467a83ac4d0c3bbbc7760a03b4b70fb09a82171a1c18d6d32f768577cf4491a2577e7f394ca18fe428c2d566eea98f976da9cfdea56c014c69bd0a9fc50f4f678090c6d68e0e35c87a7349d23dd5f6ae04cdab023e00164d6314f6e285c37c48e27fd8cd0b115227f66536d073ad6c2fb550ba7c3bfdcb6afedabe1fdd70d35d2a8a4d4a657d415664235eef1024cfaa2aa530c2cc471aa6b7832c6ae38f3c74f4eca314bb7b895c7aab9ac2c84ede52101d246055cfeb5c61c7e5eabed5ec4d43101b681801e2f40052aa79b4ba321640c3c83ec981c1ba75fb496ac784dd6f7568ac34546e98792794605d29236c61234385fd81f94ca4f5fcd7603b7b0e4e191251a0704c76f2692f53babe1db1cd3eeb0cbe6340eb3a40736e2435764b980f3b8c87c8869e7c1bd5164ea1276c316f3780bf240f41845ff020a1cfa904b740fe1d01ee70392533c40f2eca24b49284b65ebdc76baeab50bfcfc4badc0b5f2e60e9a6e012b59a468679ef32391e155ad0337229844af7c7a1d4ec224e20879051a458e419b1a1de087b653ef48c1517272cfe02b4ac0ecd674f4d5a9b643f2bee437446441c12ffa5221e29d58af426fc37709bc15a2d296db6aea6e6d7e91cf36c31f36eb8f8181b3ad681b359aab7e0fad527eec7ab81c8f6655022ae4470d5e7f9bd4edcb4dc3d410667ca479780343686b65fbf0b0487b374a9b457075b13a86a4c22c637ace5ccd517843462117eff94f82314b49a8edd2297db92637e8d860db707fe163c487d34732dfbfbedf3a9a6fc702a7bdd79a56834fcf294846ad37c20a22170a43e85afc31ff0fea59033c63d8d5e3c882209c9f5d97dedb17b646c171c76296c6d07c2aee3d51e7ab825347b2cab9c8536820f5560cf849e3da6267384665a979f4c8e0e0ed19560e02e3203d5a79dfd23079e07f5ee59439b5a23f740dcc06cbaae49f91d2392e7f90d14ccb368cdf68f6343164bdfd8d729d4b2605b9ee09099aa390af72fbaae9471014b69c12307a516bd1ee923a240ec51b9e882cf89c8a5e818501e012c6cc4fc83a78e3fa6fdea22bf3b443947f168fb39cbe7605d92256566e736466da7119eb418fbc1881bdaa43872b05f5a633c442fadc5e2d9d3f26a4bc67cf6f3301496abb914271a999212de039d0b0824810e0019540919a188140714948bcb0f690266d30de0b66300dbd45d8a3e0e2995ee9cfe08aaede63a45eebb16e2862460282c7b860a1be0aad9be98364b0013ec9ed1002cd1fb51ca332b0a428b0fda6262c4b79cb938f19577cacddc8d1bbce92dd8c8991955309a79c6d653ea80bc5afb6508ad1a01a782d92a290079243047f491917880490e7fbef86cde96ac9002c46abd45f92526bba0c452368dff6336350fc57b95226c4c141eb569568712df5ed51ee2a3d45172e30e5fc3b3ce055f0c917303ba1999317d090dc12af04571358d2cd80cd54fcf9c35675f2aa5bd5c63a06db227324eb2021e1c95946ec2979014bf010a946e208873bae97f6a0a9f37161de41a3530d25e90d7d4150f2a083421485a6477d27514a16044674322103f928c2f343f8735dec3e02e9a33fbae0bc7f3e86a5f0901da2ed41b117ebc81af2585ff2b904989635dfdc7df74a2015ea42a512756077498ab6e6ccf9eafcd9a5b957e56f847a766efcd069c18c9ecff151266591419d2d0b92bf7ebc029a0e0f73989ae39328cec70527da1e3ebff1126a3e2f3d857e176f8da8bcd9af875e72891a8ce5629c837f7d399b6dea8acc75d6d08fb390f4736929d2de799f4effe463cc878891ac5e48c8df30ee214bdbbf25025030984716c2163f0ce6cec6bec71b7ba834ab3dbaa818286d0d75fc6c670572304d3c350c0ee3257a3fd61a879c35bac7329ed2726f44433afbf1c1c5ec5ac05d17a8e1fcb743c1cc11b6b75c15d02551140711e4774343566c6754e5ec63d3f1893a62ae87eeaa3534d6269e22116f6de3d5e7b7536c17b2d4e48b1018094f8f8c72c84dd00b5dd1f\n  \n    \n      \n      \n        请输入访问密码。\n      \n    \n  \n\n","tags":["工作流","activiti7"]},{"title":"activiti视频笔记","url":"/2025/06/19/activiti%E8%A7%86%E9%A2%91%E7%AC%94%E8%AE%B0/","content":"Activiti的表说明\n使用了25张表，大致分为四类\nACT_RE    流程定义和流程资源\nACT_RU    运行时，流程实例、任务、变量\nACT_HI    历史表\nACT_GE    通用表\n\n\n\nActiviti的架构、类关系图\n获得流程引擎的工具类\nProcessEngines. 使用默认方式获取 配置文件，构造流程引擎。配置文件名字activiti.cfg.xml,放在classpath下\nProcessEngineConfiguration. 可以自定义配置文件名\n\n\nProcessEngine：流程引擎。获取各种服务的接口。\n服务接口：用于流程的部署、执行、管理，使用这些接口就是操作对应的数据表。\nRepositoryService    资源管理类\nRuntimeService    运行时管理类\nTaskService    任务管理类\nHistoryService    历史数据管理类\nManagementService    流程引擎管理类\n\n\n\nBPMN 插件\n插件 activiti BPMN  visualizer 或者 使用Camunda Modeler客户端\n\n流程符号、画流程图\n流程符号：事件event、活动Activity、网关Gateway，流向\n使用流程设计器画出流程图\n创建bpmn文件，在流程设计器使用流程符号来表达流程。指定流程的key，指定任务负责人（固定一个人，或者是一类角色、一类用户组）\n\n\nBPMN文件本质上是XML文件，可以选择在设计时生成png文件方便向人描述流程\n\n部署流程\n使用Activiti提供的API把流程图的内容写入数据库中\n属于资源类操作，使用RepositoryService\n单文件部署： 把bpmn文件和PNG文件一个一个处理\n压缩包部署： 把BPMN文件和PNG打压缩包来处理\n\nDeployment deploy = reposityService.createDeployment();\n\n部署操作表\nact_re_deployment    部署表\nact_re_procdef    流程定义表\nact_ge_bytearray    资源表\n\n\n\n启动流程实例\n使用RuntimeService根据流程定义的Key\n\nProcessInstance instance = runtimeService.startProcessInstanceByKey(&quot;myEvection&quot;);\n\n操作表\n\nact_hi_actinst    流程实例执行历史信息act_hi_identitylink    流程参与用户的历史信息act_hi_procinst    流程实例的历史信息act_hi_taskinst    流程任务的历史信息act_ru_execution    流程执行信息act_ru_identitylink    流程的正在参与用户信息act_ru_task    流程当前任务信息\n任务查询\n使用TaskService,根据流程定义的Key，任务的负责人来进行查询\n\nList&lt;Task&gt; taskList = taskService.createTaskQuery()\t.processDefinitionKey(&quot;myEvection&quot;) // 流程Key\t.taskAssignee(&quot;zhangsan&quot;) //要查询的负责人\t.list();\n\n任务完成\n使用TaskService，用任务Id完成任务\n\ntaskService.complete(&quot;2505&quot;);","categories":["技术"],"tags":["工作流","activiti7"]},{"title":"Activiti进阶","url":"/2025/06/19/Activiti%E8%BF%9B%E9%98%B6/","content":"Activiti进阶一、流程实例什么是流程实例流程实例（ProcessInstance）代表流程定义的执行实例。\n一个流程实例包括了所有的运行节点。我们可以利用这个对象来了解当前流程实例的进度等信息。\n例如：用户或程序按照流程定义内容发起一个流程，这就是一个流程实例。\n流程定义和流程实例的图解：\n\n启动流程实例 并添加Businesskey（业务标识）流程定义部署在activiti后，就可以在系统中通过activiti去管理该流程的执行，执行流程表示流程的一次执行。\n比如部署系统出差流程后，如果某用户要申请出差这时就需要执行这个流程，如果另外一个用户也要申请出差则也需要执行该流程，每个执行互不影响，每个执行是单独的流程实例。\n启动流程实例时，指定的businesskey，就会在act_ru_execution #流程实例的执行表中存储businesskey。\nBusinesskey：业务标识，通常为业务表的主键，业务标识和流程实例一一对应。业务标识来源于业务系统。存储业务标识就是根据业务标识来关联查询业务系统的数据。\n比如：出差流程启动一个流程实例，就可以将出差单的id作为业务标识存储到activiti中，将来查询activiti的流程实例信息就可以获取出差单的id从而关联查询业务系统数据库得到出差单信息。\n    /**     * 启动流程实例，添加businessKey     */    @Test    public void addBusinessKey()&#123;//        1、得到ProcessEngine        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//        2、得到RunTimeService        RuntimeService runtimeService = processEngine.getRuntimeService();//        3、启动流程实例，同时还要指定业务标识businessKey，也就是出差申请单id，这里是1001        ProcessInstance processInstance = runtimeService.                startProcessInstanceByKey(&quot;myEvection&quot;,&quot;1001&quot;);//        4、输出processInstance相关属性        System.out.println(&quot;业务id==&quot;+processInstance.getBusinessKey());    &#125;\n\nActiviti的act_ru_execution中存储业务标识：\n\n操作数据库表启动流程实例，操作如下数据库表：\nSELECT * FROM act_ru_execution #流程实例执行表，记录当前流程实例的执行情况\n\n说明：\n流程实例执行，如果当前只有一个分支时，一个流程实例只有一条记录且执行表的主键id和流程实例id相同，如果当前有多个分支正在运行则该执行表中有多条记录，存在执行表的主键和流程实例id不相同的记录。不论当前有几个分支总会有一条记录的执行表的主键和流程实例id相同 \n一个流程实例运行完成，此表中与流程实例相关的记录删除。\nSELECT * FROM act_ru_task #任务执行表，记录当前执行的任务\n\n说明：启动流程实例，流程当前执行到第一个任务结点，此表会插入一条记录表示当前任务的执行情况，如果任务完成则记录删除。\nSELECT * FROM act_ru_identitylink #任务参与者，记录当前参与任务的用户或组\n\nSELECT * FROM act_hi_procinst #流程实例历史表\n\n流程实例启动，会在此表插入一条记录，流程实例运行完成记录也不会删除。\n SELECT * FROM act_hi_taskinst  #任务历史表，记录所有任务\n\n开始一个任务，不仅在act_ru_task表插入记录，也会在历史任务表插入一条记录，任务历史表的主键就是任务id，任务完成此表记录不删除。\n SELECT * FROM act_hi_actinst  #活动历史表，记录所有活动\n\n活动包括任务，所以此表中不仅记录了任务，还记录了流程执行过程的其它活动，比如开始事件、结束事件。\n查询流程实例流程在运行过程中可以查询流程实例的状态，当前运行结点等信息。\n@Test\tpublic void queryProcessInstance() &#123;\t\t// 流程定义key\t\tString processDefinitionKey = &quot;evection&quot;;        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\t\t// 获取RunTimeService\t\tRuntimeService runtimeService = processEngine.getRuntimeService();\t\tList&lt;ProcessInstance&gt; list = runtimeService\t\t\t\t.createProcessInstanceQuery()\t\t\t\t.processDefinitionKey(processDefinitionKey)//\t\t\t\t.list();\t\tfor (ProcessInstance processInstance : list) &#123;\t\t\tSystem.out.println(&quot;----------------------------&quot;);\t\t\tSystem.out.println(&quot;流程实例id：&quot;\t\t\t\t\t+ processInstance.getProcessInstanceId());\t\t\tSystem.out.println(&quot;所属流程定义id：&quot;\t\t\t\t\t+ processInstance.getProcessDefinitionId());\t\t\tSystem.out.println(&quot;是否执行完成：&quot; + processInstance.isEnded());\t\t\tSystem.out.println(&quot;是否暂停：&quot; + processInstance.isSuspended());\t\t\tSystem.out.println(&quot;当前活动标识：&quot; + processInstance.getActivityId());\t\t&#125;\t&#125;\n\n\n\n关联BusinessKey需求：\n在activiti实际应用时，查询流程实例列表时可能要显示出业务系统的一些相关信息，比如：查询当前运行的出差流程列表需要将出差单名称、出差天数等信息显示出来，出差天数等信息在业务系统中存在，而并没有在activiti数据库中存在，所以是无法通过activiti的api查询到出差天数等信息。\n实现：\n在查询流程实例时，通过businessKey（业务标识 ）关联查询业务系统的出差单表，查询出出差天数等信息。\n通过下面的代码就可以获取activiti中所对应实例保存的业务Key。而这个业务Key一般都会保存相关联的业务操作表的主键，再通过主键ID去查询业务信息，比如通过出差单的ID，去查询更多的请假信息（出差人，出差时间，出差天数，出差目的地等）\nString businessKey &#x3D; processInstance.getBusinessKey();\n在activiti的act_ru_execution表，字段BUSINESS_KEY就是存放业务KEY的。\n\n挂起、激活流程实例某些情况可能由于流程变更需要将当前运行的流程暂停而不是直接删除，流程暂停后将不会继续执行。\n全部流程实例挂起操作流程定义为挂起状态，该流程定义下边所有的流程实例全部暂停：\n流程定义为挂起状态该流程定义将不允许启动新的流程实例，同时该流程定义下所有的流程实例将全部挂起暂停执行。\n/**     * 全部流程实例挂起与激活     */    @Test    public void SuspendAllProcessInstance()&#123;//        获取processEngine        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//        获取repositoryService        RepositoryService repositoryService = processEngine.getRepositoryService();//        查询流程定义的对象        ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery().                processDefinitionKey(&quot;myEvection&quot;).                singleResult();//        得到当前流程定义的实例是否都为暂停状态        boolean suspended = processDefinition.isSuspended();//        流程定义id        String processDefinitionId = processDefinition.getId();//        判断是否为暂停        if(suspended)&#123;//         如果是暂停，可以执行激活操作 ,参数1 ：流程定义id ，参数2：是否激活，参数3：激活时间            repositoryService.activateProcessDefinitionById(processDefinitionId,                    true,                    null            );            System.out.println(&quot;流程定义：&quot;+processDefinitionId+&quot;,已激活&quot;);        &#125;else&#123;//          如果是激活状态，可以暂停，参数1 ：流程定义id ，参数2：是否暂停，参数3：暂停时间            repositoryService.suspendProcessDefinitionById(processDefinitionId,                    true,                    null);            System.out.println(&quot;流程定义：&quot;+processDefinitionId+&quot;,已挂起&quot;);        &#125;    &#125;\n\n\n\n单个流程实例挂起操作流程实例对象，针对单个流程执行挂起操作，某个流程实例挂起则此流程不再继续执行，完成该流程实例的当前任务将报异常。\n/**     * 单个流程实例挂起与激活     */    @Test    public void SuspendSingleProcessInstance()&#123;//        获取processEngine        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//        RuntimeService        RuntimeService runtimeService = processEngine.getRuntimeService();//        查询流程定义的对象        ProcessInstance processInstance = runtimeService.                createProcessInstanceQuery().                processInstanceId(&quot;15001&quot;).                singleResult();//        得到当前流程定义的实例是否都为暂停状态        boolean suspended = processInstance.isSuspended();//        流程定义id        String processDefinitionId = processInstance.getId();//        判断是否为暂停        if(suspended)&#123;//         如果是暂停，可以执行激活操作 ,参数：流程定义id            runtimeService.activateProcessInstanceById(processDefinitionId);            System.out.println(&quot;流程定义：&quot;+processDefinitionId+&quot;,已激活&quot;);        &#125;else&#123;//          如果是激活状态，可以暂停，参数：流程定义id            runtimeService.suspendProcessInstanceById( processDefinitionId);            System.out.println(&quot;流程定义：&quot;+processDefinitionId+&quot;,已挂起&quot;);        &#125;    &#125;    /**     * 测试完成个人任务     */    @Test    public void completTask()&#123;//        获取引擎        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//        获取操作任务的服务 TaskService        TaskService taskService = processEngine.getTaskService();//        完成任务,参数：流程实例id,完成zhangsan的任务        Task task = taskService.createTaskQuery()                .processInstanceId(&quot;15001&quot;)                .taskAssignee(&quot;rose&quot;)                .singleResult();        System.out.println(&quot;流程实例id=&quot;+task.getProcessInstanceId());        System.out.println(&quot;任务Id=&quot;+task.getId());        System.out.println(&quot;任务负责人=&quot;+task.getAssignee());        System.out.println(&quot;任务名称=&quot;+task.getName());        taskService.complete(task.getId());    &#125;\n\n\n\n二、个人任务2.1、分配任务负责人2.1.1、固定分配在进行业务流程建模时指定固定的任务负责人， 如图：\n\n并在 properties 视图中，填写 Assignee 项为任务负责人。 \n2.1.2、表达式分配由于固定分配方式，任务只管一步一步执行任务，执行到每一个任务将按照 bpmn 的配置去分配任务负责人。 \n2.1.2.1、UEL 表达式Activiti 使用 UEL 表达式， UEL 是 java EE6 规范的一部分， UEL（Unified Expression Language）即 统一表达式语言， activiti 支持两个 UEL 表达式： UEL-value 和 UEL-method。 \n1）UEL-value 定义如图： \n\nassignee 这个变量是 activiti 的一个流程变量，\n或者使用这种方式定义：\n如图：\n\n user 也是 activiti 的一个流程变量， user.assignee 表示通过调用 user 的 getter 方法获取值。 \n2）UEL-method 方式如图： \n\nuserBean 是 spring 容器中的一个 bean，表示调用该 bean 的 getUserId()方法。 \n3）UEL-method 与 UEL-value 结合再比如：${ldapService.findManagerForEmployee(emp)}ldapService 是 spring 容器的一个 bean，findManagerForEmployee 是该 bean 的一个方法，emp 是 activiti流程变量， emp 作为参数传到 ldapService.findManagerForEmployee 方法中。 \n4）其它表达式支持解析基础类型、 bean、 list、 array 和 map，也可作为条件判断。如下：${order.price &gt; 100 &amp;&amp; order.price &lt; 250} \n2.1.2.2、编写代码配置负责人1)定义任务分配流程变量如图：\n\n2)设置流程变量在启动流程实例时设置流程变量，如下： \n /**     * 设置流程负责人     */    @Test    public void assigneeUEL()&#123;//      获取流程引擎        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//        获取 RuntimeService        RuntimeService runtimeService = processEngine.getRuntimeService();//        设置assignee的取值，用户可以在界面上设置流程的执行        Map&lt;String,Object&gt; assigneeMap = new HashMap&lt;&gt;();        assigneeMap.put(&quot;assignee0&quot;,&quot;张三&quot;);        assigneeMap.put(&quot;assignee1&quot;,&quot;李经理&quot;);        assigneeMap.put(&quot;assignee2&quot;,&quot;王总经理&quot;);        assigneeMap.put(&quot;assignee3&quot;,&quot;赵财务&quot;);//        启动流程实例，同时还要设置流程定义的assignee的值        runtimeService.startProcessInstanceByKey(&quot;myEvection1&quot;,assigneeMap);//       输出        System.out.println(processEngine.getName());    &#125;\n\n执行成功后，可以在act_ru_variable表中看到刚才map中的数据\n\n2.1.2.3、注意事项由于使用了表达式分配，必须保证在任务执行过程表达式执行成功，比如：某个任务使用了表达式${order.price &gt; 100 &amp;&amp; order.price &lt; 250}，当执行该任务时必须保证 order 在流程变量中存在，否则 activiti 异常。 \n2.1.3、监听器分配可以使用监听器来完成很多Activiti流程的业务。\n在本章我们使用监听器的方式来指定负责人，那么在流程设计时就不需要指定assignee。\n任务监听器是发生对应的任务相关事件时执行自定义 java 逻辑 或表达式。任务相当事件包括：  \n\nEvent的选项包含：\nCreate：任务创建后触发Assignment：任务分配后触发Delete：任务完成后触发All：所有事件发生都触发\n\n定义任务监听类，且类必须实现 org.activiti.engine.delegate.TaskListener 接口 \npublic class MyTaskListener implements TaskListener &#123;    @Override    public void notify(DelegateTask delegateTask) &#123;        if(delegateTask.getName().equals(&quot;创建出差申请&quot;)&amp;&amp;                delegateTask.getEventName().equals(&quot;create&quot;))&#123;            //这里指定任务负责人            delegateTask.setAssignee(&quot;张三&quot;);        &#125;    &#125;&#125; \n\nDelegateTask对象的内容如下：\n\n2.1.3.1、注意事项使用监听器分配方式，按照监听事件去执行监听类的 notify 方法，方法如果不能正常执行也会影响任务的执行。 \n2.2、查询任务查询任务负责人的待办任务代码如下：\n// 查询当前个人待执行的任务@Testpublic void findPersonalTaskList() &#123;    // 流程定义key    String processDefinitionKey = &quot;myEvection1&quot;;    // 任务负责人    String assignee = &quot;张三&quot;;    // 获取TaskService    TaskService taskService = processEngine.getTaskService();    List&lt;Task&gt; taskList = taskService.createTaskQuery()    \t.processDefinitionKey(processDefinitionKey)    \t.includeProcessVariables()        .taskAssignee(assignee)        .list();    for (Task task : taskList) &#123;        System.out.println(&quot;----------------------------&quot;);        System.out.println(&quot;流程实例id： &quot; + task.getProcessInstanceId());        System.out.println(&quot;任务id： &quot; + task.getId());        System.out.println(&quot;任务负责人： &quot; + task.getAssignee());        System.out.println(&quot;任务名称： &quot; + task.getName());    &#125;&#125;\n\n关联 businessKey需求：在 activiti 实际应用时，查询待办任务可能要显示出业务系统的一些相关信息。\n比如：查询待审批出差任务列表需要将出差单的日期、 出差天数等信息显示出来。\n出差天数等信息在业务系统中存在，而并没有在 activiti 数据库中存在，所以是无法通过 activiti 的 api 查询到出差天数等信息。实现：在查询待办任务时，通过 businessKey（业务标识 ）关联查询业务系统的出差单表，查询出出差天数等信息。 \n@Test    public void findProcessInstance()&#123;//        获取processEngine        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//        获取TaskService        TaskService taskService = processEngine.getTaskService();//        获取RuntimeService        RuntimeService runtimeService = processEngine.getRuntimeService();//        查询流程定义的对象        Task task = taskService.createTaskQuery()                .processDefinitionKey(&quot;myEvection1&quot;)                .taskAssignee(&quot;张三&quot;)                .singleResult();//        使用task对象获取实例id        String processInstanceId = task.getProcessInstanceId();//          使用实例id，获取流程实例对象        ProcessInstance processInstance = runtimeService.createProcessInstanceQuery()                .processInstanceId(processInstanceId)                .singleResult();//        使用processInstance，得到 businessKey        String businessKey = processInstance.getBusinessKey();        System.out.println(&quot;businessKey==&quot;+businessKey);    &#125;\n\n\n\n2.3、办理任务注意：在实际应用中，完成任务前需要校验任务的负责人是否具有该任务的办理权限 。\n/**     * 完成任务，判断当前用户是否有权限     */    @Test    public void completTask() &#123;        //任务id        String taskId = &quot;15005&quot;;//        任务负责人        String assingee = &quot;张三&quot;;        //获取processEngine        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();        // 创建TaskService        TaskService taskService = processEngine.getTaskService();//        完成任务前，需要校验该负责人可以完成当前任务//        校验方法：//        根据任务id和任务负责人查询当前任务，如果查到该用户有权限，就完成        Task task = taskService.createTaskQuery()                .taskId(taskId)                .taskAssignee(assingee)                .singleResult();        if(task != null)&#123;            taskService.complete(taskId);            System.out.println(&quot;完成任务&quot;);        &#125;    &#125;\n\n\n\n三、流程变量3.1、什么是流程变量流程变量在 activiti 中是一个非常重要的角色，流程运转有时需要靠流程变量，业务系统和 activiti结合时少不了流程变量，流程变量就是 activiti 在管理工作流时根据管理需要而设置的变量。比如：在出差申请流程流转时如果出差天数大于 3 天则由总经理审核，否则由人事直接审核， 出差天数就可以设置为流程变量，在流程流转时使用。 \n注意：虽然流程变量中可以存储业务数据可以通过activiti的api查询流程变量从而实现 查询业务数据，但是不建议这样使用，因为业务数据查询由业务系统负责，activiti设置流程变量是为了流程执行需要而创建。\n3.2、流程变量类型如果将 pojo 存储到流程变量中，必须实现序列化接口 serializable，为了防止由于新增字段无法反序列化，需要生成 serialVersionUID。 \n\n3.3、流程变量作用域流程变量的作用域可以是一个流程实例(processInstance)，或一个任务(task)，或一个执行实例(execution)\n3.3.1、globa变量流程变量的默认作用域是流程实例。当一个流程变量的作用域为流程实例时，可以称为 global 变量\n注意：\n如：    Global变量：userId（变量名）、zhangsan（变量值）\nglobal 变量中变量名不允许重复，设置相同名称的变量，后设置的值会覆盖前设置的变量值。\n3.3.2、local变量任务和执行实例仅仅是针对一个任务和一个执行实例范围，范围没有流程实例大， 称为 local 变量。\nLocal 变量由于在不同的任务或不同的执行实例中，作用域互不影响，变量名可以相同没有影响。Local 变量名也可以和 global 变量名相同，没有影响。 \n3.4、流程变量的使用方法3.4.1、在属性上使用UEL表达式可以在 assignee 处设置 UEL 表达式，表达式的值为任务的负责人，比如： ${assignee}， assignee 就是一个流程变量名称。\nActiviti获取UEL表达式的值，即流程变量assignee的值 ，将assignee的值作为任务的负责人进行任务分配\n3.4.2、在连线上使用UEL表达式可以在连线上设置UEL表达式，决定流程走向。\n比如：${price&lt;10000} 。price就是一个流程变量名称，uel表达式结果类型为布尔类型。\n如果UEL表达式是true，要决定 流程执行走向。\n3.5、使用Global变量控制流程3.5.1、需求员工创建出差申请单，由部门经理审核，部门经理审核通过后出差3天及以下由人财务直接审批，3天以上先由总经理审核，总经理审核通过再由财务审批。\n\n3.5.2、流程定义1）、出差天数大于等于3连线条件\n\n也可以使用对象参数命名，如evection.num：\n\n2）、出差天数小于3连线条件\n\n也可以使用对象参数命名，如：\n\n3.5.3、设置global流程变量在部门经理审核前设置流程变量，变量值为出差单信息（包括出差天数），部门经理审核后可以根据流程变量的值决定流程走向。\n在设置流程变量时，可以在启动流程时设置，也可以在任务办理时设置\n3.5.3.1、创建POJO对象创建出差申请pojo对象\npackage com.itheima.demo.pojo;import java.io.Serializable;import java.util.Date;/** * 出差申请 pojo */public class Evection implements Serializable &#123;    /**     * 主键id     */    private Long id;    /**     * 出差申请单名称     */    private String evectionName;    /**     * 出差天数     */    private Double num;    /**     * 预计开始时间     */    private Date beginDate;    /**     * 预计结束时间     */    private Date endDate;    /**     * 目的地     */    private String destination;    /**     * 出差事由     */    private String reson;    public Long getId() &#123;        return id;    &#125;    public void setId(Long id) &#123;        this.id = id;    &#125;    public String getEvectionName() &#123;        return evectionName;    &#125;    public void setEvectionName(String evectionName) &#123;        this.evectionName = evectionName;    &#125;    public Date getBeginDate() &#123;        return beginDate;    &#125;    public void setBeginDate(Date beginDate) &#123;        this.beginDate = beginDate;    &#125;    public Date getEndDate() &#123;        return endDate;    &#125;    public void setEndDate(Date endDate) &#123;        this.endDate = endDate;    &#125;    public String getDestination() &#123;        return destination;    &#125;    public void setDestination(String destination) &#123;        this.destination = destination;    &#125;    public String getReson() &#123;        return reson;    &#125;    public void setReson(String reson) &#123;        this.reson = reson;    &#125;    public Double getNum() &#123;        return num;    &#125;    public void setNum(Double num) &#123;        this.num = num;    &#125;&#125;\n\n3.5.3.2、启动流程时设置变量在启动流程时设置流程变量，变量的作用域是整个流程实例。\n通过Map&lt;key,value&gt;设置流程变量，map中可以设置多个变量，这个key就是流程变量的名字。\n    /**     * 启动流程实例,设置流程变量的值     */    @Test    public void startProcess()&#123;//        获取流程引擎        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//        获取RunTimeService        RuntimeService runtimeService = processEngine.getRuntimeService();//        流程定义key        String key = &quot;myEvection2&quot;;//       创建变量集合        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();//        创建出差pojo对象        Evection evection = new Evection();//        设置出差天数        evection.setNum(2d);//      定义流程变量，把出差pojo对象放入map        map.put(&quot;evection&quot;,evection);//      设置assignee的取值，用户可以在界面上设置流程的执行        map.put(&quot;assignee0&quot;,&quot;张三&quot;);        map.put(&quot;assignee1&quot;,&quot;李经理&quot;);        map.put(&quot;assignee2&quot;,&quot;王总经理&quot;);        map.put(&quot;assignee3&quot;,&quot;赵财务&quot;);//        启动流程实例，并设置流程变量的值（把map传入）        ProcessInstance processInstance = runtimeService                .startProcessInstanceByKey(key, map);//      输出        System.out.println(&quot;流程实例名称=&quot;+processInstance.getName());        System.out.println(&quot;流程定义id==&quot;+processInstance.getProcessDefinitionId());    &#125;    /**     * 完成任务，判断当前用户是否有权限     */    @Test    public void completTask() &#123;        //任务id        String key = &quot;myEvection2&quot;;//        任务负责人        String assingee = &quot;张三&quot;;        //获取processEngine        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();        // 创建TaskService        TaskService taskService = processEngine.getTaskService();//        完成任务前，需要校验该负责人可以完成当前任务//        校验方法：//        根据任务id和任务负责人查询当前任务，如果查到该用户有权限，就完成        Task task = taskService.createTaskQuery()                .processDefinitionKey(key)                .taskAssignee(assingee)                .singleResult();        if(task != null)&#123;            taskService.complete(task.getId());            System.out.println(&quot;任务执行完成&quot;);        &#125;    &#125;\n\n说明：\nstartProcessInstanceByKey(processDefinitionKey, variables)\n流程变量作用域是一个流程实例，流程变量使用Map存储，同一个流程实例设置变量map中key相同，后者覆盖前者。\n3.5.3.2、任务办理时设置变量在完成任务时设置流程变量，该流程变量只有在该任务完成后其它结点才可使用该变量，它的作用域是整个流程实例，如果设置的流程变量的key在流程实例中已存在相同的名字则后设置的变量替换前边设置的变量。\n这里需要在创建出差单任务完成时设置流程变量\n    /**     * 完成任务，判断当前用户是否有权限     */    @Test    public void completTask() &#123;        //任务id        String key = &quot;myEvection2&quot;;//        任务负责人        String assingee = &quot;张三&quot;;//       获取processEngine        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//       创建TaskService        TaskService taskService = processEngine.getTaskService();//       创建变量集合        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();//        创建出差pojo对象        Evection evection = new Evection();//        设置出差天数        evection.setNum(2d);//      定义流程变量        map.put(&quot;evection&quot;,evection);//        完成任务前，需要校验该负责人可以完成当前任务//        校验方法：//        根据任务id和任务负责人查询当前任务，如果查到该用户有权限，就完成        Task task = taskService.createTaskQuery()                .processDefinitionKey(key)                .taskAssignee(assingee)                .singleResult();        if(task != null)&#123;            //完成任务是，设置流程变量的值            taskService.complete(task.getId(),map);            System.out.println(&quot;任务执行完成&quot;);        &#125;    &#125;\n\n说明：\n通过当前任务设置流程变量，需要指定当前任务id，如果当前执行的任务id不存在则抛出异常。\n任务办理时也是通过map&lt;key,value&gt;设置流程变量，一次可以设置多个变量。\n3.5.3.3、通过当前流程实例设置通过流程实例id设置全局变量，该流程实例必须未执行完成。\n    @Test    public void setGlobalVariableByExecutionId()&#123;//    当前流程实例执行 id，通常设置为当前执行的流程实例        String executionId=&quot;2601&quot;;//     获取processEngine        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();//        获取RuntimeService        RuntimeService runtimeService = processEngine.getRuntimeService();//        创建出差pojo对象        Evection evection = new Evection();//        设置天数        evection.setNum(3d);//      通过流程实例 id设置流程变量        runtimeService.setVariable(executionId, &quot;evection&quot;, evection);//      一次设置多个值//      runtimeService.setVariables(executionId, variables)    &#125;\n\n注意：\nexecutionId必须当前未结束 流程实例的执行id，通常此id设置流程实例 的id。也可以通runtimeService.getVariable()获取流程变量。\n3.5.3.4、通过当前任务设置@Test\tpublic void setGlobalVariableByTaskId()&#123;\t\t\t\t//当前待办任务id\t\tString taskId=&quot;1404&quot;;//     获取processEngine        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\t\tTaskService taskService = processEngine.getTaskService();\t\tEvection evection = new Evection();\t\tevection.setNum(3);\t\t//通过任务设置流程变量\t\ttaskService.setVariable(taskId, &quot;evection&quot;, evection);\t\t//一次设置多个值 \t\t//taskService.setVariables(taskId, variables)\t&#125;\n\n注意：\n任务id必须是当前待办任务id，act_ru_task中存在。如果该任务已结束，会报错\n也可以通过taskService.getVariable()获取流程变量。\n3.5.4、测试正常测试：\n​       设置流程变量的值大于等于3天\n​       设计流程变量的值小于3天\n异常测试：\n​       流程变量不存在\n​       流程变量的值为空NULL，price属性为空\n​       UEL表达式都不符合条件  \n​      不设置连线的条件\n3.5.5、注意事项1、  如果UEL表达式中流程变量名不存在则报错。\n2、  如果UEL表达式中流程变量值为空NULL，流程不按UEL表达式去执行，而流程结束 。\n3、  如果UEL表达式都不符合条件，流程结束 \n4、  如果连线不设置条件，会走flow序号小的那条线\n3.5.6、操作数据库表设置流程变量会在当前执行流程变量表插入记录，同时也会在历史流程变量表也插入记录。\n //当前流程变量表SELECT * FROM act_ru_variable \n\n记录当前运行流程实例可使用的流程变量，包括 global和local变量\nId_：主键\nType_：变量类型\nName_：变量名称 \nExecution_id_：所属流程实例执行id，global和local变量都存储\nProc_inst_id_：所属流程实例id，global和local变量都存储 \nTask_id_：所属任务id，local变量存储\nBytearray_：serializable类型变量存储对应act_ge_bytearray表的id\nDouble_：double类型变量值\nLong_：long类型变量值\nText_：text类型变量值 \n #历史流程变量表SELECT * FROM act_hi_varinst \n\n记录所有已创建的流程变量，包括 global和local变量\n字段意义参考当前流程变量表。\n3.6、设置local流程变量3.6.1、任务办理时设置 任务办理时设置local流程变量，当前运行的流程实例只能在该任务结束前使用，任务结束该变量无法在当前流程实例使用，可以通过查询历史任务查询。\n/**处理任务时设置local流程变量*/@Testpublic void completTask() &#123;   //任务id   String taskId = &quot;1404&quot;;//  获取processEngine    ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();    TaskService taskService = processEngine.getTaskService();//  定义流程变量   Map&lt;String, Object&gt; variables = new HashMap&lt;String, Object&gt;();   Evection evection = new Evection ();   evection.setNum(3d);// 定义流程变量   Map&lt;String, Object&gt; variables = new HashMap&lt;String, Object&gt;();//  变量名是holiday，变量值是holiday对象    variables.put(&quot;evection&quot;, evection);//  设置local变量，作用域为该任务    taskService.setVariablesLocal(taskId, variables);//  完成任务   taskService.complete(taskId);&#125;\n\n\n​       说明：\n设置作用域为任务的local变量，每个任务可以设置同名的变量，互不影响。\n3.6.2、通过当前任务设置@Testpublic void setLocalVariableByTaskId()&#123;//   当前待办任务id    String taskId=&quot;1404&quot;;//  获取processEngine    ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();    TaskService taskService = processEngine.getTaskService();    Evection evection = new Evection ();    evection.setNum(3d);//  通过任务设置流程变量    taskService.setVariableLocal(taskId, &quot;evection&quot;, evection);//  一次设置多个值     //taskService.setVariablesLocal(taskId, variables)&#125;\n\n注意：\n任务id必须是当前待办任务id，act_ru_task中存在。\n3.6.3、  Local变量测试1如果上边例子中设置global变量改为设置local变量是否可行？为什么？\n Local变量在任务结束后无法在当前流程实例执行中使用，如果后续的流程执行需要用到此变量则会报错。\n3.6.4、  Local变量测试2在部门经理审核、总经理审核、财务审核时设置local变量，可通过historyService查询每个历史任务时将流程变量的值也查询出来。\n 代码如下：\n// 创建历史任务查询对象      HistoricTaskInstanceQuery historicTaskInstanceQuery = historyService.createHistoricTaskInstanceQuery();      // 查询结果包括 local变量      historicTaskInstanceQuery.includeTaskLocalVariables();for (HistoricTaskInstance historicTaskInstance : list) &#123;         System.out.println(&quot;==============================&quot;);         System.out.println(&quot;任务id：&quot; + historicTaskInstance.getId());         System.out.println(&quot;任务名称：&quot; + historicTaskInstance.getName());         System.out.println(&quot;任务负责人：&quot; + historicTaskInstance.getAssignee());     System.out.println(&quot;任务local变量：&quot;+ historicTaskInstance.getTaskLocalVariables());&#125;\n\n注意：查询历史流程变量，特别是查询pojo变量需要经过反序列化，不推荐使用。\n四、组任务4.1、需求在流程定义中在任务结点的 assignee 固定设置任务负责人，在流程定义时将参与者固定设置在.bpmn 文件中，如果临时任务负责人变更则需要修改流程定义，系统可扩展性差。\n针对这种情况可以给任务设置多个候选人，可以从候选人中选择参与者来完成任务。 \n4.2、设置任务候选人在流程图中任务节点的配置中设置 candidate-users(候选人)，多个候选人之间用逗号分开。 \n\n查看bpmn文件\n&lt;userTask activiti:candidateUsers=&quot;lisi,wangwu&quot; activiti:exclusive=&quot;true&quot; id=&quot;_3&quot; name=&quot;经理审批&quot;/&gt;\n\n我们可以看到部门经理的审核人已经设置为 lisi,wangwu 这样的一组候选人，可以使用\nactiviti:candiateUsers&#x3D;”用户 1,用户 2,用户 3”的这种方式来实现设置一组候选人 \n4.3、组任务4.3.1、组任务办理流程a、查询组任务指定候选人，查询该候选人当前的待办任务。\n候选人不能立即办理任务。\nb、拾取(claim)任务该组任务的所有候选人都能拾取。\n将候选人的组任务，变成个人任务。原来候选人就变成了该任务的负责人。\n如果拾取后不想办理该任务？\n   需要将已经拾取的个人任务归还到组里边，将个人任务变成了组任务。\nc、查询个人任务查询方式同个人任务部分，根据assignee查询用户负责的个人任务。\nd、办理个人任务4.3.2、  查询组任务 根据候选人查询组任务\n @Test    public void findGroupTaskList() &#123;       // 流程定义key       String processDefinitionKey = &quot;evection3&quot;;       // 任务候选人       String candidateUser = &quot;lisi&quot;;        //  获取processEngine       ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();       // 创建TaskService       TaskService taskService = processEngine.getTaskService();       //查询组任务       List&lt;Task&gt; list = taskService.createTaskQuery()              .processDefinitionKey(processDefinitionKey)              .taskCandidateUser(candidateUser)//根据候选人查询              .list();       for (Task task : list) &#123;           System.out.println(&quot;----------------------------&quot;);           System.out.println(&quot;流程实例id：&quot; + task.getProcessInstanceId());           System.out.println(&quot;任务id：&quot; + task.getId());           System.out.println(&quot;任务负责人：&quot; + task.getAssignee());           System.out.println(&quot;任务名称：&quot; + task.getName());       &#125;    &#125;\n\n\n\n4.3.3 、 拾取组任务 候选人员拾取组任务后该任务变为自己的个人任务。\n @Test    public void claimTask()&#123;         //  获取processEngine       ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();       TaskService taskService = processEngine.getTaskService();       //要拾取的任务id       String taskId = &quot;6302&quot;;       //任务候选人id       String userId = &quot;lisi&quot;;       //拾取任务       //即使该用户不是候选人也能拾取(建议拾取时校验是否有资格)           //校验该用户有没有拾取任务的资格       Task task = taskService.createTaskQuery()              .taskId(taskId)              .taskCandidateUser(userId)//根据候选人查询              .singleResult();       if(task!=null)&#123;         //拾取任务           taskService.claim(taskId, userId);           System.out.println(&quot;任务拾取成功&quot;);       &#125;    &#125;\n\n说明：即使该用户不是候选人也能拾取，建议拾取时校验是否有资格\n组任务拾取后，该任务已有负责人，通过候选人将查询不到该任务\n4.3.4、  查询个人待办任务 查询方式同个人任务查询\n @Testpublic void findPersonalTaskList() &#123;    // 流程定义key    String processDefinitionKey = &quot;evection1&quot;;    // 任务负责人    String assignee = &quot;zhangsan&quot;;     //  获取processEngine       ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();    // 创建TaskService    TaskService taskService = processEngine.getTaskService();    List&lt;Task&gt; list = taskService.createTaskQuery()        .processDefinitionKey(processDefinitionKey)        .taskAssignee(assignee)        .list();    for (Task task : list) &#123;        System.out.println(&quot;----------------------------&quot;);        System.out.println(&quot;流程实例id：&quot; + task.getProcessInstanceId());        System.out.println(&quot;任务id：&quot; + task.getId());        System.out.println(&quot;任务负责人：&quot; + task.getAssignee());        System.out.println(&quot;任务名称：&quot; + task.getName());    &#125;&#125;\n\n4.3.5、  办理个人任务同个人任务办理\n /*完成任务*/   @Test   public void completeTask()&#123;//     任务ID      String taskId = &quot;12304&quot;;//     获取processEngine      ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();      processEngine.getTaskService()                   .complete(taskId);      System.out.println(&quot;完成任务：&quot;+taskId);   &#125;\n\n说明：建议完成任务前校验该用户是否是该任务的负责人。\n4.3.6、  归还组任务 如果个人不想办理该组任务，可以归还组任务，归还后该用户不再是该任务的负责人\n/**归还组任务，由个人任务变为组任务，还可以进行任务交接*/@Testpublic void setAssigneeToGroupTask() &#123;    //  获取processEngine       ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();   // 查询任务使用TaskService   TaskService taskService = processEngine.getTaskService();   // 当前待办任务   String taskId = &quot;6004&quot;;   // 任务负责人   String userId = &quot;zhangsan2&quot;;    // 校验userId是否是taskId的负责人，如果是负责人才可以归还组任务   Task task = taskService       .createTaskQuery()       .taskId(taskId)       .taskAssignee(userId)       .singleResult();    if (task != null) &#123;       // 如果设置为null，归还组任务,该 任务没有负责人       taskService.setAssignee(taskId, null);    &#125;&#125;\n\n 说明：建议归还任务前校验该用户是否是该任务的负责人\n也可以通过setAssignee方法将任务委托给其它用户负责，注意被委托的用户可以不是候选人（建议不要这样使用）\n4.3.7、  任务交接任务交接,任务负责人将任务交给其它候选人办理该任务\n @Test    public void setAssigneeToCandidateUser() &#123;        //  获取processEngine       ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();       // 查询任务使用TaskService       TaskService taskService = processEngine.getTaskService();       // 当前待办任务       String taskId = &quot;6004&quot;;       // 任务负责人       String userId = &quot;zhangsan2&quot;;// 将此任务交给其它候选人办理该 任务           String candidateuser = &quot;zhangsan&quot;;       // 校验userId是否是taskId的负责人，如果是负责人才可以归还组任务       Task task = taskService           .createTaskQuery()           .taskId(taskId)           .taskAssignee(userId)           .singleResult();       if (task != null) &#123;           taskService.setAssignee(taskId, candidateuser);       &#125;    &#125;\n\n\n\n4.3.8、  数据库表操作查询当前任务执行表\nSELECT * FROM act_ru_task \n\n任务执行表，记录当前执行的任务，由于该任务当前是组任务，所有assignee为空，当拾取任务后该字段就是拾取用户的id\n查询任务参与者\nSELECT * FROM act_ru_identitylink\n\n 任务参与者，记录当前参考任务用户或组，当前任务如果设置了候选人，会向该表插入候选人记录，有几个候选就插入几个\n与act_ru_identitylink对应的还有一张历史表act_hi_identitylink，向act_ru_identitylink插入记录的同时也会向历史表插入记录。任务完成\n五、网关网关用来控制流程的流向\n5.1 排他网关ExclusiveGateway5.1.1  什么是排他网关：排他网关，用来在流程中实现决策。 当流程执行到这个网关，所有分支都会判断条件是否为true，如果为true则执行该分支，\n注意：排他网关只会选择一个为true的分支执行。如果有两个分支条件都为true，排他网关会选择id值较小的一条分支去执行。\n为什么要用排他网关？\n不用排他网关也可以实现分支，如：在连线的condition条件上设置分支条件。\n在连线设置condition条件的缺点：如果条件都不满足，流程就结束了(是异常结束)。\n如果 使用排他网关决定分支的走向，如下：\n\n如果从网关出去的线所有条件都不满足则系统抛出异常。\norg.activiti.engine.ActivitiException: No outgoing sequence flow of the exclusive gateway &#x27;exclusivegateway1&#x27; could be selected for continuing the process   at org.activiti.engine.impl.bpmn.behavior.ExclusiveGatewayActivityBehavior.leave(ExclusiveGatewayActivityBehavior.java:85)\n\n\n\n5.1.2  流程定义 排他网关图标，红框内：\n\n5.1.3  测试在部门经理审核后，走排他网关，从排他网关出来的分支有两条，一条是判断出差天数是否大于3天，另一条是判断出差天数是否小于等于3天。\n设置分支条件时，如果所有分支条件都不是true，报错：\norg.activiti.engine.ActivitiException: No outgoing sequence flow of the exclusive gateway &#x27;exclusivegateway1&#x27; could be selected for continuing the process       at org.activiti.engine.impl.bpmn.behavior.ExclusiveGatewayActivityBehavior.leave(ExclusiveGatewayActivityBehavior.java:85)\n\n5.2 并行网关ParallelGateway5.2.1  什么是并行网关并行网关允许将流程分成多条分支，也可以把多条分支汇聚到一起，并行网关的功能是基于进入和外出顺序流的：\nl  fork分支：\n 并行后的所有外出顺序流，为每个顺序流都创建一个并发分支。\nl  join汇聚： \n所有到达并行网关，在此等待的进入分支， 直到所有进入顺序流的分支都到达以后， 流程就会通过汇聚网关。\n注意，如果同一个并行网关有多个进入和多个外出顺序流， 它就同时具有分支和汇聚功能。 这时，网关会先汇聚所有进入的顺序流，然后再切分成多个并行分支。\n与其他网关的主要区别是，并行网关不会解析条件。 即使顺序流中定义了条件，也会被忽略。\n例子：\n\n说明：\n技术经理和项目经理是两个execution分支，在act_ru_execution表有两条记录分别是技术经理和项目经理，act_ru_execution还有一条记录表示该流程实例。\n待技术经理和项目经理任务全部完成，在汇聚点汇聚，通过parallelGateway并行网关。\n并行网关在业务应用中常用于会签任务，会签任务即多个参与者共同办理的任务。\n5.2.2  流程定义并行网关图标，红框内：\n\n5.2.3  测试当执行到并行网关数据库跟踪如下：\n当前任务表：SELECT * FROM act_ru_task   \n\n上图中：有两个任务当前执行。\n查询流程实例执行表：SELECT * FROM act_ru_execution \n\n上图中，说明当前流程实例有多个分支(两个)在运行。\n对并行任务的执行：\n并行任务执行不分前后，由任务的负责人去执行即可。\n执行技术经理任务后，查询当前任务表 SELECT * FROM act_ru_task   \n\n已完成的技术经理任务在当前任务表act_ru_task_已被删除。\n在流程实例执行表：SELECT * FROM act_ru_execution有中多个分支存在且有并行网关的汇聚结点。\n\n有并行网关的汇聚结点：说明有一个分支已经到汇聚，等待其它的分支到达。\n当所有分支任务都完成，都到达汇聚结点后：\n流程实例执行表：SELECT * FROM act_ru_execution，执行流程实例已经变为总经理审批，说明流程执行已经通过并行网关\n\n总结：所有分支到达汇聚结点，并行网关执行完成。         \n5.3    包含网关InclusiveGateway5.3.1  什么是包含网关包含网关可以看做是排他网关和并行网关的结合体。 \n和排他网关一样，你可以在外出顺序流上定义条件，包含网关会解析它们。 但是主要的区别是包含网关可以选择多于一条顺序流，这和并行网关一样。\n包含网关的功能是基于进入和外出顺序流的：\nl  分支： \n所有外出顺序流的条件都会被解析，结果为true的顺序流会以并行方式继续执行， 会为每个顺序流创建一个分支。\nl  汇聚：\n 所有并行分支到达包含网关，会进入等待状态， 直到每个包含流程token的进入顺序流的分支都到达。 这是与并行网关的最大不同。换句话说，包含网关只会等待被选中执行了的进入顺序流。 在汇聚之后，流程会穿过包含网关继续执行。\n5.3.2  流程定义：出差申请大于等于3天需要由项目经理审批，小于3天由技术经理审批，出差申请必须经过人事经理审批。\n 包含网关图标，红框内：\n \n定义流程：\n\n注意：通过包含网关的每个分支的连线上设置condition条件。\n5.3.3  测试如果包含网关设置的条件中，流程变量不存在，报错;\norg.activiti.engine.ActivitiException: Unknown property used in expression: $&#123;evection.num&gt;=3&#125;\n\n需要在流程启动时设置流程变量evection.num。\n1）、当流程执行到第一个包含网关后，会根据条件判断，当前要走哪几个分支：\n流程实例执行表：SELECT * FROM act_ru_execution\n\n第一条记录：包含网关分支。\n后两条记录代表两个要执行的分支：\nACT_ID &#x3D; “_13” 代表 项目经理神品\nACT_ID &#x3D; “_5” 代表 人事经理审批\n当前任务表：ACT_RU_TASK\n\n上图中，项目经理审批、人事经理审批 都是当前的任务，在并行执行。\n如果有一个分支执行先走到汇聚结点的分支，要等待其它执行分支走到汇聚。\n2）、先执行项目经理审批，然后查询当前任务表：ACT_RU_TASK\n\n当前任务还有人事经理审批需要处理。\n流程实例执行表：SELECT * FROM act_ru_execution\n\n发现人事经理的分支还存在，而项目经理分支已经走到ACT_ID &#x3D; _18的节点。而ACT_ID&#x3D;__18就是第二个包含网关\n这时，因为有2个分支要执行，包含网关会等所有分支走到汇聚才能执行完成。\n3）、执行人事经理审批\n然后查询当前任务表：ACT_RU_TASK\n\n当前任务表已经不是人事经理审批了，说明人事经理审批已经完成。 \n流程实例执行表：SELECT * FROM act_ru_execution\n\n包含网关执行完成，分支和汇聚就从act_ru_execution删除。\n小结：在分支时，需要判断条件，符合条件的分支，将会执行，符合条件的分支最终才进行汇聚。\n5.4 事件网关EventGateway事件网关允许根据事件判断流向。网关的每个外出顺序流都要连接到一个中间捕获事件。 当流程到达一个基于事件网关，网关会进入等待状态：会暂停执行。与此同时，会为每个外出顺序流创建相对的事件订阅。\n事件网关的外出顺序流和普通顺序流不同，这些顺序流不会真的”执行”， 相反它们让流程引擎去决定执行到事件网关的流程需要订阅哪些事件。 要考虑以下条件：\n\n事件网关必须有两条或以上外出顺序流；\n事件网关后，只能使用intermediateCatchEvent类型（activiti不支持基于事件网关后连接ReceiveTask）\n连接到事件网关的中间捕获事件必须只有一个入口顺序流。\n\n5.4.1流程定义事件网关图标，红框内\n\nintermediateCatchEvent：\n\nintermediateCatchEvent支持的事件类型：\nMessage Event: 消息事件\nSingal Event：  信号事件\nTimer Event：  定时事件\n\n使用事件网关定义流程：\n\n","categories":["技术"],"tags":["工作流","黑马","activiti7"]},{"title":"Hello World","url":"/2025/06/19/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"Activiti整合Spring","url":"/2025/06/19/Activiti%E9%9B%86%E6%88%90/","content":"Activiti整合Spring一、Activiti与Spring整合开发1.1 Activiti与Spring整合的配置1)、在pom.xml文件引入坐标如下\n&lt;properties&gt;        &lt;slf4j.version&gt;1.6.6&lt;/slf4j.version&gt;        &lt;log4j.version&gt;1.2.12&lt;/log4j.version&gt;&lt;/properties&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.activiti&lt;/groupId&gt;        &lt;artifactId&gt;activiti-engine&lt;/artifactId&gt;        &lt;version&gt;7.0.0.Beta1&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.activiti&lt;/groupId&gt;        &lt;artifactId&gt;activiti-spring&lt;/artifactId&gt;        &lt;version&gt;7.0.0.Beta1&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.activiti&lt;/groupId&gt;        &lt;artifactId&gt;activiti-bpmn-model&lt;/artifactId&gt;        &lt;version&gt;7.0.0.Beta1&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.activiti&lt;/groupId&gt;        &lt;artifactId&gt;activiti-bpmn-converter&lt;/artifactId&gt;        &lt;version&gt;7.0.0.Beta1&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.activiti&lt;/groupId&gt;        &lt;artifactId&gt;activiti-json-converter&lt;/artifactId&gt;        &lt;version&gt;7.0.0.Beta1&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.activiti&lt;/groupId&gt;        &lt;artifactId&gt;activiti-bpmn-layout&lt;/artifactId&gt;        &lt;version&gt;7.0.0.Beta1&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.activiti.cloud&lt;/groupId&gt;        &lt;artifactId&gt;activiti-cloud-services-api&lt;/artifactId&gt;        &lt;version&gt;7.0.0.Beta1&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;aspectj&lt;/groupId&gt;        &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;        &lt;version&gt;1.5.4&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;5.1.40&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;4.12&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;        &lt;version&gt;5.0.7.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- log start --&gt;    &lt;dependency&gt;        &lt;groupId&gt;log4j&lt;/groupId&gt;        &lt;artifactId&gt;log4j&lt;/artifactId&gt;        &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;        &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;        &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;        &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;        &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;        &lt;artifactId&gt;slf4j-nop&lt;/artifactId&gt;        &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- log end --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;        &lt;version&gt;3.4.5&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;commons-dbcp&lt;/groupId&gt;        &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;        &lt;version&gt;1.4&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;&lt;repositories&gt;    &lt;repository&gt;        &lt;id&gt;alfresco&lt;/id&gt;        &lt;name&gt;Activiti Releases&lt;/name&gt;        &lt;url&gt;https://artifacts.alfresco.com/nexus/content/repositories/activiti-releases/&lt;/url&gt;        &lt;releases&gt;            &lt;enabled&gt;true&lt;/enabled&gt;        &lt;/releases&gt;    &lt;/repository&gt;&lt;/repositories&gt;\n\n在Activiti中核心类的是ProcessEngine流程引擎，与Spring整合就是让Spring来管理ProcessEngine\n通过org.activiti.spring.SpringProcessEngineConfiguration 与Spring整合方式来创建ProcessEngine对象。 \n 创建spring与activiti的整合配置文件：activiti-spring.xml（名称不固定）\n2)、创建activiti-spring.xml&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/tx        http://www.springframework.org/schema/tx/spring-tx.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;    &lt;!-- 数据源 --&gt;    &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/activiti&quot;/&gt;        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;        &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;        &lt;property name=&quot;maxActive&quot; value=&quot;3&quot;/&gt;        &lt;property name=&quot;maxIdle&quot; value=&quot;1&quot;/&gt;    &lt;/bean&gt;    &lt;!-- 工作流引擎配置bean --&gt;    &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.spring.SpringProcessEngineConfiguration&quot;&gt;        &lt;!-- 数据源 --&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;        &lt;!-- 使用spring事务管理器 --&gt;        &lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot;/&gt;        &lt;!-- 数据库策略 --&gt;        &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;drop-create&quot;/&gt;    &lt;/bean&gt;    &lt;!-- 流程引擎 --&gt;    &lt;bean id=&quot;processEngine&quot; class=&quot;org.activiti.spring.ProcessEngineFactoryBean&quot;&gt;        &lt;property name=&quot;processEngineConfiguration&quot; ref=&quot;processEngineConfiguration&quot;/&gt;    &lt;/bean&gt;    &lt;!-- 资源服务service --&gt;    &lt;bean id=&quot;repositoryService&quot; factory-bean=&quot;processEngine&quot; factory-method=&quot;getRepositoryService&quot;/&gt;    &lt;!-- 流程运行service --&gt;    &lt;bean id=&quot;runtimeService&quot; factory-bean=&quot;processEngine&quot;  factory-method=&quot;getRuntimeService&quot;/&gt;    &lt;!-- 任务管理service --&gt;    &lt;bean id=&quot;taskService&quot; factory-bean=&quot;processEngine&quot; factory-method=&quot;getTaskService&quot;/&gt;    &lt;!-- 历史管理service --&gt;    &lt;bean id=&quot;historyService&quot; factory-bean=&quot;processEngine&quot; factory-method=&quot;getHistoryService&quot;/&gt;    &lt;!-- 事务管理器 --&gt;    &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;    &lt;/bean&gt;    &lt;!-- 通知 --&gt;    &lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;        &lt;tx:attributes&gt;            &lt;!-- 传播行为 --&gt;            &lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot;/&gt;            &lt;tx:method name=&quot;insert*&quot; propagation=&quot;REQUIRED&quot;/&gt;            &lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot;/&gt;            &lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot;/&gt;            &lt;tx:method name=&quot;find*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot;/&gt;            &lt;tx:method name=&quot;get*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot;/&gt;        &lt;/tx:attributes&gt;    &lt;/tx:advice&gt;    &lt;!-- 切面，根据具体项目修改切点配置    &lt;aop:config proxy-target-class=&quot;true&quot;&gt;        &lt;aop:advisor advice-ref=&quot;txAdvice&quot;                     pointcut=&quot;execution(*com.itheima.service.impl..(..))&quot;/&gt;    &lt;/aop:config&gt;--&gt;&lt;/beans&gt;\n\ndatabaseSchemaUpdate的取值内容：\nflase：       默认值。activiti在启动时，会对比数据库表中保存的版本，如果没有表或者版本不匹配，将抛出异常。（生产环境常用）true：        activiti会对数据库中所有表进行更新操作。如果表不存在，则自动创建。（开发时常用）create_drop： 在activiti启动时创建表，在关闭时删除表（必须手动关闭引擎，才能删除表）。（单元测试常用）drop-create： 在activiti启动时删除原来的旧表，然后在创建新表（不需要手动关闭引擎）。\n1.2 测试Activiti与Spring整合1）、测试代码/**   测试activiti与spring整合是否成功**/@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(locations = &quot;classpath:activiti-spring.xml&quot;) public class ActivitiTest &#123;     @Autowired     private RepositoryService repositoryService;          @Test     public void test01()&#123;         System.out.println(&quot;部署对象:&quot;+repositoryService);     &#125; &#125;\n\n\n\n2）、执行流程分析下面我们一起来分析Activiti与Spring整合加载的过程。\n1、加载activiti-spring.xml配置文件\n2、加载SpringProcessEngineConfiguration对象，这个对象它需要依赖注入dataSource对象和transactionManager对象。\n3、加载ProcessEngineFactoryBean工厂来创建ProcessEngine对象，而ProcessEngineFactoryBean工厂又需要依赖注入processEngineConfiguration对象。\n4、processEngine对象来负责创建我们的Service对象，从而简化Activiti的开发过程。\n二、Activiti7与SpringBoot整合开发Activiti7发布正式版之后，它与SpringBoot2.x已经完全支持整合开发。\n2.1     SpringBoot整合Activiti7的配置为了能够实现SpringBoot与Activiti7整合开发，首先我们要引入相关的依赖支持。\n在工程的pom.xml文件中引入相关的依赖，其中activiti的依赖是：activiti-spring-boot-starter。\n具体依赖如下所示：\n&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;&lt;/parent&gt;&lt;properties&gt;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;    &lt;java.version&gt;1.8&lt;/java.version&gt;&lt;/properties&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.activiti&lt;/groupId&gt;        &lt;artifactId&gt;activiti-spring-boot-starter&lt;/artifactId&gt;        &lt;version&gt;7.0.0.Beta2&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;5.1.29&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;        &lt;artifactId&gt;lombok&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;\n\n通过该pom.xml文件所导入的坐标，我们就可以实现activiti7与Springboot整合。\n2.2    SpringBoot的application.yml文件配置为了能够实现Activiti7生成的表放到Mysql数据库中，需要在配置文件application.yml中添加相关的配置\n注意：activiti7默认没有开启数据库历史记录，需要手动配置开启\nspring:  datasource:    url: jdbc:mysql:///activiti?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT    username: root    password: 123456    driver-class-name: com.mysql.jdbc.Driver  activiti:    #1.flase：默认值。activiti在启动时，对比数据库表中保存的版本，如果没有表或者版本不匹配，将抛出异常    #2.true： activiti会对数据库中所有表进行更新操作。如果表不存在，则自动创建    #3.create_drop： 在activiti启动时创建表，在关闭时删除表（必须手动关闭引擎，才能删除表）    #4.drop-create： 在activiti启动时删除原来的旧表，然后在创建新表（不需要手动关闭引擎）    database-schema-update: true    #检测历史表是否存在 activiti7默认没有开启数据库历史记录 启动数据库历史记录    db-history-used: true    #记录历史等级 可配置的历史级别有none, activity, audit, full    #none：不保存任何的历史数据，因此，在流程执行过程中，这是最高效的。    #activity：级别高于none，保存流程实例与流程行为，其他数据不保存。    #audit：除activity级别会保存的数据外，还会保存全部的流程任务及其属性。audit为history的默认值。    #full：保存历史数据的最高级别，除了会保存audit级别的数据外，还会保存其他全部流程相关的细节数据，包括一些流程参数等。    history-level: full    #校验流程文件，默认校验resources下的processes文件夹里的流程文件    check-process-definitions: false\n\n2.3 编写启动类package com.itheima;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class ActApplication &#123;    public static void main(String[] args) &#123;        SpringApplication.run(ActApplication.class,args);    &#125;&#125;\n\n2.4    添加SpringSecurity安全框架整合配置因为Activiti7与SpringBoot整合后，默认情况下，集成了SpringSecurity安全框架，这样我们就要去准备SpringSecurity整合进来的相关用户权限配置信息。\nSpringBoot的依赖包已经将SpringSecurity的依赖包也添加进项目中。\n2.4.1  添加SecurityUtil类为了能够快速实现SpringSecurity安全框架的配置，所添加的一个组件。\npackage com.itheima.utils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.security.core.Authentication;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.context.SecurityContextImpl;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.stereotype.Component;import java.util.Collection;@Componentpublic class SecurityUtil &#123;    private Logger logger = LoggerFactory.getLogger(SecurityUtil.class);     @Autowired     @Qualifier(&quot;myUserDetailsService&quot;)     private UserDetailsService userDetailsService;     public void logInAs(String username) &#123;     UserDetails user = userDetailsService.loadUserByUsername(username);     if (user == null) &#123;         throw new IllegalStateException(&quot;User &quot; + username + &quot; doesn&#x27;t exist, please provide a valid user&quot;);     &#125;     logger.info(&quot;&gt; Logged in as: &quot; + username);     SecurityContextHolder.setContext(             new SecurityContextImpl(                     new Authentication() &#123;                         @Override                         public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;                             return user.getAuthorities();                         &#125;                         @Override                         public Object getCredentials() &#123;                             return user.getPassword();                         &#125;                         @Override                         public Object getDetails() &#123;                             return user;                         &#125;                         @Override                         public Object getPrincipal() &#123;                             return user;                         &#125;                         @Override                         public boolean isAuthenticated() &#123;                             return true;                         &#125;                         @Override                         public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException &#123; &#125;                         @Override                         public String getName() &#123;                             return user.getUsername();                         &#125;     &#125;));     org.activiti.engine.impl.identity.Authentication.setAuthenticatedUserId(username); &#125;  &#125;\n这个类可以从我们下载的Activiti7官方提供的Example中找到。\n2.4.2  添加DemoApplicationConfig类在Activiti7官方下载的Example中找到DemoApplicationConfig类，它的作用是为了实现SpringSecurity框架的用户权限的配置，这样我们就可以在系统中使用用户权限信息。\n本次项目中基本是在文件中定义出来的用户信息，当然也可以是数据库中查询的用户权限信息。\n后面处理流程时用到的任务负责人，需要添加在这里\npackage com.itheima.config;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.User;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.provisioning.InMemoryUserDetailsManager;import java.util.Arrays;import java.util.List;import java.util.stream.Collectors;@Configurationpublic class DemoApplicationConfiguration &#123;    private Logger logger = LoggerFactory.getLogger(DemoApplicationConfiguration.class);     @Bean     public UserDetailsService myUserDetailsService() &#123;         InMemoryUserDetailsManager inMemoryUserDetailsManager = new InMemoryUserDetailsManager();         //这里添加用户，后面处理流程时用到的任务负责人，需要添加在这里         String[][] usersGroupsAndRoles = &#123;                 &#123;&quot;jack&quot;, &quot;password&quot;, &quot;ROLE_ACTIVITI_USER&quot;, &quot;GROUP_activitiTeam&quot;&#125;,                 &#123;&quot;rose&quot;, &quot;password&quot;, &quot;ROLE_ACTIVITI_USER&quot;, &quot;GROUP_activitiTeam&quot;&#125;,                 &#123;&quot;tom&quot;, &quot;password&quot;, &quot;ROLE_ACTIVITI_USER&quot;, &quot;GROUP_activitiTeam&quot;&#125;,                 &#123;&quot;other&quot;, &quot;password&quot;, &quot;ROLE_ACTIVITI_USER&quot;, &quot;GROUP_otherTeam&quot;&#125;,                 &#123;&quot;system&quot;, &quot;password&quot;, &quot;ROLE_ACTIVITI_USER&quot;&#125;,                 &#123;&quot;admin&quot;, &quot;password&quot;, &quot;ROLE_ACTIVITI_ADMIN&quot;&#125;,         &#125;;         for (String[] user : usersGroupsAndRoles) &#123;             List&lt;String&gt; authoritiesStrings = Arrays.asList(Arrays.copyOfRange(user, 2, user.length));             logger.info(&quot;&gt; Registering new user: &quot; + user[0] + &quot; with the following Authorities[&quot; + authoritiesStrings + &quot;]&quot;);             inMemoryUserDetailsManager.createUser(new User(user[0], passwordEncoder().encode(user[1]),                     authoritiesStrings.stream().map(s -&gt; new SimpleGrantedAuthority(s)).collect(Collectors.toList())));         &#125;         return inMemoryUserDetailsManager;     &#125;     @Bean     public PasswordEncoder passwordEncoder() &#123;         return new BCryptPasswordEncoder();     &#125;&#125;\n\n2.5 创建Bpmn文件Activiti7可以自动部署流程，前提是在resources目录下，创建一个新的目录processes，用来放置bpmn文件。\n创建一个简单的Bpmn流程文件，并设置任务的用户组Candidate Groups。\nCandidate Groups中的内容与上面DemoApplicationConfiguration类中出现的用户组名称要保持一致，可以填写：activitiTeam 或者 otherTeam。\n这样填写的好处：当不确定到底由谁来负责当前任务的时候，只要是Groups内的用户都可以拾取这个任务\n\n2.6    使用Junit方式测试package com.itheima.test;import com.itheima.utils.SecurityUtil;import org.activiti.api.process.model.ProcessInstance;import org.activiti.api.process.model.builders.ProcessPayloadBuilder;import org.activiti.api.process.runtime.ProcessRuntime;import org.activiti.api.runtime.shared.query.Page;import org.activiti.api.runtime.shared.query.Pageable;import org.activiti.api.task.model.Task;import org.activiti.api.task.model.builders.TaskPayloadBuilder;import org.activiti.api.task.runtime.TaskRuntime;import org.activiti.engine.repository.ProcessDefinition;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTest public class Actviti7DemoApplicationTests &#123;     @Autowired     private ProcessRuntime processRuntime;     @Autowired     private TaskRuntime taskRuntime;     @Autowired     private SecurityUtil securityUtil;    @Test    public void testActBoot()&#123;        System.out.println(taskRuntime);    &#125;    /**     * 查看流程定义     */    @Test    public void contextLoads() &#123;        securityUtil.logInAs(&quot;system&quot;);        Page&lt;org.activiti.api.process.model.ProcessDefinition&gt; processDefinitionPage =                processRuntime.processDefinitions(Pageable.of(0, 10));        System.out.println(&quot;可用的流程定义数量：&quot; + processDefinitionPage.getTotalItems());        for (org.activiti.api.process.model.ProcessDefinition pd : processDefinitionPage.getContent()) &#123;            System.out.println(&quot;流程定义：&quot; + pd);        &#125;    &#125;    /**     * 启动流程实例     */    @Test    public void testStartProcess() &#123;        securityUtil.logInAs(&quot;system&quot;);        ProcessInstance pi = processRuntime.start(ProcessPayloadBuilder.                start().                withProcessDefinitionKey(&quot;myProcess&quot;).                build());        System.out.println(&quot;流程实例ID：&quot; + pi.getId());    &#125;    /**     **查询任务，并完成自己的任务     **/    @Test    public void testTask() &#123;        securityUtil.logInAs(&quot;jack&quot;);        Page&lt;Task&gt; taskPage=taskRuntime.tasks(Pageable.of(0,10));        if (taskPage.getTotalItems()&gt;0)&#123;            for (Task task:taskPage.getContent())&#123;                taskRuntime.claim(TaskPayloadBuilder.                        claim().                        withTaskId(task.getId()).build());                System.out.println(&quot;任务：&quot;+task);                taskRuntime.complete(TaskPayloadBuilder.                        complete().                        withTaskId(task.getId()).build());            &#125;        &#125;        Page&lt;Task&gt; taskPage2=taskRuntime.tasks(Pageable.of*(0,10));        if (taskPage2.getTotalItems()&gt;0)&#123;            System.out.println(&quot;任务：&quot;+taskPage2.getContent());        &#125;    &#125;&#125;\n\n\n\n","categories":["技术"],"tags":["工作流","黑马","activiti7"]},{"title":"模板-input只能输入数字","url":"/2025/06/19/%E6%A8%A1%E6%9D%BF-input%E5%8F%AA%E8%83%BD%E8%BE%93%E5%85%A5%E6%95%B0%E5%AD%97/","content":"element-ui中\n让input只能输入数值的正则判断\n\n// 组件&lt;el-form-item label=&quot;认款金额：&quot;&gt;\t&lt;el-input class=&quot;fontsize&quot; v-model=&quot;dialogForm.subscriptionAmount&quot;\t\tstyle=&quot;width: 180px;&quot; placeholder=&quot;请输入认款金额&quot;\t\t@input.native=&quot;handleInput2&quot;&gt;&lt;/el-input&gt;&lt;/el-form-item&gt;\n\n// jshandleInput2(event) &#123;\tconst val = event.target.value.replace(/[^\\d.-]/g, &#x27;&#x27;);\tthis.dialogForm.subscriptionAmount = val;\t// 强制同步到input框中（重要）\tevent.target.value = val;&#125;,","categories":["技术"],"tags":["模板","前端"]},{"title":"模板-java查询条件封装","url":"/2025/06/19/%E6%A8%A1%E6%9D%BF-java%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%E5%B0%81%E8%A3%85/","content":"条件封装模板public QueryWrapper&lt;Entity&gt; buildQueryWrapper(QueryVO query) &#123;      QueryWrapper&lt;Entity&gt; wrapper = new QueryWrapper&lt;&gt;();        // 精准匹配字段      if (StringUtils.isNotBlank(query.getStatus())) &#123;          wrapper.eq(&quot;status&quot;, query.getStatus());      &#125;        // 模糊搜索      if (StringUtils.isNotBlank(query.getKeyword())) &#123;          wrapper.and(w -&gt;               w.like(&quot;title&quot;, query.getKeyword())               .or()               .like(&quot;description&quot;, query.getKeyword())          );      &#125;        // 日期范围（注意时间为空情况）      if (query.getStartTime() != null) &#123;          wrapper.ge(&quot;create_time&quot;, query.getStartTime());      &#125;      if (query.getEndTime() != null) &#123;          wrapper.le(&quot;create_time&quot;, query.getEndTime());      &#125;        // 数值范围      if (query.getMinAmount() != null) &#123;          wrapper.ge(&quot;amount&quot;, query.getMinAmount());      &#125;      if (query.getMaxAmount() != null) &#123;          wrapper.le(&quot;amount&quot;, query.getMaxAmount());      &#125;        // 排序（可选）      wrapper.orderByDesc(&quot;create_time&quot;);        return wrapper;  &#125;","categories":["技术"],"tags":["后端","模板"]},{"title":"前后端参数传递的注意事项","url":"/2025/07/02/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/","content":"情况复现queryVO定义为\n@Datapublic class PaApplyRecordsQueryVO &#123;    // 查询请求带的参数    private String busineCoding;    private String expenseCoding;    private Integer companyId;    private String companyCode;    private Integer departmentId;    private String departmentCode;    private Integer applyStatus;    private Integer invoiceStatus;    private Integer projectId;    private String project;    private String applyUserId;    private List&lt;BigDecimal&gt; paymentAmount;    private List&lt;String&gt; applyTime;    private List&lt;String&gt; payTime;    // 分页参数    private Integer pageNum = 1;    private Integer pageSize = 10;&#125;\n\n这其中定义的数据类型严格来说都是复合类型，这里涉及到的主要是如 List 这样的情况，\ngpt是这样回答这个问题的：\n你使用了 GET 请求，同时参数中包含 List&lt;BigDecimal&gt; paymentAmount，但 Spring Boot 默认无法将复杂类型数组自动映射到对象中的 List 字段。\n\n所以在传参时，只能将注解写为@PostMapping，并使用@RequestBody注解\n@PostMapping(&quot;/listAll&quot;)public Result&lt;List&lt;PaApplyRecordsRespVO&gt;&gt; listAll(@RequestBody PaApplyRecordsQueryVO queryVO)&#123;    return Result.ok(paApplyRecordsService.getAllListByParams(queryVO));&#125;\n\n这意味着当在JSON格式的参数传递存在复合类型的集合时，都只能使用@PostMapping来传参。\n有用的信息✅ 为什么“只能使用 @PostMapping”？1.\tJSON 格式的请求体（Request Body）\n\n只有 POST、PUT、PATCH 等方法支持发送带有 Request Body 的数据；\nGET 请求按规范不能有有效的 Body，虽然部分浏览器&#x2F;库支持，但 Spring Boot 明确不会处理 GET + @RequestBody；\n所以，只要你要发送 JSON 格式的参数，就必须用 POST 或其它支持 Body 的方法。\n\n\n   复合类型的集合\n\n\nJSON 中的数组、嵌套对象，对应到 Java 中就是 List、Map&lt;K,V&gt;、自定义嵌套类等；\n这些结构只能通过 @RequestBody 来绑定，而不是 @RequestParam；\n\n\n❌ GET 不支持的原因（必须理解）\n\n@GetMapping 是基于 URL 参数（Query Param）的；\nSpring 不会去解析 GET 请求体；\n因此，哪怕你把 JSON 放在 GET 的 body 中发过去，Spring 也不会走 @RequestBody 解析流程。\n\n","categories":["技术"],"tags":["后端","前端"]},{"title":"模板-java转换类converter","url":"/2025/06/19/%E6%A8%A1%E6%9D%BF-java%E8%BD%AC%E6%8D%A2%E7%B1%BBconverter/","content":"写在前面\n比较重要的是  如果要使用BeanUtils.copyProperties(a , b)，字段要对应上，而且copyProperties不能拷list，得拆开一个一个拷。\n如果字段名写成不一样，需要手动get&#x2F;set\n\nvo、dto、entity转换类demo\n前提是转换间字段要能匹配上，定义的一样\n\n@Component  public class PersonalInfoConfigConverter &#123;      public PersonalInfoConfigDTO toDTO(PersonalInfoConfigCreateVO vo)&#123;          PersonalInfoConfigDTO dto = new PersonalInfoConfigDTO();          BeanUtils.copyProperties(vo,dto);          return dto;      &#125;        public PersonalInfoConfigDTO toDTO(PersonalInfoConfigUpdateVO vo)&#123;          PersonalInfoConfigDTO dto = new PersonalInfoConfigDTO();          BeanUtils.copyProperties(vo,dto);          return dto;      &#125;        public PersonalInfoConfigRespVO toVO(PersonalInfoConfigDTO dto)&#123;          PersonalInfoConfigRespVO vo = new PersonalInfoConfigRespVO();          BeanUtils.copyProperties(dto,vo);          return vo;      &#125;        public PersonalInfoConfig toEntity(PersonalInfoConfigDTO dto)&#123;          PersonalInfoConfig entity = new PersonalInfoConfig();          BeanUtils.copyProperties(dto,entity);          return entity;      &#125;        public PersonalInfoConfigDTO toDTO(PersonalInfoConfig entity)&#123;          PersonalInfoConfigDTO dto = new PersonalInfoConfigDTO();          BeanUtils.copyProperties(entity,dto);          return dto;      &#125;        public static PersonalInfoConfigRespVO toRespVO(PersonalInfoConfigDTO dto)&#123;          if(dto == null )return null;          PersonalInfoConfigRespVO vo = new PersonalInfoConfigRespVO();          BeanUtils.copyProperties(dto,vo);          return vo;      &#125;        public List&lt;PersonalInfoConfigRespVO&gt; toRespVOList(List&lt;PersonalInfoConfigDTO&gt; dtoList)&#123;          if(dtoList == null || dtoList.isEmpty())return Collections.emptyList();          return dtoList.stream()                  .map(PersonalInfoConfigConverter::toRespVO)                  .collect(Collectors.toList());      &#125;  &#125;\n\n\n\nDTO VO  List的转换// 错误示例@GetMapping(&quot;/fundList&quot;)  Result&lt;List&lt;ItemWithDetailRespVO&gt;&gt; getFundList()&#123;      List&lt;ItemWithDetailDTO&gt; dtoList = paExpenseConfigService.getFundList();      List&lt;ItemWithDetailRespVO&gt; voList = new ArrayList&lt;&gt;();      BeanUtils.copyProperties(dtoList,voList);      return Result.ok(voList);  &#125;// BeanUtils.copyProperties(Object source,Object target)的设计本意是BeanUtils.copyProperties(sourceBean,targetBean);// 但是在这里，这样写是无效的BeanUtils.copyProperties(List&lt;DTO&gt;,List&lt;VO&gt;);// 它不会作任何元素级别的复制，只会尝试把source(List)中的属性赋值给target(List)，但这些容器类型并没有字段匹配，所以结果是空的。\n\n// 正确操作@GetMapping(&quot;/fundList&quot;)  Result&lt;List&lt;ItemWithDetailRespVO&gt;&gt; getFundList()&#123;      List&lt;ItemWithDetailDTO&gt; dtoList = paExpenseConfigService.getFundList();      List&lt;ItemWithDetailRespVO&gt; voList = dtoList.stream()              .map(dto -&gt; &#123;                  ItemWithDetailRespVO vo = new ItemWithDetailRespVO();                  BeanUtils.copyProperties(dto,vo);                  return vo;              &#125;).collect(Collectors.toList());      return Result.ok(voList);  &#125;","categories":["技术"],"tags":["后端","模板"]},{"title":"模板-vue2分页查询","url":"/2025/06/19/%E6%A8%A1%E6%9D%BF-vue2%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/","content":"目录结构├── controller  │   └── OrderController.java  ├── service  │   ├── OrderService.java  │   └── impl/OrderServiceImpl.java  ├── mapper  │   ├── OrderMapper.java  ├── model  │   ├── dto/OrderPageDTO.java  │   ├── vo/OrderRespVO.java  │   └── entity/Order.java  ├── converter  │   └── OrderConverter.java\n\nJAVADTO@Data  public class OrderPageDTO &#123;      private Integer pageNum;      private Integer pageSize;        private String orderNo;      private String customerName;        private LocalDateTime startTime;      private LocalDateTime endTime;        private BigDecimal minAmount;      private BigDecimal maxAmount;  &#125;\n\nEntity@Data  @TableName(&quot;t_order&quot;)  public class Order &#123;      private Long id;      private String orderNo;      private String customerName;      private LocalDateTime createTime;      private BigDecimal totalAmount;  &#125;\n\nVO@Data  public class OrderRespVO &#123;      private Long id;      private String orderNo;      private String customerName;      private LocalDateTime createTime;      private BigDecimal totalAmount;  &#125;\n\nConverterpublic class OrderConverter &#123;      public static OrderRespVO toRespVO(Order entity) &#123;          if (entity == null) return null;          OrderRespVO vo = new OrderRespVO();          BeanUtils.copyProperties(entity, vo);          return vo;      &#125;  &#125;\n\nMapper@Mapperpublic interface OrderMapper extends BaseMapper&lt;Order&gt;&#123;&#125;\n\nServicepublic interface OrderService &#123;\tIPage&lt;OrderRespVO&gt; page(OrderPageDTO dto);&#125;\n\nIMPL@Service  @RequiredArgsConstructor  public class OrderServiceImpl implements OrderService &#123;      private final OrderMapper orderMapper;      @Override      public IPage&lt;OrderRespVO&gt; page(OrderPageDTO dto) &#123;          Page&lt;Order&gt; page = new Page&lt;&gt;(dto.getPageNum(), dto.getPageSize());            LambdaQueryWrapper&lt;Order&gt; wrapper = new LambdaQueryWrapper&lt;&gt;();          wrapper.like(StringUtils.isNotBlank(dto.getOrderNo()), Order::getOrderNo, dto.getOrderNo());          wrapper.like(StringUtils.isNotBlank(dto.getCustomerName()), Order::getCustomerName, dto.getCustomerName());          wrapper.ge(dto.getStartTime() != null, Order::getCreateTime, dto.getStartTime());          wrapper.le(dto.getEndTime() != null, Order::getCreateTime, dto.getEndTime());          wrapper.ge(dto.getMinAmount() != null, Order::getTotalAmount, dto.getMinAmount());          wrapper.le(dto.getMaxAmount() != null, Order::getTotalAmount, dto.getMaxAmount());            IPage&lt;Order&gt; resultPage = orderMapper.selectPage(page, wrapper);          return resultPage.convert(OrderConverter::toRespVO);      &#125;  &#125;\n\nController@RestController  @RequestMapping(&quot;/api/order&quot;)  @RequiredArgsConstructor  public class OrderController &#123;        private final OrderService orderService;        @GetMapping(&quot;/page&quot;)      public Result&lt;IPage&lt;OrderRespVO&gt;&gt; getOrderPage(OrderPageDTO dto) &#123;          return Result.success(orderService.page(dto));      &#125;  &#125;\n\n前端参数结构&amp;请求方式参数结构 与dto对应data() &#123;    return &#123;      queryParams: &#123;        pageNum: 1,        pageSize: 10,        orderNo: &#x27;&#x27;,              // 模糊查询        customerName: &#x27;&#x27;,         // 模糊查询        startTime: &#x27;&#x27;,            // 开始时间（yyyy-MM-dd HH:mm:ss）        endTime: &#x27;&#x27;,              // 结束时间        minAmount: &#x27;&#x27;,            // 金额范围：最小值        maxAmount: &#x27;&#x27;,            // 金额范围：最大值      &#125;,      orderList: [],      total: 0    &#125;  &#125;\n\n请求方式 以axios为例methods: &#123;    fetchOrderList() &#123;      axios.get(&#x27;/api/order/page&#x27;, &#123;        params: this.queryParams      &#125;).then(res =&gt; &#123;        if (res.data.code === 0) &#123;          this.orderList = res.data.data.records          this.total = res.data.data.total        &#125; else &#123;          this.$message.error(res.data.message || &#x27;获取订单列表失败&#x27;)        &#125;      &#125;).catch(() =&gt; &#123;        this.$message.error(&#x27;网络错误&#x27;)      &#125;)    &#125;  &#125;\n\n分页器(ElementUI)&lt;el-pagination    background    layout=&quot;total, prev, pager, next, jumper&quot;    :current-page.sync=&quot;queryParams.pageNum&quot;    :page-size.sync=&quot;queryParams.pageSize&quot;    :total=&quot;total&quot;    @current-change=&quot;fetchOrderList&quot;    @size-change=&quot;fetchOrderList&quot;  /&gt;\n\n\ndata() &#123;    return &#123;      timeRange: []    &#125;  &#125;,  methods: &#123;    handleTimeRangeChange(val) &#123;      if (val &amp;&amp; val.length === 2) &#123;        this.queryParams.startTime = val[0] + &#x27; 00:00:00&#x27;        this.queryParams.endTime = val[1] + &#x27; 23:59:59&#x27;      &#125; else &#123;        this.queryParams.startTime = &#x27;&#x27;        this.queryParams.endTime = &#x27;&#x27;      &#125;    &#125;,    resetQuery() &#123;      this.queryParams = &#123;        pageNum: 1,        pageSize: 10,        orderNo: &#x27;&#x27;,        customerName: &#x27;&#x27;,        startTime: &#x27;&#x27;,        endTime: &#x27;&#x27;,        minAmount: &#x27;&#x27;,        maxAmount: &#x27;&#x27;      &#125;      this.timeRange = []      this.fetchOrderList()    &#125;  &#125;","categories":["技术"],"tags":["后端","模板","前端"]},{"title":"模板-js中CRUD函数","url":"/2025/06/19/%E6%A8%A1%E6%9D%BF-js%E4%B8%ADCRUD%E5%87%BD%E6%95%B0/","content":"查询模板// 查询收款人列表async getPersonalInfoList()&#123;\tlet res = await xxxxxxxxApi.getPersonalInfoList();\tif(res.success)&#123;\t\tthis.tableData = res.data;\t&#125;else&#123;\t\tthis.$message(&#123;\t\t\ttype: &#x27;error&#x27;,\t\t\tmessage: res.message\t\t&#125;);\t&#125;&#125;\ndelete模板async deleteRow(row) &#123;\tthis.$confirm(&#x27;确定要删除该数据吗?&#x27;, &#x27;提示&#x27;, &#123;\t\tconfirmButtonText: &#x27;确定&#x27;,\t\tcancelButtonText: &#x27;取消&#x27;,\t\ttype: &#x27;warning&#x27;\t&#125;).then(async () =&gt; &#123;\t\t// 确认删除\t\tlet res = await xxxxxxApi.delete(row.id);\t\tif (res.success) &#123;\t\t\tthis.$message(&#123;\t\t\t\ttype: &#x27;success&#x27;,\t\t\t\tmessage: &#x27;删除成功!&#x27;\t\t\t&#125;);\t\t&#125;\t\tthis.getList();\t&#125;).catch(() =&gt; &#123;\t\t// 点击取消\t\tthis.$message(&#123;\t\t\ttype: &#x27;info&#x27;,\t\t\tmessage: &#x27;已取消删除&#x27;\t\t&#125;);\t&#125;)&#125;,\n\n新增或编辑更新模板  async submitEdit() &#123;      this.dialogLoading = true;      // 表单校验      if (!this.dataCheck()) &#123;          this.$message(&#123;                  type: &#x27;error&#x27;,                  message: &#x27;请填写完整信息&#x27;              &#125;);          return;    &#125;      try &#123;  \t\t// 补全数据        this.editForm.payeeName = this.receiverList.find(item =&gt; item.id === this.editForm.payeeId).realName;          // console.log(&#x27;提交的数据： &#x27;, this.editForm)          if(this.mode === &#x27;create&#x27;)&#123;              const res = await xxxxxxxxxApi.addPersonalInfo(this.editForm);              if (res.success) &#123;                  this.$message(&#123;                          type: &#x27;success&#x27;,                          message: &#x27;保存成功&#x27;                      &#125;);              &#125; else &#123;                  this.$message(&#123;                          type: &#x27;error&#x27;,                          message: res.message                      &#125;);              &#125;          &#125;else if(this.mode === &#x27;edit&#x27;)&#123;              const res = await xxxxxxxxxxApi.updatePersonalInfo(this.editForm);              if (res.success) &#123;                  this.$message(&#123;                          type: &#x27;success&#x27;,                          message: &#x27;保存成功&#x27;                      &#125;);              &#125; else &#123;                  this.$message(&#123;                          type: &#x27;error&#x27;,                          message: res.message                      &#125;)              &#125;          &#125;      &#125; catch (e) &#123;          console.log(e)      &#125; finally &#123;          this.dialogLoading = false;          this.getPersonalInfoList();      &#125;        this.dialogFormVisible = false;  &#125;,\n","categories":["技术"],"tags":["模板","前端"]},{"title":"模板-前端请求形如0-200查询","url":"/2025/06/19/%E6%A8%A1%E6%9D%BF-%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%BD%A2%E5%A6%820-200%E6%9F%A5%E8%AF%A2/","content":"下拉框中的模糊范围\n将value定义为字符串\n\n&lt;!-- 将value定义为字符串 --&gt;&lt;el-select v-model=&quot;selectedAmountRange&quot; style=&quot;width:180px&quot;&gt;\t&lt;el-option :label=&quot;&#x27;0-100元&#x27;&quot; value=&quot;0-100&quot; /&gt;\t&lt;el-option :label=&quot;&#x27;100-200元&#x27;&quot; value=&quot;100-200&quot; /&gt;\t&lt;el-option :label=&quot;&#x27;200-500元&#x27;&quot; value=&quot;200-500&quot; /&gt;\t&lt;el-option :label=&quot;&#x27;500-1000元&#x27;&quot; value=&quot;500-1000&quot; /&gt;\t&lt;el-option :label=&quot;&#x27;1000元以上&#x27;&quot; value=&quot;1000-null&quot; /&gt;&lt;/el-select&gt;\n\n\n将字符串拆解为数组\n\n// 分割金额字符串parseAmountRange() &#123;\tif (this.selectedAmountRange) &#123;\t\tconst [min, max] = this.selectedAmountRange.split(&#x27;-&#x27;).map(v =&gt; v === &#x27;null&#x27; ? null : Number(v));\t\tthis.searchModel.paymentAmount = [min, max];\t&#125; else &#123;\t\tthis.searchModel.paymentAmount = [];\t&#125;&#125;,\n","categories":["技术"],"tags":["模板","前端"]},{"title":"模板-前端请求规范","url":"/2025/06/19/%E6%A8%A1%E6%9D%BF-%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82%E8%A7%84%E8%8C%83/","content":"前端请求\n在概念上，post与get请求的参数命名是有区别的\npost参数应该为data，而get请求参数应该为param\n这个代码是拷贝自中台项目，它在拦截器request.js中对参数进行了包装，所以入参时没有包{}\n\nPost请求// ***.jsaddPersonalInfo(data) &#123;\treturn http.post(&quot;/api/paPersonalConfig/addPersonalInfo&quot;, data)&#125;,// ***.vueconst res = await paymentReviewApi.addPersonalInfo(this.editForm);\n\n@PostMapping(&quot;/addPersonalInfo&quot;)  public Result&lt;String&gt; addPersonalInfo(@RequestBody @Valid PersonalInfoConfigCreateVO vo)&#123;      PaPersonalConfigDTO dto = personalInfoConfigConverter.toDTO(vo);      personalInfoConfigService.createPersonalInfoConfig(dto);      return Result.ok(&quot;创建成功&quot;);  &#125;\n\nGet请求// ***.jscheckUniqueness( param )&#123;\t// 这里因为拦截请求给参数已经包了一层&#123;&#125;，所以这里定义的param不再加&#123;&#125;\treturn http.get(&quot;/api/paBusinessTypeConfig/checkUnique&quot;, param)&#125;// ***.vueasync checkUniqueness() &#123;\tconst value = this.editForm.classCoding.trim();\tif (!value) return false;\tlet param = &#123; inputValue: value &#125;; // 封装为对象\tlet res = await paymentReviewApi.checkUniqueness(param);\treturn !(res.success &amp;&amp; res.data === true);&#125;\n\n@GetMapping(&quot;/checkUnique&quot;)  public Result&lt;Boolean&gt; checkUnique(@RequestParam String inputValue)&#123;      System.out.println(inputValue);      boolean exists = paBusinessConfigService.checkExists(inputValue);      return Result.ok(!exists);  &#125;\n\n","categories":["技术"],"tags":["模板","前端"]},{"title":"模板-后端自动发送邮件","url":"/2025/06/25/%E6%A8%A1%E6%9D%BF-%E5%90%8E%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/","content":"自动发送邮件引入依赖在pom.xml添加\n&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&lt;/dependency&gt;\n在实践中，我的springboot版本是2.6.7,这里我邮件服务使用的是3.5.0使用没有问题\n配置邮件服务参数以企微邮箱为例，配置application.yml\nspring:  mail:    host: smtp.你的邮箱服务商.com # 例如：smtp.exmail.qq.com 可以去查相关邮箱的文档    port: 465    username: your_account@example.com    password: 授权码_or_密码    protocol: smtps    default-encoding: UTF-8    properties:      mail:        smtp:          auth: true          ssl:            enable: true\nsmtp服务的开启以企微邮箱为例，在网页端登录后，设置-&gt;收发信设置-&gt;开启服务-&gt;邮箱绑定-&gt;开启安全登录-&gt;生成密码\n定义邮件服务组件@Servicepublic class MailService &#123;    @Autowired    private JavaMailSender mailSender;    @Value(&quot;$&#123;spring.mail.username&#125;&quot;)    private String from;    // 发送简单文本邮件    public void sendSimpleMail(String to, String subject, String content) &#123;        SimpleMailMessage message = new SimpleMailMessage();        message.setFrom(from);       // 发件人        message.setTo(to);           // 收件人        message.setSubject(subject); // 标题        message.setText(content);    // 正文        mailSender.send(message);    &#125;    // 发送 HTML 邮件（例如含链接或按钮）    public void sendHtmlMail(String to, String subject, String htmlContent) &#123;        try &#123;            MimeMessage message = mailSender.createMimeMessage();            MimeMessageHelper helper = new MimeMessageHelper(message, true, &quot;UTF-8&quot;);            helper.setFrom(from);            helper.setTo(to);            helper.setSubject(subject);            helper.setText(htmlContent, true); // 第二个参数表示是否是 HTML            mailSender.send(message);        &#125; catch (MessagingException e) &#123;            throw new RuntimeException(&quot;邮件发送失败：&quot; + e.getMessage(), e);        &#125;    &#125;&#125;\n\n在合适的地点调用如activiti监听器中，在节点创建时调用\npublic class TaskNotifyListener implements TaskListener &#123;    private static MailService mailService;    // 因为监听器非 Spring Bean，需静态方式获取 Spring 容器中的 mailService    static &#123;        mailService = SpringContextHolder.getBean(MailService.class);    &#125;    @Override    public void notify(DelegateTask delegateTask) &#123;        Set&lt;IdentityLink&gt; candidates = delegateTask.getCandidates();        for (IdentityLink link : candidates) &#123;            String userId = link.getUserId();            String email = getUserEmail(userId); // 自定义方法查邮箱            if (email != null) &#123;                String subject = &quot;【流程任务提醒】您有待处理任务&quot;;                String content = String.format(                    &quot;您好，您在流程【%s】中有一个待处理任务【%s】，请及时处理。&quot;,                    delegateTask.getProcessDefinitionId(),                    delegateTask.getName()                );                mailService.sendSimpleMail(email, subject, content);            &#125;        &#125;    &#125;    private String getUserEmail(String userId) &#123;        // 示例逻辑：从数据库、缓存或远程服务查邮箱        return &quot;somebody@example.com&quot;;    &#125;&#125;\n\nSpringContextHolder 工具类，方便在非Spring Bean的地方拿BeanSpringContextHolder 是你需要手动写的一个工具类，方便在非 Spring Bean 中拿到 Bean 实例。\n@Componentpublic class SpringContextHolder implements ApplicationContextAware &#123;    private static ApplicationContext context;    public static &lt;T&gt; T getBean(Class&lt;T&gt; clazz) &#123;        return context.getBean(clazz);    &#125;    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;        SpringContextHolder.context = applicationContext;    &#125;&#125;\n\n异步发送邮件，避免影响性能\n为了避免流程阻塞，推荐异步执行邮件发送任务：\n\n@Asyncpublic void sendSimpleMailAsync(String to, String subject, String content) &#123;    sendSimpleMail(to, subject, content);&#125;\n\n在MailService上添加注解\n\n@Service@Asyncpublic class MailService &#123;    ...&#125;\n\n还需在主程序上开启异步支持：\n\n@EnableAsync@SpringBootApplicationpublic class Application &#123;    public static void main(String[] args) &#123;        SpringApplication.run(Application.class, args);    &#125;&#125;","categories":["技术"],"tags":["后端","模板"]},{"title":"模板-导出列表为excel文件","url":"/2025/06/19/%E6%A8%A1%E6%9D%BF-%E5%AF%BC%E5%87%BA%E5%88%97%E8%A1%A8%E4%B8%BAexcel%E6%96%87%E4%BB%B6/","content":"前端\n中台项目中\n由于前端拦截器里封装了请求，只能选择使用封装后的请求，否则会没有数据\n\n// xxx.js请求async exportSpecialCollection(param) &#123;return await http.getDown(&quot;/api/specialCollection/export&quot;, param, &#x27;blob&#x27;);&#125;,\n\n\n调用方法可以直接按照下面的方式\n\n// 导出方法async handleExport() &#123;\tthis.exportLoading = true;\tlet params = &#123;\t\t...this.searchModel,\t&#125;\ttry &#123;\t\tthis.$modal.confirm(&#x27;是否确认导出数据项？&#x27;).then(()=&gt;&#123;\t\t\treturn paymentReviewApi.exportApplyRecords(params);\t\t&#125;).then(response =&gt; &#123;\t\t\tthis.$download.excel(response, &#x27;付款审核.xlsx&#x27;);\t\t&#125;)\t&#125; catch (error) &#123;\t\tconsole.log(&quot;导出失败&quot;,error);\t\tthis.$message.error(&#x27;导出失败，请稍后再试&#x27;)\t&#125; finally &#123;\t\tthis.exportLoading = false;\t&#125;&#125;,\n后端\n使用了EasyExcel，后端对EasyExcel进行了封装，调用封装后的方法，如果有一些字段匹配不上，需要手动直接匹配，需要进行判空，可能会出错\n\n// service/**   * 导出明细Excel   * @param query 条件参数   * @return  excelVOList   */@Override  public List&lt;PaApplyRecordsExportExcelVO&gt; exportApplyRecords(ApplyQueryDTO query)&#123;      List&lt;PaApplyRecordsRespVO&gt; result = paApplyRecordsMapper.selectDetailPage(query);      Map&lt;Integer,String&gt; statusMap = new HashMap&lt;&gt;();      statusMap.put(0,&quot;待提交&quot;);      statusMap.put(1,&quot;待部门负责人审批&quot;);      statusMap.put(2,&quot;待财务负责人审批&quot;);      statusMap.put(3,&quot;待总经理审批&quot;);      statusMap.put(4,&quot;待支付&quot;);      statusMap.put(5,&quot;已支付&quot;);      statusMap.put(6,&quot;审批未通过&quot;);      statusMap.put(7,&quot;已取消&quot;);      statusMap.put(8,&quot;已关闭&quot;);      statusMap.put(9,&quot;已归档&quot;);        return result.stream().map(item -&gt; &#123;          PaApplyRecordsExportExcelVO vo = new PaApplyRecordsExportExcelVO();          BeanUtils.copyProperties(item,vo);          if(item.getApplyStatus()!=null)&#123;              vo.setApplyStatus(statusMap.get(item.getApplyStatus()));          &#125;          if(item.getApplyTime()!=null)&#123;  vo.setApplyTime(Date.from(item.getApplyTime().atZone(ZoneId.systemDefault()).toInstant()));          &#125;          if(item.getPaymentTime()!=null)&#123;  vo.setPaymentTime(Date.from(item.getPaymentTime().atZone(ZoneId.systemDefault()).toInstant()));          &#125;          return vo;      &#125;).collect(Collectors.toList());  &#125;\n\n// controller/**   * 返回excel文件流   * @param response 响应体   * @param query 条件参数   */  @GetMapping(&quot;/export&quot;)  public void exportApplyRecords(HttpServletResponse response, ApplyQueryDTO query)&#123;      try&#123;          // 1. 设置响应头          setExcelResponseHeader(response, &quot;用户数据.xlsx&quot;);            // 查询 + 转换数据          List&lt;PaApplyRecordsExportExcelVO&gt; data = paApplyRecordsService.exportApplyRecords(query);            ExcelUtils.write(response, &quot;付费明细单.xlsx&quot;, &quot;付费明细单&quot;, PaApplyRecordsExportExcelVO.class, data);          System.out.println(&quot;response: &quot;+response);      &#125;catch (Exception e)&#123;          throw new RuntimeException(&quot;导出excel失败&quot;,e);      &#125;    &#125;    /**   * 设置Excel下载响应头   */  private void setExcelResponseHeader(HttpServletResponse response, String fileName) throws UnsupportedEncodingException &#123;      // 文件名处理，防止中文乱码      String encodedFileName = URLEncoder.encode(fileName, &quot;UTF-8&quot;).replaceAll(&quot;\\\\+&quot;, &quot;%20&quot;);      response.setContentType(&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;);      response.setCharacterEncoding(&quot;utf-8&quot;);      response.setHeader(&quot;Content-disposition&quot;,&quot;attachment;filename*=utf-8&#x27;&#x27;&quot; + encodedFileName + &quot;.xlsx&quot;);  &#125;\n\n按照以上方法，需要考虑具体项目如何定义拦截器的\n\n","categories":["技术"],"tags":["后端","模板","前端"]},{"title":"待办提醒tips","url":"/2025/06/25/%E6%A8%A1%E6%9D%BF-%E5%BE%85%E5%8A%9E%E6%8F%90%E9%86%92tips/","content":"待办提醒tips小卡片，或者是dialog什么的思路为：\n\n封装好轮询组件挂 App.vue；\n配合 Element UI 提醒组件；\n定时轮询你的接口并判断是否提示；\n\n后端一个接口，反应是否有待办，有几个待办\n// controller@RestController@RequestMapping(&quot;/api/workflow/task&quot;)public class TaskController &#123;    @Resource    private TaskQueryService taskQueryService;    @GetMapping(&quot;/pending-exists&quot;)    public Result&lt;Map&lt;String,Object&gt;&gt; hasPendingTasks()&#123;        String username = CurrentUser().username;        long countPendingTasks = taskQueryService.countPendingTasks(username);        HashMap&lt;String, Object&gt; result = new HashMap&lt;&gt;();        result.put(&quot;hasPendingTask&quot;,countPendingTasks&gt;0);        result.put(&quot;taskCount&quot;,countPendingTasks);        return Result.ok(result);    &#125;    public User CurrentUser()&#123;        UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext()                .getAuthentication()                .getPrincipal();        return (User) userDetails;    &#125;&#125;// service@Overridepublic long countPendingTasks(String username) &#123;    return taskService.createTaskQuery()            .taskCandidateOrAssigned(username)            .active()            .count();&#125;\n前端在components下创建了新包Tips，在Tips下新建了PendingTaskReminder.vue文件\n\n编写组件与定时轮询\n\n&lt;template&gt;    &lt;!-- 可选插糟或定制内容，不写UI也行，直接挂载 --&gt;    &lt;div style=&quot;display: none;&quot;&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import paymentReviewApi from &#x27;@/api/paymentReview/paymentReview.js&#x27;export default&#123;    name: &#x27;PendingTaskReminder&#x27;,    data()&#123;        return &#123;            intervalId: null,            lastNotifyTime: 0, // 时间戳            lastHasPending: false,        &#125;    &#125;,    mounted()&#123;        this.startPolling();    &#125;,    beforeDestory()&#123;        clearInterval(this.intervalId)    &#125;,    methods:&#123;        startPolling()&#123;            this.checkTask() // 立即检查一次            this.intervalId = setInterval(this.checkTask,60*1000) // 一分钟检查一次        &#125;,        async checkTask()&#123;            try&#123;                const res = await paymentReviewApi.getPendingTaskCount();                const &#123;hasPendingTask,taskCount&#125; = res.data;                const now = Date.now();                if(hasPendingTask)this.showNotification(taskCount);                this.lastHasPending = hasPendingTask;            &#125;catch(error)&#123;                console.log(&#x27;[待办审批提醒] 获取任务失败&#x27;,error)            &#125;        &#125;,        showNotification(count)&#123;            this.$notify(&#123;                title: &#x27;待审批提醒&#x27;,                message: `您有$&#123;count&#125;个待审批任务，请及时处理`,                type: &#x27;warning&#x27;,                position: &#x27;bottom-right&#x27;,                duration: 8000,                onClick: () =&gt; &#123;                    this.$router.push(&#123;                        name: &#x27;paymentOrderApproval&#x27;                    &#125;)                &#125;,            &#125;)        &#125;    &#125;&#125;&lt;/script&gt;\n\n挂载到App.vue\n&lt;template&gt;  &lt;div id=&quot;app&quot;&gt;    &lt;router-view /&gt;    &lt;PendingTaskReminder/&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import PendingTaskReminder from &#x27;./components/Tips/PendingTaskReminder.vue&#x27;;export default &#123;  name: &#x27;App&#x27;,  components:&#123;    PendingTaskReminder  &#125;&#125;&lt;/script&gt;\n","categories":["技术"],"tags":["后端","模板","前端"]},{"title":"每天用到了哪些计算机网络技术","url":"/2025/06/24/%E6%AF%8F%E5%A4%A9%E7%94%A8%E5%88%B0%E4%BA%86%E5%93%AA%E4%BA%9B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/","content":"你每天用的网络，其实都用到了哪些关键技术？🧱 网络通信的基础概念（你肯定见过）\n\n\n场景\n背后知识点\n\n\n\n打开浏览器访问网页（如百度）\nDNS解析、TCP连接、HTTP请求\n\n\n使用微信或QQ聊天\n长连接（TCP）、心跳包、NAT穿透\n\n\n玩游戏（如 LOL）\nUDP通信、延迟、丢包、服务器同步\n\n\n使用 API 或开发后端接口\nRESTful API、HTTP状态码、CORS、安全头\n\n\n\n你的大多数服务，基本流程都是\n\n输入域名 → DNS 查 IP → 建 TCP 连接 → 发 HTTP 请求 → 收响应 → 渲染或下载内容\n🧰 常用协议和术语你应该掌握的（带图景）\n\n\n协议&#x2F;术语\n实际作用\n示例\n建议理解深度\n\n\n\nIP\n唯一地址，定位设备\n192.168.1.1，公网ip\n了解ipv4&#x2F;ipv6的概念\n\n\nDNS\n域名-&gt;ip解析\nbaidu.com-&gt; 110.242.68.4\n理解本地 DNS 缓存、污染问题\n\n\nTCP&#x2F;UDP\n传输层协议\nTCP 保证可靠、UDP 快\n知道三次握手、UDP适用于游戏\n\n\nHTTP&#x2F;HTTPS\n访问网页用的协议\nGET&#x2F;POST 请求，状态码\n状态码、请求头、SSL 证书\n\n\nport\n服务“编号”\n80 是 HTTP，443 是 HTTPS\n前后端服务调试时常用\n\n\nNAT\n路由器内网映射\n家用网络常见，端口映射\n搞内网穿透时必须了解\n\n\n举个例子：你访问 https://steamcommunity.com/ 实际经历了什么？\n\n浏览器先问 DNS：steamcommunity.com 是哪个 IP？\n得到 IP 后，发起 TCP 三次握手，建立连接。\n客户端发起 TLS 握手，进入 HTTPS 通信。\n发出 GET 请求：GET &#x2F;market&#x2F;。\n服务器响应 HTML&#x2F;CSS&#x2F;JS，浏览器渲染页面。\n\n🕸️ 前后端常用网络知识\n\n\n内容\n实际作用\n实例\n\n\n\nHTTP 状态码\n判断请求是否成功\n200 成功、404 找不到、500 服务错误\n\n\nCORS 跨域\n限制不同域之间访问资源\n本地调接口时报错：CORS policy blocked…\n\n\nCookie &#x2F; Session &#x2F; Token\n用户身份验证\n登录之后保持会话\n\n\nHTTP Method\n区分动作类型\nGET（查），POST（增），PUT（改），DELETE（删）\n\n\n🚀 网络性能优化相关知识（加速器相关）\n\n\n技术点\n实际作用\n\n\n\nCDN 加速\n靠近你的位置提供缓存，提高访问速度\n\n\nDNS 优化\n减少解析时间，防污染\n\n\n反向代理\n缓存热点资源，减少后端压力（如 nginx）\n\n\n连接复用（HTTP&#x2F;2）\n一个连接跑多个请求，提升效率\n\n\nTLS 握手优化\n降低首次 HTTPS 连接的延迟\n\n\n\nSteam++ 类工具的原理其实就用到了这些技术：\nDNS优化 + 智能选路 + 连接复用 + 本地代理分流。\n\n🔐 网络安全也与你相关（别等被攻击才学习）\n\n\n概念\n示例\n你能做什么\n\n\n\nXSS &#x2F; CSRF\n你的网站被嵌入恶意脚本\n后端加 Token 验证，前端设置 CSP\n\n\n数据包监听\n不加密传输被人窃取\n用 HTTPS\n\n\n拒绝服务（DoS）\n短时间内请求爆炸\n限流、熔断、缓存\n\n\n","categories":["技术"],"tags":["计算机网络"]}]